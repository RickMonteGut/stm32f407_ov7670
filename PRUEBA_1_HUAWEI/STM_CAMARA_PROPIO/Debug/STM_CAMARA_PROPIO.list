
STM_CAMARA_PROPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c788  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800c910  0800c910  0001c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9f4  0800c9f4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9fc  0800c9fc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9fc  0800c9fc  0001c9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca00  0800ca00  0001ca00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ca04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000a78  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b0c  20000b0c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023948  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e2c  00000000  00000000  00043a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c30  00000000  00000000  00048838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a40  00000000  00000000  0004a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028142  00000000  00000000  0004bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000255a7  00000000  00000000  00073fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db62b  00000000  00000000  00099591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00174bbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d38  00000000  00000000  00174c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c8f8 	.word	0x0800c8f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800c8f8 	.word	0x0800c8f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcdIli9341_getDrawAddress>:
#define LCD_DATA      (*((volatile uint8_t*) LCD_DATA_ADDR))

#define LCD_DIREC_DATOS   0x60040000

inline uint8_t* lcdIli9341_getDrawAddress()                    //aqui cambié el tipo de salida por 8 bits en lugar de 16 bits debido al tipo de interfaz de mi LCD
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return (uint8_t*)0x60040000;             //cambio LCD_DATA_ADDR por la direccion de datos abajo 0x60040000
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <lcdIli9341_getDrawAddress+0x10>)
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	60040000 	.word	0x60040000

080004e0 <ILI9341_SendCommand>:


//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	*(__IO uint8_t *)(0x60000000) = com;
 80004ea:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	7013      	strb	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	*(__IO uint8_t *)(0x60040000) = data;     //cambie 4 por 2
 800050a:	4a04      	ldr	r2, [pc, #16]	; (800051c <ILI9341_SendData+0x1c>)
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	7013      	strb	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	60040000 	.word	0x60040000

08000520 <ILI9341_SetCursorPosition>:



//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4604      	mov	r4, r0
 8000528:	4608      	mov	r0, r1
 800052a:	4611      	mov	r1, r2
 800052c:	461a      	mov	r2, r3
 800052e:	4623      	mov	r3, r4
 8000530:	80fb      	strh	r3, [r7, #6]
 8000532:	4603      	mov	r3, r0
 8000534:	80bb      	strh	r3, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	807b      	strh	r3, [r7, #2]
 800053a:	4613      	mov	r3, r2
 800053c:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 800053e:	202a      	movs	r0, #42	; 0x2a
 8000540:	f7ff ffce 	bl	80004e0 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	0a1b      	lsrs	r3, r3, #8
 8000548:	b29b      	uxth	r3, r3
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffd7 	bl	8000500 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffd2 	bl	8000500 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	0a1b      	lsrs	r3, r3, #8
 8000560:	b29b      	uxth	r3, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffcb 	bl	8000500 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 800056a:	887b      	ldrh	r3, [r7, #2]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffc6 	bl	8000500 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);  //  <--------------------------------- puede haber algo aquí
 8000574:	202b      	movs	r0, #43	; 0x2b
 8000576:	f7ff ffb3 	bl	80004e0 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	b29b      	uxth	r3, r3
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffbc 	bl	8000500 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ffb7 	bl	8000500 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000592:	883b      	ldrh	r3, [r7, #0]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffb0 	bl	8000500 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 80005a0:	883b      	ldrh	r3, [r7, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffab 	bl	8000500 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 80005aa:	202c      	movs	r0, #44	; 0x2c
 80005ac:	f7ff ff98 	bl	80004e0 <ILI9341_SendCommand>
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd90      	pop	{r4, r7, pc}

080005b8 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(void)
 {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff ff8f 	bl	80004e0 <ILI9341_SendCommand>
   HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f001 fb3c 	bl	8001c40 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80005c8:	2028      	movs	r0, #40	; 0x28
 80005ca:	f7ff ff89 	bl	80004e0 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80005ce:	20c0      	movs	r0, #192	; 0xc0
 80005d0:	f7ff ff86 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80005d4:	2026      	movs	r0, #38	; 0x26
 80005d6:	f7ff ff93 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80005da:	20c1      	movs	r0, #193	; 0xc1
 80005dc:	f7ff ff80 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80005e0:	2011      	movs	r0, #17
 80005e2:	f7ff ff8d 	bl	8000500 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80005e6:	20c5      	movs	r0, #197	; 0xc5
 80005e8:	f7ff ff7a 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80005ec:	2035      	movs	r0, #53	; 0x35
 80005ee:	f7ff ff87 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80005f2:	203e      	movs	r0, #62	; 0x3e
 80005f4:	f7ff ff84 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80005f8:	20c7      	movs	r0, #199	; 0xc7
 80005fa:	f7ff ff71 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80005fe:	20be      	movs	r0, #190	; 0xbe
 8000600:	f7ff ff7e 	bl	8000500 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff6b 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 800060a:	2048      	movs	r0, #72	; 0x48
 800060c:	f7ff ff78 	bl	8000500 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8000610:	203a      	movs	r0, #58	; 0x3a
 8000612:	f7ff ff65 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 8000616:	2055      	movs	r0, #85	; 0x55
 8000618:	f7ff ff72 	bl	8000500 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 800061c:	20b1      	movs	r0, #177	; 0xb1
 800061e:	f7ff ff5f 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ff6c 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 8000628:	201f      	movs	r0, #31
 800062a:	f7ff ff69 	bl	8000500 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 800062e:	202a      	movs	r0, #42	; 0x2a
 8000630:	f7ff ff56 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ff63 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff ff60 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ff5d 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000646:	20ef      	movs	r0, #239	; 0xef
 8000648:	f7ff ff5a 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 800064c:	202b      	movs	r0, #43	; 0x2b
 800064e:	f7ff ff47 	bl	80004e0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ff54 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ff51 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff ff4e 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000664:	203f      	movs	r0, #63	; 0x3f
 8000666:	f7ff ff4b 	bl	8000500 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 800066a:	2034      	movs	r0, #52	; 0x34
 800066c:	f7ff ff38 	bl	80004e0 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000670:	20b7      	movs	r0, #183	; 0xb7
 8000672:	f7ff ff35 	bl	80004e0 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000676:	2007      	movs	r0, #7
 8000678:	f7ff ff42 	bl	8000500 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 800067c:	20b6      	movs	r0, #182	; 0xb6
 800067e:	f7ff ff2f 	bl	80004e0 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000682:	200a      	movs	r0, #10
 8000684:	f7ff ff3c 	bl	8000500 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000688:	2082      	movs	r0, #130	; 0x82
 800068a:	f7ff ff39 	bl	8000500 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 800068e:	2027      	movs	r0, #39	; 0x27
 8000690:	f7ff ff36 	bl	8000500 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff33 	bl	8000500 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 800069a:	2011      	movs	r0, #17
 800069c:	f7ff ff20 	bl	80004e0 <ILI9341_SendCommand>
   HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f001 facd 	bl	8001c40 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 80006a6:	2029      	movs	r0, #41	; 0x29
 80006a8:	f7ff ff1a 	bl	80004e0 <ILI9341_SendCommand>
   HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f001 fac7 	bl	8001c40 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 80006b2:	202c      	movs	r0, #44	; 0x2c
 80006b4:	f7ff ff14 	bl	80004e0 <ILI9341_SendCommand>
   HAL_Delay(5);
 80006b8:	2005      	movs	r0, #5
 80006ba:	f001 fac1 	bl	8001c40 <HAL_Delay>
  // printf("\n Lo que sigue es el GRAM\n");
   //printf(ILI9341_GRAM);
   //printf("hasta aqui llega el GRAM \n");
 }
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <ILI9341_Fill>:
  ILI9341_SetCursorPosition(x, y, x, y);
	ILI9341_SendData(color>>8);
	ILI9341_SendData(color&0xFF);
}
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 80006ce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80006d2:	60fb      	str	r3, [r7, #12]

	if(rotationNum==1 || rotationNum==3)
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <ILI9341_Fill+0x80>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d003      	beq.n	80006e4 <ILI9341_Fill+0x20>
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <ILI9341_Fill+0x80>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d107      	bne.n	80006f4 <ILI9341_Fill+0x30>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 80006e4:	f240 133f 	movw	r3, #319	; 0x13f
 80006e8:	22ef      	movs	r2, #239	; 0xef
 80006ea:	2100      	movs	r1, #0
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff17 	bl	8000520 <ILI9341_SetCursorPosition>
 80006f2:	e00e      	b.n	8000712 <ILI9341_Fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <ILI9341_Fill+0x80>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d003      	beq.n	8000704 <ILI9341_Fill+0x40>
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <ILI9341_Fill+0x80>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b04      	cmp	r3, #4
 8000702:	d116      	bne.n	8000732 <ILI9341_Fill+0x6e>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000704:	23ef      	movs	r3, #239	; 0xef
 8000706:	f240 123f 	movw	r2, #319	; 0x13f
 800070a:	2100      	movs	r1, #0
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff07 	bl	8000520 <ILI9341_SetCursorPosition>
	}

	while (n) {
 8000712:	e00e      	b.n	8000732 <ILI9341_Fill+0x6e>
			n--;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3b01      	subs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	b29b      	uxth	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff feec 	bl	8000500 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fee7 	bl	8000500 <ILI9341_SendData>
	while (n) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1ed      	bne.n	8000714 <ILI9341_Fill+0x50>
	}
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000000 	.word	0x20000000

08000748 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3b01      	subs	r3, #1
 8000756:	2b03      	cmp	r3, #3
 8000758:	d832      	bhi.n	80007c0 <ILI9341_setRotation+0x78>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <ILI9341_setRotation+0x18>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	08000771 	.word	0x08000771
 8000764:	08000785 	.word	0x08000785
 8000768:	08000799 	.word	0x08000799
 800076c:	080007ad 	.word	0x080007ad
	{
		case 1:
			rotationNum = 1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <ILI9341_setRotation+0x94>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000776:	2036      	movs	r0, #54	; 0x36
 8000778:	f7ff feb2 	bl	80004e0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800077c:	2088      	movs	r0, #136	; 0x88
 800077e:	f7ff febf 	bl	8000500 <ILI9341_SendData>
			break;
 8000782:	e027      	b.n	80007d4 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <ILI9341_setRotation+0x94>)
 8000786:	2202      	movs	r2, #2
 8000788:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800078a:	2036      	movs	r0, #54	; 0x36
 800078c:	f7ff fea8 	bl	80004e0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000790:	2028      	movs	r0, #40	; 0x28
 8000792:	f7ff feb5 	bl	8000500 <ILI9341_SendData>
			break;
 8000796:	e01d      	b.n	80007d4 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <ILI9341_setRotation+0x94>)
 800079a:	2203      	movs	r2, #3
 800079c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800079e:	2036      	movs	r0, #54	; 0x36
 80007a0:	f7ff fe9e 	bl	80004e0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 80007a4:	2048      	movs	r0, #72	; 0x48
 80007a6:	f7ff feab 	bl	8000500 <ILI9341_SendData>
			break;
 80007aa:	e013      	b.n	80007d4 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <ILI9341_setRotation+0x94>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80007b2:	2036      	movs	r0, #54	; 0x36
 80007b4:	f7ff fe94 	bl	80004e0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80007b8:	20e8      	movs	r0, #232	; 0xe8
 80007ba:	f7ff fea1 	bl	8000500 <ILI9341_SendData>
			break;
 80007be:	e009      	b.n	80007d4 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <ILI9341_setRotation+0x94>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80007c6:	2036      	movs	r0, #54	; 0x36
 80007c8:	f7ff fe8a 	bl	80004e0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80007cc:	2088      	movs	r0, #136	; 0x88
 80007ce:	f7ff fe97 	bl	8000500 <ILI9341_SendData>
			break;
 80007d2:	bf00      	nop
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ec:	482a      	ldr	r0, [pc, #168]	; (8000898 <main+0xb8>)
 80007ee:	f003 fd2b 	bl	8004248 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f001 f9b3 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f857 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 fa39 	bl	8000c70 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f000 f9f9 	bl	8000bf4 <MX_DMA_Init>
  MX_DCMI_Init();
 8000802:	f000 f8c3 	bl	800098c <MX_DCMI_Init>
  MX_FSMC_Init();
 8000806:	f000 fb21 	bl	8000e4c <MX_FSMC_Init>
  MX_I2C2_Init();
 800080a:	f000 f8e7 	bl	80009dc <MX_I2C2_Init>
  MX_SPI1_Init();
 800080e:	f000 f913 	bl	8000a38 <MX_SPI1_Init>
  MX_TIM5_Init();
 8000812:	f000 f947 	bl	8000aa4 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000816:	f000 f999 	bl	8000b4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800081a:	f000 f9c1 	bl	8000ba0 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 800081e:	f00b f8db 	bl	800b9d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

//____________________________________________________________________________DATOS POR SERIAL, EN ARCHIVO uartTerminal vienen comandos__

  retarget_init();
 8000822:	f000 fb79 	bl	8000f18 <retarget_init>
	  scanf("%d", &number);
	  printf("%d x 2 = %d", number, number*2);
	  */

  //__________________________________________________________________________AQUI EMPIEZA LCD_________________
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2104      	movs	r1, #4
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <main+0xb8>)
 800082c:	f003 fd0c 	bl	8004248 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000830:	200a      	movs	r0, #10
 8000832:	f001 fa05 	bl	8001c40 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2104      	movs	r1, #4
 800083a:	4817      	ldr	r0, [pc, #92]	; (8000898 <main+0xb8>)
 800083c:	f003 fd04 	bl	8004248 <HAL_GPIO_WritePin>

	//lcdIli9341_init(); //de iwitake inicializacion de lcd
	//lcdIli9341_writeCmd(0x01);  // de iwitake lcd


	ILI9341_Init();   // INCIALIZACION DE lcd
 8000840:	f7ff feba 	bl	80005b8 <ILI9341_Init>
	ILI9341_setRotation(3);
 8000844:	2003      	movs	r0, #3
 8000846:	f7ff ff7f 	bl	8000748 <ILI9341_setRotation>

	ILI9341_Fill(COLOR_RED);
 800084a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800084e:	f7ff ff39 	bl	80006c4 <ILI9341_Fill>
	//Print text
	//ILI9341_printText("HELLO", 60, 90, COLOR_YELLOW, COLOR_YELLOW, 5);
	//Print-Fill triangle
	//ILI9341_fillTriangle(10, 160, 110, 160, 190, 300, COLOR_BLACK);

	HAL_Delay(4000);
 8000852:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000856:	f001 f9f3 	bl	8001c40 <HAL_Delay>
	uint8_t* myImage1;


	//direccion= ILI9341_SendCommand();

	p_lcdData = lcdIli9341_getDrawAddress();
 800085a:	f7ff fe37 	bl	80004cc <lcdIli9341_getDrawAddress>
 800085e:	6078      	str	r0, [r7, #4]
	//ILI9341_DISPLAY_INVERSION



	//ov7670_startCap(OV7670_CAP_SINGLE_FRAME, Flash_Address);   // se supone que está guardado en la direccion de memoria asignada
	ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <main+0xbc>)
 8000862:	490f      	ldr	r1, [pc, #60]	; (80008a0 <main+0xc0>)
 8000864:	480f      	ldr	r0, [pc, #60]	; (80008a4 <main+0xc4>)
 8000866:	f000 ffb3 	bl	80017d0 <ov7670_init>
	ov7670_config(OV7670_MODE_QVGA_RGB565);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 ffee 	bl	800184c <ov7670_config>
	ov7670_startCap(OV7670_CAP_CONTINUOUS /*, p_lcdData*/);    // ya intenté: 1.-directamente con 0x60040000 y 0x60000000
 8000870:	2000      	movs	r0, #0
 8000872:	f001 f81b 	bl	80018ac <ov7670_startCap>
	//ILI9341_SendData(myImage1);
	ov7670_startCap(OV7670_CAP_CONTINUOUS /*, p_lcdData*/);
 8000876:	2000      	movs	r0, #0
 8000878:	f001 f818 	bl	80018ac <ov7670_startCap>
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <main+0xb8>)
 8000884:	f003 fce0 	bl	8004248 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(&huart3, myImage1, sizeof(myImage1), 0xffff);

	HAL_Delay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088c:	f001 f9d8 	bl	8001c40 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
	  HAL_Delay(4000);
*/

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000890:	f00b f8c8 	bl	800ba24 <MX_USB_HOST_Process>
 8000894:	e7fc      	b.n	8000890 <main+0xb0>
 8000896:	bf00      	nop
 8000898:	40020c00 	.word	0x40020c00
 800089c:	20000150 	.word	0x20000150
 80008a0:	200000f0 	.word	0x200000f0
 80008a4:	200000b0 	.word	0x200000b0

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2230      	movs	r2, #48	; 0x30
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00b fbd0 	bl	800c05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <SystemClock_Config+0xdc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a2b      	ldr	r2, [pc, #172]	; (8000984 <SystemClock_Config+0xdc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <SystemClock_Config+0xdc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <SystemClock_Config+0xe0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a25      	ldr	r2, [pc, #148]	; (8000988 <SystemClock_Config+0xe0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <SystemClock_Config+0xe0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000918:	2308      	movs	r3, #8
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000926:	2307      	movs	r3, #7
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	4618      	mov	r0, r3
 8000930:	f006 f9d4 	bl	8006cdc <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800093a:	f000 fae7 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2105      	movs	r1, #5
 800095c:	4618      	mov	r0, r3
 800095e:	f006 fc35 	bl	80071cc <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000968:	f000 fad0 	bl	8000f0c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 800096c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000970:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000974:	2000      	movs	r0, #0
 8000976:	f006 fd0f 	bl	8007398 <HAL_RCC_MCOConfig>
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_DCMI_Init+0x48>)
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <MX_DCMI_Init+0x4c>)
 8000994:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_DCMI_Init+0x48>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <MX_DCMI_Init+0x48>)
 800099e:	2220      	movs	r2, #32
 80009a0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_DCMI_Init+0x48>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_DCMI_Init+0x48>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_DCMI_Init+0x48>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_DCMI_Init+0x48>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_DCMI_Init+0x48>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_DCMI_Init+0x48>)
 80009c2:	f001 fcad 	bl	8002320 <HAL_DCMI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80009cc:	f000 fa9e 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000b0 	.word	0x200000b0
 80009d8:	50050000 	.word	0x50050000

080009dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_I2C2_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_I2C2_Init+0x58>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_I2C2_Init+0x50>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_I2C2_Init+0x50>)
 8000a1a:	f005 f839 	bl	8005a90 <HAL_I2C_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a24:	f000 fa72 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000150 	.word	0x20000150
 8000a30:	40005800 	.word	0x40005800
 8000a34:	000186a0 	.word	0x000186a0

08000a38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_SPI1_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a8a:	f006 fe27 	bl	80076dc <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 fa3a 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200001a4 	.word	0x200001a4
 8000aa0:	40013000 	.word	0x40013000

08000aa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2224      	movs	r2, #36	; 0x24
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00b fad2 	bl	800c05c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000ac2:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <MX_TIM5_Init+0xa4>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000b12:	f006 feb4 	bl	800787e <HAL_TIM_Encoder_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b1c:	f000 f9f6 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_TIM5_Init+0xa0>)
 8000b2e:	f006 ffed 	bl	8007b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b38:	f000 f9e8 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001fc 	.word	0x200001fc
 8000b48:	40000c00 	.word	0x40000c00

08000b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART2_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b58:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f007 f83e 	bl	8007c04 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f9bd 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000244 	.word	0x20000244
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_USART3_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART3_UART_Init+0x4c>)
 8000bd8:	f007 f814 	bl	8007c04 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f993 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000288 	.word	0x20000288
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_DMA_Init+0x78>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <MX_DMA_Init+0x78>)
 8000c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_DMA_Init+0x78>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_DMA_Init+0x78>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <MX_DMA_Init+0x78>)
 8000c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_DMA_Init+0x78>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	200c      	movs	r0, #12
 8000c38:	f001 f901 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c3c:	200c      	movs	r0, #12
 8000c3e:	f001 f91a 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2010      	movs	r0, #16
 8000c48:	f001 f8f9 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c4c:	2010      	movs	r0, #16
 8000c4e:	f001 f912 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2039      	movs	r0, #57	; 0x39
 8000c58:	f001 f8f1 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c5c:	2039      	movs	r0, #57	; 0x39
 8000c5e:	f001 f90a 	bl	8001e76 <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	4b6a      	ldr	r3, [pc, #424]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a69      	ldr	r2, [pc, #420]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b67      	ldr	r3, [pc, #412]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	4b63      	ldr	r3, [pc, #396]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a62      	ldr	r2, [pc, #392]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b4e      	ldr	r3, [pc, #312]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a4d      	ldr	r2, [pc, #308]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a46      	ldr	r2, [pc, #280]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2108      	movs	r1, #8
 8000d32:	4841      	ldr	r0, [pc, #260]	; (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d34:	f003 fa88 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	483f      	ldr	r0, [pc, #252]	; (8000e3c <MX_GPIO_Init+0x1cc>)
 8000d3e:	f003 fa83 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	483d      	ldr	r0, [pc, #244]	; (8000e3c <MX_GPIO_Init+0x1cc>)
 8000d48:	f003 fa7e 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|RST_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f241 0104 	movw	r1, #4100	; 0x1004
 8000d52:	483b      	ldr	r0, [pc, #236]	; (8000e40 <MX_GPIO_Init+0x1d0>)
 8000d54:	f003 fa78 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5e:	4839      	ldr	r0, [pc, #228]	; (8000e44 <MX_GPIO_Init+0x1d4>)
 8000d60:	f003 fa72 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d64:	2308      	movs	r3, #8
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482f      	ldr	r0, [pc, #188]	; (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d7c:	f003 f8c8 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CAMERA_RESET_Pin;
 8000d80:	2321      	movs	r3, #33	; 0x21
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4829      	ldr	r0, [pc, #164]	; (8000e3c <MX_GPIO_Init+0x1cc>)
 8000d98:	f003 f8ba 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_CAP_Pin BTN_MODE_Pin BTN_OTHER_Pin */
  GPIO_InitStruct.Pin = BTN_CAP_Pin|BTN_MODE_Pin|BTN_OTHER_Pin;
 8000d9c:	230e      	movs	r3, #14
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4823      	ldr	r0, [pc, #140]	; (8000e3c <MX_GPIO_Init+0x1cc>)
 8000db0:	f003 f8ae 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000db4:	2304      	movs	r3, #4
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4820      	ldr	r0, [pc, #128]	; (8000e48 <MX_GPIO_Init+0x1d8>)
 8000dc8:	f003 f8a2 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|RST_Pin;
 8000dcc:	f241 0304 	movw	r3, #4100	; 0x1004
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <MX_GPIO_Init+0x1d0>)
 8000de6:	f003 f893 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MX_GPIO_Init+0x1d4>)
 8000e08:	f003 f882 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <MX_GPIO_Init+0x1d4>)
 8000e26:	f003 f873 	bl	8003f10 <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3730      	adds	r7, #48	; 0x30
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020c00 	.word	0x40020c00
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400

08000e4c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e66:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e6a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <MX_FSMC_Init+0xbc>)
 8000e70:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ecc:	230f      	movs	r3, #15
 8000ece:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000edc:	2311      	movs	r3, #17
 8000ede:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_FSMC_Init+0xb8>)
 8000eec:	f006 fc7f 	bl	80077ee <HAL_SRAM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000ef6:	f000 f809 	bl	8000f0c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000038c 	.word	0x2000038c
 8000f08:	a0000104 	.word	0xa0000104

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <retarget_init>:
#include <stdio.h>
#include "common.h"
#include "./uartTerminal/uartTerminal.h"

void retarget_init()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  extern UART_HandleTypeDef huart3;
  uartTerminal_init(&huart3);
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <retarget_init+0x38>)
 8000f1e:	f000 fd87 	bl	8001a30 <uartTerminal_init>
  setbuf(stdin, NULL);
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <retarget_init+0x3c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f00b f98e 	bl	800c24c <setbuf>
  setbuf(stdout, NULL);
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <retarget_init+0x3c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00b f987 	bl	800c24c <setbuf>
  setbuf(stderr, NULL);
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <retarget_init+0x3c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00b f980 	bl	800c24c <setbuf>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000288 	.word	0x20000288
 8000f54:	20000030 	.word	0x20000030

08000f58 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uartTerminal_send(ch);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fd7f 	bl	8001a68 <uartTerminal_send>
  return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

GETCHAR_PROTOTYPE
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  return uartTerminal_recv();
 8000f78:	f000 fd92 	bl	8001aa0 <uartTerminal_recv>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f000 ff30 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_DCMI_MspInit+0x170>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	f040 80a1 	bne.w	800113a <HAL_DCMI_MspInit+0x166>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6353      	str	r3, [r2, #52]	; 0x34
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 800100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b48      	ldr	r3, [pc, #288]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	4b44      	ldr	r3, [pc, #272]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a43      	ldr	r2, [pc, #268]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a3c      	ldr	r2, [pc, #240]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_DCMI_MspInit+0x174>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001068:	2350      	movs	r3, #80	; 0x50
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001070:	2302      	movs	r3, #2
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001078:	230d      	movs	r3, #13
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4832      	ldr	r0, [pc, #200]	; (800114c <HAL_DCMI_MspInit+0x178>)
 8001084:	f002 ff44 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001088:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800108c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001092:	2302      	movs	r3, #2
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800109a:	230d      	movs	r3, #13
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	482a      	ldr	r0, [pc, #168]	; (8001150 <HAL_DCMI_MspInit+0x17c>)
 80010a6:	f002 ff33 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010b4:	2302      	movs	r3, #2
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010bc:	230d      	movs	r3, #13
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4823      	ldr	r0, [pc, #140]	; (8001154 <HAL_DCMI_MspInit+0x180>)
 80010c8:	f002 ff22 	bl	8003f10 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <HAL_DCMI_MspInit+0x188>)
 80010d0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010d8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fa:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 8001110:	f001 f974 	bl	80023fc <HAL_DMA_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_DCMI_MspInit+0x14a>
    {
      Error_Handler();
 800111a:	f7ff fef7 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 8001122:	639a      	str	r2, [r3, #56]	; 0x38
 8001124:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_DCMI_MspInit+0x184>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	204e      	movs	r0, #78	; 0x4e
 8001130:	f000 fe85 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001134:	204e      	movs	r0, #78	; 0x4e
 8001136:	f000 fe9e 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3730      	adds	r7, #48	; 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	50050000 	.word	0x50050000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020800 	.word	0x40020800
 8001154:	40020400 	.word	0x40020400
 8001158:	200000f0 	.word	0x200000f0
 800115c:	40026428 	.word	0x40026428

08001160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_I2C_MspInit+0x84>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d12c      	bne.n	80011dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_I2C_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_I2C_MspInit+0x88>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_I2C_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800119e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a4:	2312      	movs	r3, #18
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011b0:	2304      	movs	r3, #4
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_I2C_MspInit+0x8c>)
 80011bc:	f002 fea8 	bl	8003f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_I2C_MspInit+0x88>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_I2C_MspInit+0x88>)
 80011ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_I2C_MspInit+0x88>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40005800 	.word	0x40005800
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020400 	.word	0x40020400

080011f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <HAL_SPI_MspInit+0xc0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d149      	bne.n	80012a6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 800121c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_SPI_MspInit+0xc4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001266:	23a0      	movs	r3, #160	; 0xa0
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001276:	2305      	movs	r3, #5
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <HAL_SPI_MspInit+0xc8>)
 8001282:	f002 fe45 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001286:	2310      	movs	r3, #16
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001296:	2305      	movs	r3, #5
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <HAL_SPI_MspInit+0xcc>)
 80012a2:	f002 fe35 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40013000 	.word	0x40013000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400

080012c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_TIM_Encoder_MspInit+0x84>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12b      	bne.n	800133a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_TIM_Encoder_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_TIM_Encoder_MspInit+0x88>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_TIM_Encoder_MspInit+0x88>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_TIM_Encoder_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_TIM_Encoder_MspInit+0x88>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_TIM_Encoder_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800131a:	2303      	movs	r3, #3
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800132a:	2302      	movs	r3, #2
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001336:	f002 fdeb 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40000c00 	.word	0x40000c00
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a61      	ldr	r2, [pc, #388]	; (80014f4 <HAL_UART_MspInit+0x1a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d15b      	bne.n	800142a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a5f      	ldr	r2, [pc, #380]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a58      	ldr	r2, [pc, #352]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013aa:	230c      	movs	r3, #12
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ba:	2307      	movs	r3, #7
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	484d      	ldr	r0, [pc, #308]	; (80014fc <HAL_UART_MspInit+0x1ac>)
 80013c6:	f002 fda3 	bl	8003f10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013ca:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013cc:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <HAL_UART_MspInit+0x1b4>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d8:	4b49      	ldr	r3, [pc, #292]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ec:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80013f8:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 80013fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800140c:	483c      	ldr	r0, [pc, #240]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 800140e:	f000 fff5 	bl	80023fc <HAL_DMA_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001418:	f7ff fd78 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a38      	ldr	r2, [pc, #224]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 8001420:	639a      	str	r2, [r3, #56]	; 0x38
 8001422:	4a37      	ldr	r2, [pc, #220]	; (8001500 <HAL_UART_MspInit+0x1b0>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001428:	e05f      	b.n	80014ea <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a36      	ldr	r2, [pc, #216]	; (8001508 <HAL_UART_MspInit+0x1b8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d15a      	bne.n	80014ea <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 800143e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_UART_MspInit+0x1a8>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800147e:	2307      	movs	r3, #7
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4820      	ldr	r0, [pc, #128]	; (800150c <HAL_UART_MspInit+0x1bc>)
 800148a:	f002 fd41 	bl	8003f10 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 8001490:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_UART_MspInit+0x1c4>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 8001496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014d0:	f000 ff94 	bl	80023fc <HAL_DMA_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80014da:	f7ff fd17 	bl	8000f0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_UART_MspInit+0x1c0>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	; 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000
 8001500:	200002cc 	.word	0x200002cc
 8001504:	40026088 	.word	0x40026088
 8001508:	40004800 	.word	0x40004800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	2000032c 	.word	0x2000032c
 8001514:	40026028 	.word	0x40026028

08001518 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_FSMC_MspInit+0x88>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d131      	bne.n	8001598 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_FSMC_MspInit+0x88>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_FSMC_MspInit+0x8c>)
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_FSMC_MspInit+0x8c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6393      	str	r3, [r2, #56]	; 0x38
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_FSMC_MspInit+0x8c>)
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001556:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800155a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001568:	230c      	movs	r3, #12
 800156a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <HAL_FSMC_MspInit+0x90>)
 8001572:	f002 fccd 	bl	8003f10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001576:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 800157a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001588:	230c      	movs	r3, #12
 800158a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_FSMC_MspInit+0x94>)
 8001592:	f002 fcbd 	bl	8003f10 <HAL_GPIO_Init>
 8001596:	e000      	b.n	800159a <HAL_FSMC_MspInit+0x82>
    return;
 8001598:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200003dc 	.word	0x200003dc
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40020c00 	.word	0x40020c00

080015b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015b8:	f7ff ffae 	bl	8001518 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 faf6 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Stream1_IRQHandler+0x10>)
 800161e:	f001 f885 	bl	800272c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000032c 	.word	0x2000032c

0800162c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA1_Stream5_IRQHandler+0x10>)
 8001632:	f001 f87b 	bl	800272c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002cc 	.word	0x200002cc

08001640 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DMA2_Stream1_IRQHandler+0x10>)
 8001646:	f001 f871 	bl	800272c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000f0 	.word	0x200000f0

08001654 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <OTG_FS_IRQHandler+0x10>)
 800165a:	f003 f879 	bl	8004750 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200007f8 	.word	0x200007f8

08001668 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DCMI_IRQHandler+0x10>)
 800166e:	f000 fd19 	bl	80020a4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000b0 	.word	0x200000b0

0800167c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800168e:	f7ff fc71 	bl	8000f74 <__io_getchar>
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
	}

return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc41 	bl	8000f58 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
	}
	return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
	return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
	return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f00a fc3a 	bl	800bfe8 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20020000 	.word	0x20020000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	200003e0 	.word	0x200003e0
 80017a8:	20000b10 	.word	0x20000b10

080017ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <ov7670_init+0x68>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <ov7670_init+0x6c>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 80017e8:	4a15      	ldr	r2, [pc, #84]	; (8001840 <ov7670_init+0x70>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <ov7670_init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2120      	movs	r1, #32
 80017f8:	4813      	ldr	r0, [pc, #76]	; (8001848 <ov7670_init+0x78>)
 80017fa:	f002 fd25 	bl	8004248 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80017fe:	2064      	movs	r0, #100	; 0x64
 8001800:	f000 fa1e 	bl	8001c40 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2120      	movs	r1, #32
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <ov7670_init+0x78>)
 800180a:	f002 fd1d 	bl	8004248 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800180e:	2064      	movs	r0, #100	; 0x64
 8001810:	f000 fa16 	bl	8001c40 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	2012      	movs	r0, #18
 8001818:	f000 f8c4 	bl	80019a4 <ov7670_write>
  HAL_Delay(30);
 800181c:	201e      	movs	r0, #30
 800181e:	f000 fa0f 	bl	8001c40 <HAL_Delay>



  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	200b      	movs	r0, #11
 800182a:	f000 f8db 	bl	80019e4 <ov7670_read>

  // printf("[OV7670] dev id = %02X\n", buffer[0]);     // esto es de iwitake, se manda el ID de la cámara


  return RET_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200003e4 	.word	0x200003e4
 800183c:	200003e8 	.word	0x200003e8
 8001840:	200003ec 	.word	0x200003ec
 8001844:	200003f0 	.word	0x200003f0
 8001848:	40020800 	.word	0x40020800

0800184c <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8001854:	f000 f85e 	bl	8001914 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	2012      	movs	r0, #18
 800185c:	f000 f8a2 	bl	80019a4 <ov7670_write>
  HAL_Delay(30);
 8001860:	201e      	movs	r0, #30
 8001862:	f000 f9ed 	bl	8001c40 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e012      	b.n	8001892 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <ov7670_config+0x5c>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <ov7670_config+0x5c>)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	440b      	add	r3, r1
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f000 f88f 	bl	80019a4 <ov7670_write>
    HAL_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 f9da 	bl	8001c40 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <ov7670_config+0x5c>)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800189a:	2bff      	cmp	r3, #255	; 0xff
 800189c:	d1e6      	bne.n	800186c <ov7670_config+0x20>
  }
  return RET_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	0800c92c 	.word	0x0800c92c

080018ac <ov7670_startCap>:




RET ov7670_startCap(uint32_t capMode)//, uint32_t destAddress)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if (capMode == OV7670_CAP_CONTINUOUS) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d111      	bne.n	80018de <ov7670_startCap+0x32>
	    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
	  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <ov7670_startCap+0x5c>)
 80018c2:	f002 fcc1 	bl	8004248 <HAL_GPIO_WritePin>
	  ov7670_stopCap();
 80018c6:	f000 f825 	bl	8001914 <ov7670_stopCap>
    //s_destAddressForContiuousMode = destAddress;
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, 0x60000000/*destAddress*/, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <ov7670_startCap+0x60>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80018d2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80018d6:	2100      	movs	r1, #0
 80018d8:	f000 fae8 	bl	8001eac <HAL_DCMI_Start_DMA>
 80018dc:	e00e      	b.n	80018fc <ov7670_startCap+0x50>

    //ILI9341_Fill(0xF81F);    //MAGENTA

  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10b      	bne.n	80018fc <ov7670_startCap+0x50>
    s_destAddressForContiuousMode = 0;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <ov7670_startCap+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT,0x60000000/*destAddress*/, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <ov7670_startCap+0x60>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80018f2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80018f6:	2102      	movs	r1, #2
 80018f8:	f000 fad8 	bl	8001eac <HAL_DCMI_Start_DMA>
       //ILI9341_SendData(destAddress);
     //  ILI9341_printImage(50, 50, 80, 130, destAddress, sizeof(destAddress));
       //printf("YA MANDE FRAME\n ");   // COMENTÉ EL PRINT PARA VER LOS DATOS EN HEX
  }

  return RET_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020c00 	.word	0x40020c00
 800190c:	200003e4 	.word	0x200003e4
 8001910:	200003f0 	.word	0x200003f0

08001914 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <ov7670_stopCap+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fb65 	bl	8001fec <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200003e4 	.word	0x200003e4

0800192c <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_DCMI_FrameEventCallback+0x54>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_DCMI_FrameEventCallback+0x1c>
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_DCMI_FrameEventCallback+0x54>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_DCMI_FrameEventCallback+0x58>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4610      	mov	r0, r2
 8001946:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_DCMI_FrameEventCallback+0x5c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3328      	adds	r3, #40	; 0x28
 800195a:	4619      	mov	r1, r3
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_DCMI_FrameEventCallback+0x5c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001964:	f000 fdf8 	bl	8002558 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_DCMI_FrameEventCallback+0x58>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_DCMI_FrameEventCallback+0x58>)
 8001970:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_DCMI_FrameEventCallback+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200003f4 	.word	0x200003f4
 8001984:	200003fc 	.word	0x200003fc
 8001988:	200003f0 	.word	0x200003f0
 800198c:	200003f8 	.word	0x200003f8

08001990 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af04      	add	r7, sp, #16
 80019aa:	4603      	mov	r3, r0
 80019ac:	460a      	mov	r2, r1
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <ov7670_write+0x3c>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	1dbb      	adds	r3, r7, #6
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2301      	movs	r3, #1
 80019ca:	2142      	movs	r1, #66	; 0x42
 80019cc:	f004 fcc8 	bl	8006360 <HAL_I2C_Mem_Write>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200003ec 	.word	0x200003ec

080019e4 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <ov7670_read+0x48>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	1dfa      	adds	r2, r7, #7
 80019f6:	2364      	movs	r3, #100	; 0x64
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	2142      	movs	r1, #66	; 0x42
 80019fe:	f004 f98b 	bl	8005d18 <HAL_I2C_Master_Transmit>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <ov7670_read+0x48>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	2142      	movs	r1, #66	; 0x42
 8001a14:	f004 fa7e 	bl	8005f14 <HAL_I2C_Master_Receive>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200003ec 	.word	0x200003ec

08001a30 <uartTerminal_init>:

/*** Internal Function Declarations ***/

/*** External Function Defines ***/
RET uartTerminal_init(UART_HandleTypeDef *huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  sp_huart = huart;
 8001a38:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <uartTerminal_init+0x2c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA(sp_huart, s_bufferRx, BUFFER_SIZE);
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <uartTerminal_init+0x2c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2210      	movs	r2, #16
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <uartTerminal_init+0x30>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f006 f9bb 	bl	8007dc2 <HAL_UART_Receive_DMA>
  s_bufferRxRp = 0;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <uartTerminal_init+0x34>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]

//  /* echo test */
//  while(1){
//    uartTerminal_send(uartTerminal_recv());
//  }
  return RET_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000400 	.word	0x20000400
 8001a60:	20000404 	.word	0x20000404
 8001a64:	20000414 	.word	0x20000414

08001a68 <uartTerminal_send>:

RET uartTerminal_send(uint8_t data)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  ret = HAL_UART_Transmit(sp_huart, &data, 1, 100);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <uartTerminal_send+0x30>)
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	1df9      	adds	r1, r7, #7
 8001a78:	2364      	movs	r3, #100	; 0x64
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f006 f90f 	bl	8007c9e <HAL_UART_Transmit>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
  if (ret == HAL_OK ) {
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <uartTerminal_send+0x26>
    return RET_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <uartTerminal_send+0x28>
  } else {
    return RET_ERR;
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <uartTerminal_send+0x34>)
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000400 	.word	0x20000400
 8001a9c:	80000001 	.word	0x80000001

08001aa0 <uartTerminal_recv>:

uint8_t uartTerminal_recv()
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  while (bufferRxWp == s_bufferRxRp);
 8001aaa:	bf00      	nop
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <uartTerminal_recv+0x5c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f1c3 0310 	rsb	r3, r3, #16
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <uartTerminal_recv+0x60>)
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d0f1      	beq.n	8001aac <uartTerminal_recv+0xc>
  data = s_bufferRx[s_bufferRxRp++];
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <uartTerminal_recv+0x60>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	b2d1      	uxtb	r1, r2
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <uartTerminal_recv+0x60>)
 8001ad4:	7011      	strb	r1, [r2, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <uartTerminal_recv+0x64>)
 8001ada:	5c9b      	ldrb	r3, [r3, r2]
 8001adc:	71fb      	strb	r3, [r7, #7]
  s_bufferRxRp &= (BUFFER_SIZE - 1);
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <uartTerminal_recv+0x60>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <uartTerminal_recv+0x60>)
 8001aec:	701a      	strb	r2, [r3, #0]
  return data;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	20000400 	.word	0x20000400
 8001b00:	20000414 	.word	0x20000414
 8001b04:	20000404 	.word	0x20000404

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b32:	f7ff fe3b 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f00a fa5d 	bl	800bff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7fe fe51 	bl	80007e0 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001b4c:	0800ca04 	.word	0x0800ca04
  ldr r2, =_sbss
 8001b50:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001b54:	20000b0c 	.word	0x20000b0c

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f94f 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff f9f8 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f967 	bl	8001e92 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f92f 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000008 	.word	0x20000008

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000418 	.word	0x20000418

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000418 	.word	0x20000418

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000000c 	.word	0x2000000c

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_DCMI_Start_DMA+0x20>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e086      	b.n	8001fda <HAL_DCMI_Start_DMA+0x12e>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eea:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0202 	bic.w	r2, r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <HAL_DCMI_Start_DMA+0x138>)
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <HAL_DCMI_Start_DMA+0x13c>)
 8001f1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	2200      	movs	r2, #0
 8001f22:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d20a      	bcs.n	8001f4e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3328      	adds	r3, #40	; 0x28
 8001f42:	4619      	mov	r1, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	f000 fb06 	bl	8002558 <HAL_DMA_Start_IT>
 8001f4c:	e038      	b.n	8001fc0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_DCMI_Start_DMA+0x138>)
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001f68:	e009      	b.n	8001f7e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	085a      	lsrs	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	005a      	lsls	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f86:	d2f0      	bcs.n	8001f6a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	1e9a      	subs	r2, r3, #2
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3328      	adds	r3, #40	; 0x28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	f000 fe20 	bl	8002c00 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	080021c9 	.word	0x080021c9
 8001fe8:	080022f3 	.word	0x080022f3

08001fec <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_DCMI_Stop+0xb0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_DCMI_Stop+0xb4>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_DCMI_Stop+0x2a>
 8002012:	2302      	movs	r3, #2
 8002014:	e03e      	b.n	8002094 <HAL_DCMI_Stop+0xa8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	60ba      	str	r2, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d108      	bne.n	8002052 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	f043 0220 	orr.w	r2, r3, #32
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	73fb      	strb	r3, [r7, #15]
      break;
 8002050:	e006      	b.n	8002060 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ea      	bne.n	8002036 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800206e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fac7 	bl	8002608 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000004 	.word	0x20000004
 80020a0:	92492493 	.word	0x92492493

080020a4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2204      	movs	r2, #4
 80020c4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	f043 0202 	orr.w	r2, r3, #2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2204      	movs	r2, #4
 80020d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	4a2f      	ldr	r2, [pc, #188]	; (800219c <HAL_DCMI_IRQHandler+0xf8>)
 80020e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fafe 	bl	80026e8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2202      	movs	r2, #2
 80020fc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	4a21      	ldr	r2, [pc, #132]	; (800219c <HAL_DCMI_IRQHandler+0xf8>)
 8002118:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fae2 	bl	80026e8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2210      	movs	r2, #16
 8002134:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f83c 	bl	80021b4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fc1e 	bl	8001990 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d019      	beq.n	8002192 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d107      	bne.n	800217c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 021e 	bic.w	r2, r2, #30
 800217a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fbcd 	bl	800192c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	080022f3 	.word	0x080022f3

080021a0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d043      	beq.n	800226a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ee:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d118      	bne.n	800222e <DCMI_DMAXferCplt+0x66>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	00da      	lsls	r2, r3, #3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	f001 fe37 	bl	8003e90 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
 800222c:	e044      	b.n	80022b8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d13c      	bne.n	80022b8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	00da      	lsls	r2, r3, #3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	2201      	movs	r2, #1
 8002258:	4619      	mov	r1, r3
 800225a:	f001 fe19 	bl	8003e90 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	1e5a      	subs	r2, r3, #1
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
 8002268:	e026      	b.n	80022b8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	e017      	b.n	80022b8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10f      	bne.n	80022b8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	440a      	add	r2, r1
 80022ae:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d112      	bne.n	80022ea <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d103      	bne.n	80022ea <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	2b02      	cmp	r3, #2
 8002308:	d003      	beq.n	8002312 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f7ff ff44 	bl	80021a0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e05f      	b.n	80023f2 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fe44 	bl	8000fd4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe fe41 	bl	8000fd4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002368:	f023 0308 	bic.w	r3, r3, #8
 800236c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002382:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800238e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800239a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d112      	bne.n	80023d2 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7f1b      	ldrb	r3, [r3, #28]
 80023b0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7f5b      	ldrb	r3, [r3, #29]
 80023b6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023b8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7f9b      	ldrb	r3, [r3, #30]
 80023be:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80023c0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7fdb      	ldrb	r3, [r3, #31]
 80023c8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80023ce:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80023d0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 021e 	orr.w	r2, r2, #30
 80023e0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff fc0e 	bl	8001c28 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e099      	b.n	800254c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	e00f      	b.n	800245a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243a:	f7ff fbf5 	bl	8001c28 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b05      	cmp	r3, #5
 8002446:	d908      	bls.n	800245a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e078      	b.n	800254c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e8      	bne.n	800243a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_DMA_Init+0x158>)
 8002474:	4013      	ands	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4313      	orrs	r3, r2
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 0307 	bic.w	r3, r3, #7
 80024da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d117      	bne.n	800251e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fb01 	bl	8002b08 <DMA_CheckFifoParam>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800251a:	2301      	movs	r3, #1
 800251c:	e016      	b.n	800254c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fab8 	bl	8002a9c <DMA_CalcBaseAndBitshift>
 800252c:	4603      	mov	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	223f      	movs	r2, #63	; 0x3f
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	f010803f 	.word	0xf010803f

08002558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_DMA_Start_IT+0x26>
 800257a:	2302      	movs	r3, #2
 800257c:	e040      	b.n	8002600 <HAL_DMA_Start_IT+0xa8>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d12f      	bne.n	80025f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa4a 	bl	8002a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	223f      	movs	r2, #63	; 0x3f
 80025b2:	409a      	lsls	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0216 	orr.w	r2, r2, #22
 80025c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e005      	b.n	80025fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002616:	f7ff fb07 	bl	8001c28 <HAL_GetTick>
 800261a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d008      	beq.n	800263a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e052      	b.n	80026e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0216 	bic.w	r2, r2, #22
 8002648:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002658:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_DMA_Abort+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0208 	bic.w	r2, r2, #8
 8002678:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268a:	e013      	b.n	80026b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268c:	f7ff facc 	bl	8001c28 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b05      	cmp	r3, #5
 8002698:	d90c      	bls.n	80026b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2203      	movs	r2, #3
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e015      	b.n	80026e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e4      	bne.n	800268c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	223f      	movs	r2, #63	; 0x3f
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d004      	beq.n	8002706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e00c      	b.n	8002720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2205      	movs	r2, #5
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002738:	4b8e      	ldr	r3, [pc, #568]	; (8002974 <HAL_DMA_IRQHandler+0x248>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a8e      	ldr	r2, [pc, #568]	; (8002978 <HAL_DMA_IRQHandler+0x24c>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0a9b      	lsrs	r3, r3, #10
 8002744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2208      	movs	r2, #8
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01a      	beq.n	8002798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2208      	movs	r2, #8
 8002786:	409a      	lsls	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	2201      	movs	r2, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2201      	movs	r2, #1
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0202 	orr.w	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	2204      	movs	r2, #4
 80027d4:	409a      	lsls	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	2204      	movs	r2, #4
 80027f2:	409a      	lsls	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0204 	orr.w	r2, r3, #4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	2210      	movs	r2, #16
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d043      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03c      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2210      	movs	r2, #16
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d018      	beq.n	800286e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d024      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
 800285a:	e01f      	b.n	800289c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	e016      	b.n	800289c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0208 	bic.w	r2, r2, #8
 800288a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2220      	movs	r2, #32
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 808f 	beq.w	80029cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8087 	beq.w	80029cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2220      	movs	r2, #32
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d136      	bne.n	8002944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0216 	bic.w	r2, r2, #22
 80028e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_DMA_IRQHandler+0x1da>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0208 	bic.w	r2, r2, #8
 8002914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	223f      	movs	r2, #63	; 0x3f
 800291c:	409a      	lsls	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002936:	2b00      	cmp	r3, #0
 8002938:	d07e      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
        }
        return;
 8002942:	e079      	b.n	8002a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01d      	beq.n	800298e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10d      	bne.n	800297c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	2b00      	cmp	r3, #0
 8002966:	d031      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
 8002970:	e02c      	b.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
 8002972:	bf00      	nop
 8002974:	20000004 	.word	0x20000004
 8002978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d023      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	e01e      	b.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10f      	bne.n	80029bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0210 	bic.w	r2, r2, #16
 80029aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d032      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2205      	movs	r2, #5
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3301      	adds	r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f2      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x2cc>
 8002a12:	e000      	b.n	8002a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
 8002a36:	e000      	b.n	8002a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a38:	bf00      	nop
    }
  }
}
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d108      	bne.n	8002a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a7e:	e007      	b.n	8002a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b10      	subs	r3, #16
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <DMA_CalcBaseAndBitshift+0x64>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d909      	bls.n	8002ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58
 8002adc:	e007      	b.n	8002aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	aaaaaaab 	.word	0xaaaaaaab
 8002b04:	0800c988 	.word	0x0800c988

08002b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d856      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xce>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <DMA_CheckFifoParam+0x28>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b53 	.word	0x08002b53
 8002b38:	08002b41 	.word	0x08002b41
 8002b3c:	08002bd7 	.word	0x08002bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d046      	beq.n	8002bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e043      	b.n	8002bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b5a:	d140      	bne.n	8002bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e03d      	b.n	8002bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6a:	d121      	bne.n	8002bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d837      	bhi.n	8002be2 <DMA_CheckFifoParam+0xda>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <DMA_CheckFifoParam+0x70>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b8f 	.word	0x08002b8f
 8002b80:	08002b89 	.word	0x08002b89
 8002b84:	08002ba1 	.word	0x08002ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e030      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d025      	beq.n	8002be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e022      	b.n	8002be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bae:	e01c      	b.n	8002bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d903      	bls.n	8002bbe <DMA_CheckFifoParam+0xb6>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bbc:	e018      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc2:	e015      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e00b      	b.n	8002bee <DMA_CheckFifoParam+0xe6>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e00a      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e008      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
 8002be0:	e006      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e004      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
    }
  } 
  
  return status; 
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b80      	cmp	r3, #128	; 0x80
 8002c18:	d106      	bne.n	8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f001 b911 	b.w	8003e4a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2240      	movs	r2, #64	; 0x40
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f001 b8ff 	b.w	8003e4a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002c56:	2302      	movs	r3, #2
 8002c58:	f001 b8f7 	b.w	8003e4a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f041 80e5 	bne.w	8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c8e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f001 f910 	bl	8003ec4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b8d      	ldr	r3, [pc, #564]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d960      	bls.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a8b      	ldr	r2, [pc, #556]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d057      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a8a      	ldr	r2, [pc, #552]	; (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d050      	beq.n	8002d66 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a88      	ldr	r2, [pc, #544]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d049      	beq.n	8002d62 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a87      	ldr	r2, [pc, #540]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d042      	beq.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a85      	ldr	r2, [pc, #532]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d03a      	beq.n	8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a84      	ldr	r2, [pc, #528]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d032      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a82      	ldr	r2, [pc, #520]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02a      	beq.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a81      	ldr	r2, [pc, #516]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a7f      	ldr	r2, [pc, #508]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d012      	beq.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7c      	ldr	r2, [pc, #496]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00a      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7b      	ldr	r2, [pc, #492]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002d28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d2c:	e01e      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d32:	e01b      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d38:	e018      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d3e:	e015      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d44:	e012      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d4a:	e00f      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d50:	e00c      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d56:	e009      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d5c:	e006      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e004      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d62:	2320      	movs	r3, #32
 8002d64:	e002      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d66:	2320      	movs	r3, #32
 8002d68:	e000      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	4a69      	ldr	r2, [pc, #420]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002d6e:	60d3      	str	r3, [r2, #12]
 8002d70:	e14f      	b.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d960      	bls.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d057      	beq.n	8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a56      	ldr	r2, [pc, #344]	; (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d050      	beq.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a55      	ldr	r2, [pc, #340]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d049      	beq.n	8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d042      	beq.n	8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d03a      	beq.n	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a50      	ldr	r2, [pc, #320]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d032      	beq.n	8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d02a      	beq.n	8002e1a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a4d      	ldr	r2, [pc, #308]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d022      	beq.n	8002e14 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a4c      	ldr	r2, [pc, #304]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01a      	beq.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a4a      	ldr	r2, [pc, #296]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d012      	beq.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a49      	ldr	r2, [pc, #292]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00a      	beq.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a47      	ldr	r2, [pc, #284]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d102      	bne.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002df6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dfa:	e01e      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e00:	e01b      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e06:	e018      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e0c:	e015      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e12:	e012      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e18:	e00f      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e1e:	e00c      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e24:	e009      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e2a:	e006      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e004      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e30:	2320      	movs	r3, #32
 8002e32:	e002      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e34:	2320      	movs	r3, #32
 8002e36:	e000      	b.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e38:	2320      	movs	r3, #32
 8002e3a:	4a36      	ldr	r2, [pc, #216]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e0e8      	b.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f240 8082 	bls.w	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d078      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d071      	beq.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d06a      	beq.n	8002f42 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d063      	beq.n	8002f3e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d05b      	beq.n	8002f38 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d053      	beq.n	8002f32 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04b      	beq.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d043      	beq.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d012      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00a      	beq.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d102      	bne.n	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002ec6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eca:	e03f      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ecc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ed0:	e03c      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ed2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ed6:	e039      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002edc:	e036      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ede:	bf00      	nop
 8002ee0:	40026458 	.word	0x40026458
 8002ee4:	40026010 	.word	0x40026010
 8002ee8:	40026410 	.word	0x40026410
 8002eec:	40026070 	.word	0x40026070
 8002ef0:	40026470 	.word	0x40026470
 8002ef4:	40026028 	.word	0x40026028
 8002ef8:	40026428 	.word	0x40026428
 8002efc:	40026088 	.word	0x40026088
 8002f00:	40026488 	.word	0x40026488
 8002f04:	40026040 	.word	0x40026040
 8002f08:	40026440 	.word	0x40026440
 8002f0c:	400260a0 	.word	0x400260a0
 8002f10:	400264a0 	.word	0x400264a0
 8002f14:	40026400 	.word	0x40026400
 8002f18:	400260b8 	.word	0x400260b8
 8002f1c:	40026058 	.word	0x40026058
 8002f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f24:	e012      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f2a:	e00f      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f30:	e00c      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f36:	e009      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f3c:	e006      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e004      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f42:	2320      	movs	r3, #32
 8002f44:	e002      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f46:	2320      	movs	r3, #32
 8002f48:	e000      	b.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	4a8c      	ldr	r2, [pc, #560]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002f4e:	60d3      	str	r3, [r2, #12]
 8002f50:	e05f      	b.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a8b      	ldr	r2, [pc, #556]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d057      	beq.n	800300c <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a89      	ldr	r2, [pc, #548]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d050      	beq.n	8003008 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a88      	ldr	r2, [pc, #544]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d049      	beq.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a86      	ldr	r2, [pc, #536]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d042      	beq.n	8003000 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a85      	ldr	r2, [pc, #532]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03a      	beq.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a83      	ldr	r2, [pc, #524]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d032      	beq.n	8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a82      	ldr	r2, [pc, #520]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d02a      	beq.n	8002fee <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a80      	ldr	r2, [pc, #512]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d022      	beq.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7f      	ldr	r2, [pc, #508]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d01a      	beq.n	8002fe2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a7d      	ldr	r2, [pc, #500]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d012      	beq.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7c      	ldr	r2, [pc, #496]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a7a      	ldr	r2, [pc, #488]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d102      	bne.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002fca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fce:	e01e      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fd4:	e01b      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fda:	e018      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fe0:	e015      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fe2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fe6:	e012      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fec:	e00f      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ff2:	e00c      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ff8:	e009      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ffe:	e006      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003000:	2320      	movs	r3, #32
 8003002:	e004      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003004:	2320      	movs	r3, #32
 8003006:	e002      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003008:	2320      	movs	r3, #32
 800300a:	e000      	b.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800300c:	2320      	movs	r3, #32
 800300e:	4a5c      	ldr	r2, [pc, #368]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003010:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4b66      	ldr	r3, [pc, #408]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800301a:	429a      	cmp	r2, r3
 800301c:	d960      	bls.n	80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d057      	beq.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d050      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a55      	ldr	r2, [pc, #340]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d049      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a53      	ldr	r2, [pc, #332]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d042      	beq.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d03a      	beq.n	80030c6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a50      	ldr	r2, [pc, #320]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d032      	beq.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a4f      	ldr	r2, [pc, #316]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02a      	beq.n	80030ba <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4d      	ldr	r2, [pc, #308]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d022      	beq.n	80030b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d01a      	beq.n	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d012      	beq.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a49      	ldr	r2, [pc, #292]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00a      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d102      	bne.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8003096:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800309a:	e01e      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800309c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030a0:	e01b      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030a6:	e018      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030ac:	e015      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030b2:	e012      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b8:	e00f      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030be:	e00c      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c4:	e009      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ca:	e006      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030cc:	2310      	movs	r3, #16
 80030ce:	e004      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030d0:	2310      	movs	r3, #16
 80030d2:	e002      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030d4:	2310      	movs	r3, #16
 80030d6:	e000      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80030d8:	2310      	movs	r3, #16
 80030da:	4a37      	ldr	r2, [pc, #220]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80030dc:	60d3      	str	r3, [r2, #12]
 80030de:	e14f      	b.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f240 8082 	bls.w	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a24      	ldr	r2, [pc, #144]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d078      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d071      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d06a      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d063      	beq.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d05b      	beq.n	80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d053      	beq.n	80031d2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d04b      	beq.n	80031cc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d043      	beq.n	80031c6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d03b      	beq.n	80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d012      	beq.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a15      	ldr	r2, [pc, #84]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00a      	beq.n	8003172 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d102      	bne.n	800316c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8003166:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800316a:	e03f      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800316c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003170:	e03c      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003172:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003176:	e039      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003178:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800317c:	e036      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800317e:	bf00      	nop
 8003180:	40026000 	.word	0x40026000
 8003184:	40026010 	.word	0x40026010
 8003188:	40026410 	.word	0x40026410
 800318c:	40026070 	.word	0x40026070
 8003190:	40026470 	.word	0x40026470
 8003194:	40026028 	.word	0x40026028
 8003198:	40026428 	.word	0x40026428
 800319c:	40026088 	.word	0x40026088
 80031a0:	40026488 	.word	0x40026488
 80031a4:	40026040 	.word	0x40026040
 80031a8:	40026440 	.word	0x40026440
 80031ac:	400260a0 	.word	0x400260a0
 80031b0:	400264a0 	.word	0x400264a0
 80031b4:	40026458 	.word	0x40026458
 80031b8:	40026400 	.word	0x40026400
 80031bc:	400260b8 	.word	0x400260b8
 80031c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031c4:	e012      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ca:	e00f      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d0:	e00c      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d6:	e009      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031dc:	e006      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031de:	2310      	movs	r3, #16
 80031e0:	e004      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031e2:	2310      	movs	r3, #16
 80031e4:	e002      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031e6:	2310      	movs	r3, #16
 80031e8:	e000      	b.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031ea:	2310      	movs	r3, #16
 80031ec:	4a8c      	ldr	r2, [pc, #560]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80031ee:	6093      	str	r3, [r2, #8]
 80031f0:	e0c6      	b.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b8a      	ldr	r3, [pc, #552]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d960      	bls.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a89      	ldr	r2, [pc, #548]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d057      	beq.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a87      	ldr	r2, [pc, #540]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d050      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a86      	ldr	r2, [pc, #536]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d049      	beq.n	80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a84      	ldr	r2, [pc, #528]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d042      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a83      	ldr	r2, [pc, #524]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d03a      	beq.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a81      	ldr	r2, [pc, #516]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d032      	beq.n	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02a      	beq.n	800329a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7e      	ldr	r2, [pc, #504]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d022      	beq.n	8003294 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7d      	ldr	r2, [pc, #500]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d01a      	beq.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a7b      	ldr	r2, [pc, #492]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d012      	beq.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7a      	ldr	r2, [pc, #488]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00a      	beq.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a78      	ldr	r2, [pc, #480]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d102      	bne.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8003276:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800327a:	e01e      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800327c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003280:	e01b      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003282:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003286:	e018      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003288:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800328c:	e015      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800328e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003292:	e012      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	e00f      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800329a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329e:	e00c      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a4:	e009      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032aa:	e006      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032ac:	2310      	movs	r3, #16
 80032ae:	e004      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032b0:	2310      	movs	r3, #16
 80032b2:	e002      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032b4:	2310      	movs	r3, #16
 80032b6:	e000      	b.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032b8:	2310      	movs	r3, #16
 80032ba:	4a67      	ldr	r2, [pc, #412]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80032bc:	60d3      	str	r3, [r2, #12]
 80032be:	e05f      	b.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a58      	ldr	r2, [pc, #352]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d057      	beq.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d050      	beq.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a55      	ldr	r2, [pc, #340]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d049      	beq.n	8003372 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a54      	ldr	r2, [pc, #336]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d042      	beq.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d03a      	beq.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d032      	beq.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4f      	ldr	r2, [pc, #316]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02a      	beq.n	800335c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01a      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d012      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a49      	ldr	r2, [pc, #292]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00a      	beq.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a48      	ldr	r2, [pc, #288]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d102      	bne.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003338:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800333c:	e01e      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800333e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003342:	e01b      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003348:	e018      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800334a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800334e:	e015      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003350:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003354:	e012      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335a:	e00f      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003360:	e00c      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003366:	e009      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800336c:	e006      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800336e:	2310      	movs	r3, #16
 8003370:	e004      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003372:	2310      	movs	r3, #16
 8003374:	e002      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003376:	2310      	movs	r3, #16
 8003378:	e000      	b.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800337a:	2310      	movs	r3, #16
 800337c:	4a36      	ldr	r2, [pc, #216]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800337e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003388:	429a      	cmp	r2, r3
 800338a:	f240 8082 	bls.w	8003492 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d078      	beq.n	800348a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a23      	ldr	r2, [pc, #140]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d071      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d06a      	beq.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a20      	ldr	r2, [pc, #128]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d063      	beq.n	800347e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d05b      	beq.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d053      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04b      	beq.n	800346c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d043      	beq.n	8003466 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03b      	beq.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a17      	ldr	r2, [pc, #92]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d012      	beq.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a16      	ldr	r2, [pc, #88]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00a      	beq.n	8003412 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a14      	ldr	r2, [pc, #80]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d102      	bne.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003406:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800340a:	e03f      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800340c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003410:	e03c      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003412:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003416:	e039      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003418:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800341c:	e036      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800341e:	bf00      	nop
 8003420:	40026400 	.word	0x40026400
 8003424:	40026058 	.word	0x40026058
 8003428:	40026010 	.word	0x40026010
 800342c:	40026410 	.word	0x40026410
 8003430:	40026070 	.word	0x40026070
 8003434:	40026470 	.word	0x40026470
 8003438:	40026028 	.word	0x40026028
 800343c:	40026428 	.word	0x40026428
 8003440:	40026088 	.word	0x40026088
 8003444:	40026488 	.word	0x40026488
 8003448:	40026040 	.word	0x40026040
 800344c:	40026440 	.word	0x40026440
 8003450:	400260a0 	.word	0x400260a0
 8003454:	400264a0 	.word	0x400264a0
 8003458:	40026000 	.word	0x40026000
 800345c:	40026458 	.word	0x40026458
 8003460:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003464:	e012      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800346a:	e00f      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800346c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003470:	e00c      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003476:	e009      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800347c:	e006      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800347e:	2308      	movs	r3, #8
 8003480:	e004      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003482:	2308      	movs	r3, #8
 8003484:	e002      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003486:	2308      	movs	r3, #8
 8003488:	e000      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800348a:	2308      	movs	r3, #8
 800348c:	4a8c      	ldr	r2, [pc, #560]	; (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800348e:	60d3      	str	r3, [r2, #12]
 8003490:	e14e      	b.n	8003730 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	4b8a      	ldr	r3, [pc, #552]	; (80036c4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800349a:	429a      	cmp	r2, r3
 800349c:	d960      	bls.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a89      	ldr	r2, [pc, #548]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d057      	beq.n	8003558 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a87      	ldr	r2, [pc, #540]	; (80036cc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d050      	beq.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a86      	ldr	r2, [pc, #536]	; (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d049      	beq.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a84      	ldr	r2, [pc, #528]	; (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d042      	beq.n	800354c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a83      	ldr	r2, [pc, #524]	; (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d03a      	beq.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a81      	ldr	r2, [pc, #516]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d032      	beq.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d02a      	beq.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d01a      	beq.n	800352e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a7b      	ldr	r2, [pc, #492]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d012      	beq.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7a      	ldr	r2, [pc, #488]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00a      	beq.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a78      	ldr	r2, [pc, #480]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d102      	bne.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003516:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800351a:	e01e      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800351c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003520:	e01b      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003522:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003526:	e018      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003528:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800352c:	e015      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800352e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003532:	e012      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003538:	e00f      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800353a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353e:	e00c      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003544:	e009      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800354a:	e006      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800354c:	2308      	movs	r3, #8
 800354e:	e004      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003550:	2308      	movs	r3, #8
 8003552:	e002      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003554:	2308      	movs	r3, #8
 8003556:	e000      	b.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003558:	2308      	movs	r3, #8
 800355a:	4a59      	ldr	r2, [pc, #356]	; (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800355c:	6093      	str	r3, [r2, #8]
 800355e:	e0e7      	b.n	8003730 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4b64      	ldr	r3, [pc, #400]	; (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003568:	429a      	cmp	r2, r3
 800356a:	d960      	bls.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a55      	ldr	r2, [pc, #340]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d057      	beq.n	8003626 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a54      	ldr	r2, [pc, #336]	; (80036cc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d050      	beq.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d049      	beq.n	800361e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a51      	ldr	r2, [pc, #324]	; (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d042      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d03a      	beq.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d032      	beq.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a4c      	ldr	r2, [pc, #304]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d02a      	beq.n	8003608 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d022      	beq.n	8003602 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a49      	ldr	r2, [pc, #292]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01a      	beq.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a48      	ldr	r2, [pc, #288]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d012      	beq.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a46      	ldr	r2, [pc, #280]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00a      	beq.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a45      	ldr	r2, [pc, #276]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d102      	bne.n	80035ea <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80035e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035e8:	e01e      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ee:	e01b      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035f4:	e018      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035fa:	e015      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80035fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003600:	e012      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003606:	e00f      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360c:	e00c      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800360e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003612:	e009      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003618:	e006      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800361a:	2308      	movs	r3, #8
 800361c:	e004      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800361e:	2308      	movs	r3, #8
 8003620:	e002      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003622:	2308      	movs	r3, #8
 8003624:	e000      	b.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003626:	2308      	movs	r3, #8
 8003628:	4a34      	ldr	r2, [pc, #208]	; (80036fc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800362a:	60d3      	str	r3, [r2, #12]
 800362c:	e080      	b.n	8003730 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d078      	beq.n	800372a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a23      	ldr	r2, [pc, #140]	; (80036cc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d071      	beq.n	8003726 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d06a      	beq.n	8003722 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d063      	beq.n	800371e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d05b      	beq.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d053      	beq.n	8003712 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04b      	beq.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d043      	beq.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d03b      	beq.n	8003700 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d012      	beq.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00a      	beq.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d102      	bne.n	80036ac <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80036a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036aa:	e03f      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b0:	e03c      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036b6:	e039      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036bc:	e036      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80036be:	bf00      	nop
 80036c0:	40026400 	.word	0x40026400
 80036c4:	400260b8 	.word	0x400260b8
 80036c8:	40026010 	.word	0x40026010
 80036cc:	40026410 	.word	0x40026410
 80036d0:	40026070 	.word	0x40026070
 80036d4:	40026470 	.word	0x40026470
 80036d8:	40026028 	.word	0x40026028
 80036dc:	40026428 	.word	0x40026428
 80036e0:	40026088 	.word	0x40026088
 80036e4:	40026488 	.word	0x40026488
 80036e8:	40026040 	.word	0x40026040
 80036ec:	40026440 	.word	0x40026440
 80036f0:	400260a0 	.word	0x400260a0
 80036f4:	400264a0 	.word	0x400264a0
 80036f8:	40026058 	.word	0x40026058
 80036fc:	40026000 	.word	0x40026000
 8003700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003704:	e012      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800370a:	e00f      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800370c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003710:	e00c      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003716:	e009      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371c:	e006      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800371e:	2308      	movs	r3, #8
 8003720:	e004      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003722:	2308      	movs	r3, #8
 8003724:	e002      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003726:	2308      	movs	r3, #8
 8003728:	e000      	b.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800372a:	2308      	movs	r3, #8
 800372c:	4a8a      	ldr	r2, [pc, #552]	; (8003958 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800372e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b89      	ldr	r3, [pc, #548]	; (800395c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d960      	bls.n	80037fe <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a87      	ldr	r2, [pc, #540]	; (8003960 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d057      	beq.n	80037f6 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a86      	ldr	r2, [pc, #536]	; (8003964 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d050      	beq.n	80037f2 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a84      	ldr	r2, [pc, #528]	; (8003968 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d049      	beq.n	80037ee <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a83      	ldr	r2, [pc, #524]	; (800396c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d042      	beq.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a81      	ldr	r2, [pc, #516]	; (8003970 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d03a      	beq.n	80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a80      	ldr	r2, [pc, #512]	; (8003974 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d032      	beq.n	80037de <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7e      	ldr	r2, [pc, #504]	; (8003978 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d02a      	beq.n	80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7d      	ldr	r2, [pc, #500]	; (800397c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7b      	ldr	r2, [pc, #492]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01a      	beq.n	80037cc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7a      	ldr	r2, [pc, #488]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d012      	beq.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a78      	ldr	r2, [pc, #480]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00a      	beq.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a77      	ldr	r2, [pc, #476]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d102      	bne.n	80037ba <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80037b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037b8:	e01e      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037be:	e01b      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037c4:	e018      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037ca:	e015      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037d0:	e012      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037d6:	e00f      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037dc:	e00c      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e2:	e009      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e8:	e006      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e004      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037ee:	2304      	movs	r3, #4
 80037f0:	e002      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037f2:	2304      	movs	r3, #4
 80037f4:	e000      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80037f6:	2304      	movs	r3, #4
 80037f8:	4a65      	ldr	r2, [pc, #404]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e150      	b.n	8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003806:	429a      	cmp	r2, r3
 8003808:	d960      	bls.n	80038cc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a54      	ldr	r2, [pc, #336]	; (8003960 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d057      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d050      	beq.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a51      	ldr	r2, [pc, #324]	; (8003968 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d049      	beq.n	80038bc <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a4f      	ldr	r2, [pc, #316]	; (800396c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d042      	beq.n	80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a4e      	ldr	r2, [pc, #312]	; (8003970 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d03a      	beq.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a4c      	ldr	r2, [pc, #304]	; (8003974 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d032      	beq.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a4b      	ldr	r2, [pc, #300]	; (8003978 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d02a      	beq.n	80038a6 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a49      	ldr	r2, [pc, #292]	; (800397c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a48      	ldr	r2, [pc, #288]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01a      	beq.n	800389a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a46      	ldr	r2, [pc, #280]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d012      	beq.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a45      	ldr	r2, [pc, #276]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00a      	beq.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a43      	ldr	r2, [pc, #268]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d102      	bne.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003882:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003886:	e01e      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800388c:	e01b      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800388e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003892:	e018      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003894:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003898:	e015      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800389a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800389e:	e012      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a4:	e00f      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038aa:	e00c      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b0:	e009      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b6:	e006      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038b8:	2304      	movs	r3, #4
 80038ba:	e004      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038bc:	2304      	movs	r3, #4
 80038be:	e002      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038c0:	2304      	movs	r3, #4
 80038c2:	e000      	b.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038c4:	2304      	movs	r3, #4
 80038c6:	4a32      	ldr	r2, [pc, #200]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80038c8:	6093      	str	r3, [r2, #8]
 80038ca:	e0e9      	b.n	8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f240 8083 	bls.w	80039e0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a20      	ldr	r2, [pc, #128]	; (8003960 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d079      	beq.n	80039d8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d072      	beq.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d06b      	beq.n	80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1b      	ldr	r2, [pc, #108]	; (800396c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d064      	beq.n	80039cc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d05c      	beq.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d054      	beq.n	80039c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a17      	ldr	r2, [pc, #92]	; (8003978 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d04c      	beq.n	80039ba <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d044      	beq.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03c      	beq.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a12      	ldr	r2, [pc, #72]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d034      	beq.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0f      	ldr	r2, [pc, #60]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d124      	bne.n	800399c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003952:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003956:	e040      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003958:	40026000 	.word	0x40026000
 800395c:	40026458 	.word	0x40026458
 8003960:	40026010 	.word	0x40026010
 8003964:	40026410 	.word	0x40026410
 8003968:	40026070 	.word	0x40026070
 800396c:	40026470 	.word	0x40026470
 8003970:	40026028 	.word	0x40026028
 8003974:	40026428 	.word	0x40026428
 8003978:	40026088 	.word	0x40026088
 800397c:	40026488 	.word	0x40026488
 8003980:	40026040 	.word	0x40026040
 8003984:	40026440 	.word	0x40026440
 8003988:	400260a0 	.word	0x400260a0
 800398c:	400264a0 	.word	0x400264a0
 8003990:	40026400 	.word	0x40026400
 8003994:	400260b8 	.word	0x400260b8
 8003998:	40026058 	.word	0x40026058
 800399c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a0:	e01b      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039a6:	e018      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039ac:	e015      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039b2:	e012      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039b8:	e00f      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039be:	e00c      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c4:	e009      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ca:	e006      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039cc:	2304      	movs	r3, #4
 80039ce:	e004      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039d0:	2304      	movs	r3, #4
 80039d2:	e002      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039d4:	2304      	movs	r3, #4
 80039d6:	e000      	b.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039d8:	2304      	movs	r3, #4
 80039da:	4a8b      	ldr	r2, [pc, #556]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80039dc:	60d3      	str	r3, [r2, #12]
 80039de:	e05f      	b.n	8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a89      	ldr	r2, [pc, #548]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d057      	beq.n	8003a9a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a88      	ldr	r2, [pc, #544]	; (8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d050      	beq.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a86      	ldr	r2, [pc, #536]	; (8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d049      	beq.n	8003a92 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a85      	ldr	r2, [pc, #532]	; (8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d042      	beq.n	8003a8e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a83      	ldr	r2, [pc, #524]	; (8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03a      	beq.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a82      	ldr	r2, [pc, #520]	; (8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d032      	beq.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a80      	ldr	r2, [pc, #512]	; (8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02a      	beq.n	8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7f      	ldr	r2, [pc, #508]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a7d      	ldr	r2, [pc, #500]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01a      	beq.n	8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7c      	ldr	r2, [pc, #496]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d012      	beq.n	8003a6a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a7a      	ldr	r2, [pc, #488]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00a      	beq.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a79      	ldr	r2, [pc, #484]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003a58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a5c:	e01e      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a62:	e01b      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a68:	e018      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a6e:	e015      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a74:	e012      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a7a:	e00f      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a80:	e00c      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a86:	e009      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8c:	e006      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e004      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a92:	2304      	movs	r3, #4
 8003a94:	e002      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a96:	2304      	movs	r3, #4
 8003a98:	e000      	b.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	4a5a      	ldr	r2, [pc, #360]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003a9e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b65      	ldr	r3, [pc, #404]	; (8003c3c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d95c      	bls.n	8003b66 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a56      	ldr	r2, [pc, #344]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d053      	beq.n	8003b5e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a55      	ldr	r2, [pc, #340]	; (8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04c      	beq.n	8003b5a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a53      	ldr	r2, [pc, #332]	; (8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a52      	ldr	r2, [pc, #328]	; (8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d03e      	beq.n	8003b52 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a50      	ldr	r2, [pc, #320]	; (8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d037      	beq.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4f      	ldr	r2, [pc, #316]	; (8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d030      	beq.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a4d      	ldr	r2, [pc, #308]	; (8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d029      	beq.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a4c      	ldr	r2, [pc, #304]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a4a      	ldr	r2, [pc, #296]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01a      	beq.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a49      	ldr	r2, [pc, #292]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d012      	beq.n	8003b36 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a47      	ldr	r2, [pc, #284]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00a      	beq.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a46      	ldr	r2, [pc, #280]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d102      	bne.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b28:	e01a      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b2e:	e017      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b34:	e014      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3a:	e011      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b40:	e00e      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b42:	2340      	movs	r3, #64	; 0x40
 8003b44:	e00c      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	e00a      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b4a:	2340      	movs	r3, #64	; 0x40
 8003b4c:	e008      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b4e:	2340      	movs	r3, #64	; 0x40
 8003b50:	e006      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e004      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e002      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003b62:	60d3      	str	r3, [r2, #12]
 8003b64:	e141      	b.n	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d97c      	bls.n	8003c6c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a25      	ldr	r2, [pc, #148]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d073      	beq.n	8003c64 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d06c      	beq.n	8003c60 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d065      	beq.n	8003c5c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d05e      	beq.n	8003c58 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d057      	beq.n	8003c54 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d050      	beq.n	8003c50 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d049      	beq.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d042      	beq.n	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d01a      	beq.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d012      	beq.n	8003bfc <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00a      	beq.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d102      	bne.n	8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bee:	e03a      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bf4:	e037      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bfa:	e034      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c00:	e031      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c06:	e02e      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c08:	40026000 	.word	0x40026000
 8003c0c:	40026010 	.word	0x40026010
 8003c10:	40026410 	.word	0x40026410
 8003c14:	40026070 	.word	0x40026070
 8003c18:	40026470 	.word	0x40026470
 8003c1c:	40026028 	.word	0x40026028
 8003c20:	40026428 	.word	0x40026428
 8003c24:	40026088 	.word	0x40026088
 8003c28:	40026488 	.word	0x40026488
 8003c2c:	40026040 	.word	0x40026040
 8003c30:	40026440 	.word	0x40026440
 8003c34:	400260a0 	.word	0x400260a0
 8003c38:	400264a0 	.word	0x400264a0
 8003c3c:	40026458 	.word	0x40026458
 8003c40:	40026400 	.word	0x40026400
 8003c44:	400260b8 	.word	0x400260b8
 8003c48:	2340      	movs	r3, #64	; 0x40
 8003c4a:	e00c      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c4c:	2340      	movs	r3, #64	; 0x40
 8003c4e:	e00a      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c50:	2340      	movs	r3, #64	; 0x40
 8003c52:	e008      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c54:	2340      	movs	r3, #64	; 0x40
 8003c56:	e006      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e004      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e002      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c64:	2301      	movs	r3, #1
 8003c66:	4a7b      	ldr	r2, [pc, #492]	; (8003e54 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003c68:	6093      	str	r3, [r2, #8]
 8003c6a:	e0be      	b.n	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d95c      	bls.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d053      	beq.n	8003d2a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a76      	ldr	r2, [pc, #472]	; (8003e60 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d04c      	beq.n	8003d26 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a74      	ldr	r2, [pc, #464]	; (8003e64 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d045      	beq.n	8003d22 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a73      	ldr	r2, [pc, #460]	; (8003e68 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d03e      	beq.n	8003d1e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a71      	ldr	r2, [pc, #452]	; (8003e6c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d037      	beq.n	8003d1a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a70      	ldr	r2, [pc, #448]	; (8003e70 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d030      	beq.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6e      	ldr	r2, [pc, #440]	; (8003e74 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d029      	beq.n	8003d12 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6d      	ldr	r2, [pc, #436]	; (8003e78 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01a      	beq.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d012      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a68      	ldr	r2, [pc, #416]	; (8003e84 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00a      	beq.n	8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a67      	ldr	r2, [pc, #412]	; (8003e88 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d102      	bne.n	8003cf6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cf4:	e01a      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cfa:	e017      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d00:	e014      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d06:	e011      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d0c:	e00e      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d0e:	2340      	movs	r3, #64	; 0x40
 8003d10:	e00c      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	e00a      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d16:	2340      	movs	r3, #64	; 0x40
 8003d18:	e008      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	e006      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e004      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e002      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4a57      	ldr	r2, [pc, #348]	; (8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003d2e:	60d3      	str	r3, [r2, #12]
 8003d30:	e05b      	b.n	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a49      	ldr	r2, [pc, #292]	; (8003e5c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d053      	beq.n	8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a47      	ldr	r2, [pc, #284]	; (8003e60 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04c      	beq.n	8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a46      	ldr	r2, [pc, #280]	; (8003e64 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a44      	ldr	r2, [pc, #272]	; (8003e68 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d03e      	beq.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d037      	beq.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a41      	ldr	r2, [pc, #260]	; (8003e70 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d030      	beq.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a40      	ldr	r2, [pc, #256]	; (8003e74 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d029      	beq.n	8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3e      	ldr	r2, [pc, #248]	; (8003e78 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3d      	ldr	r2, [pc, #244]	; (8003e7c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01a      	beq.n	8003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a3b      	ldr	r2, [pc, #236]	; (8003e80 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d012      	beq.n	8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a3a      	ldr	r2, [pc, #232]	; (8003e84 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00a      	beq.n	8003db6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a38      	ldr	r2, [pc, #224]	; (8003e88 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d102      	bne.n	8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dae:	e01a      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003db0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003db4:	e017      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dba:	e014      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dc0:	e011      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dc6:	e00e      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	e00c      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dcc:	2340      	movs	r3, #64	; 0x40
 8003dce:	e00a      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dd0:	2340      	movs	r3, #64	; 0x40
 8003dd2:	e008      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dd4:	2340      	movs	r3, #64	; 0x40
 8003dd6:	e006      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e004      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e002      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003de4:	2301      	movs	r3, #1
 8003de6:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003de8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0216 	orr.w	r2, r2, #22
 8003df8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0208 	orr.w	r2, r2, #8
 8003e28:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e005      	b.n	8003e48 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40026400 	.word	0x40026400
 8003e58:	40026058 	.word	0x40026058
 8003e5c:	40026010 	.word	0x40026010
 8003e60:	40026410 	.word	0x40026410
 8003e64:	40026070 	.word	0x40026070
 8003e68:	40026470 	.word	0x40026470
 8003e6c:	40026028 	.word	0x40026028
 8003e70:	40026428 	.word	0x40026428
 8003e74:	40026088 	.word	0x40026088
 8003e78:	40026488 	.word	0x40026488
 8003e7c:	40026040 	.word	0x40026040
 8003e80:	40026440 	.word	0x40026440
 8003e84:	400260a0 	.word	0x400260a0
 8003e88:	400264a0 	.word	0x400264a0
 8003e8c:	40026000 	.word	0x40026000

08003e90 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	e003      	b.n	8003eb6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d108      	bne.n	8003ef4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ef2:	e007      	b.n	8003f04 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	; 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e16b      	b.n	8004204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	f040 815a 	bne.w	80041fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d005      	beq.n	8003f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d130      	bne.n	8003fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f98:	2201      	movs	r2, #1
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 0201 	and.w	r2, r3, #1
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d017      	beq.n	8004000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d123      	bne.n	8004054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	08da      	lsrs	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3208      	adds	r2, #8
 8004014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	220f      	movs	r2, #15
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	69b9      	ldr	r1, [r7, #24]
 8004050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0203 	and.w	r2, r3, #3
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80b4 	beq.w	80041fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4b60      	ldr	r3, [pc, #384]	; (800421c <HAL_GPIO_Init+0x30c>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	4a5f      	ldr	r2, [pc, #380]	; (800421c <HAL_GPIO_Init+0x30c>)
 80040a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040a4:	6453      	str	r3, [r2, #68]	; 0x44
 80040a6:	4b5d      	ldr	r3, [pc, #372]	; (800421c <HAL_GPIO_Init+0x30c>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b2:	4a5b      	ldr	r2, [pc, #364]	; (8004220 <HAL_GPIO_Init+0x310>)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_GPIO_Init+0x314>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02b      	beq.n	8004136 <HAL_GPIO_Init+0x226>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a51      	ldr	r2, [pc, #324]	; (8004228 <HAL_GPIO_Init+0x318>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d025      	beq.n	8004132 <HAL_GPIO_Init+0x222>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a50      	ldr	r2, [pc, #320]	; (800422c <HAL_GPIO_Init+0x31c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01f      	beq.n	800412e <HAL_GPIO_Init+0x21e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a4f      	ldr	r2, [pc, #316]	; (8004230 <HAL_GPIO_Init+0x320>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d019      	beq.n	800412a <HAL_GPIO_Init+0x21a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4e      	ldr	r2, [pc, #312]	; (8004234 <HAL_GPIO_Init+0x324>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_GPIO_Init+0x216>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_GPIO_Init+0x328>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00d      	beq.n	8004122 <HAL_GPIO_Init+0x212>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x32c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <HAL_GPIO_Init+0x20e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4b      	ldr	r2, [pc, #300]	; (8004240 <HAL_GPIO_Init+0x330>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_GPIO_Init+0x20a>
 8004116:	2307      	movs	r3, #7
 8004118:	e00e      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800411a:	2308      	movs	r3, #8
 800411c:	e00c      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800411e:	2306      	movs	r3, #6
 8004120:	e00a      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004122:	2305      	movs	r3, #5
 8004124:	e008      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004126:	2304      	movs	r3, #4
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004136:	2300      	movs	r3, #0
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004148:	4935      	ldr	r1, [pc, #212]	; (8004220 <HAL_GPIO_Init+0x310>)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_GPIO_Init+0x334>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800417a:	4a32      	ldr	r2, [pc, #200]	; (8004244 <HAL_GPIO_Init+0x334>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004180:	4b30      	ldr	r3, [pc, #192]	; (8004244 <HAL_GPIO_Init+0x334>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	f67f ae90 	bls.w	8003f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40021c00 	.word	0x40021c00
 8004244:	40013c00 	.word	0x40013c00

08004248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
 8004254:	4613      	mov	r3, r2
 8004256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004258:	787b      	ldrb	r3, [r7, #1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004264:	e003      	b.n	800426e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004266:	887b      	ldrh	r3, [r7, #2]
 8004268:	041a      	lsls	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	619a      	str	r2, [r3, #24]
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800427a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427c:	b08f      	sub	sp, #60	; 0x3c
 800427e:	af0a      	add	r7, sp, #40	; 0x28
 8004280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e054      	b.n	8004336 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f007 fbf4 	bl	800ba94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2203      	movs	r2, #3
 80042b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f004 fc22 	bl	8008b14 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	687e      	ldr	r6, [r7, #4]
 80042d8:	466d      	mov	r5, sp
 80042da:	f106 0410 	add.w	r4, r6, #16
 80042de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ee:	1d33      	adds	r3, r6, #4
 80042f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042f2:	6838      	ldr	r0, [r7, #0]
 80042f4:	f004 fb9c 	bl	8008a30 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f004 fc19 	bl	8008b36 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	687e      	ldr	r6, [r7, #4]
 800430c:	466d      	mov	r5, sp
 800430e:	f106 0410 	add.w	r4, r6, #16
 8004312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800431a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800431e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004322:	1d33      	adds	r3, r6, #4
 8004324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004326:	6838      	ldr	r0, [r7, #0]
 8004328:	f004 fda2 	bl	8008e70 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800433e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800433e:	b590      	push	{r4, r7, lr}
 8004340:	b089      	sub	sp, #36	; 0x24
 8004342:	af04      	add	r7, sp, #16
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	4608      	mov	r0, r1
 8004348:	4611      	mov	r1, r2
 800434a:	461a      	mov	r2, r3
 800434c:	4603      	mov	r3, r0
 800434e:	70fb      	strb	r3, [r7, #3]
 8004350:	460b      	mov	r3, r1
 8004352:	70bb      	strb	r3, [r7, #2]
 8004354:	4613      	mov	r3, r2
 8004356:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_HCD_HC_Init+0x28>
 8004362:	2302      	movs	r3, #2
 8004364:	e076      	b.n	8004454 <HAL_HCD_HC_Init+0x116>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	333d      	adds	r3, #61	; 0x3d
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3338      	adds	r3, #56	; 0x38
 800438e:	787a      	ldrb	r2, [r7, #1]
 8004390:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3340      	adds	r3, #64	; 0x40
 80043a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80043a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	3339      	adds	r3, #57	; 0x39
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	333f      	adds	r3, #63	; 0x3f
 80043c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	78ba      	ldrb	r2, [r7, #2]
 80043ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043d2:	b2d0      	uxtb	r0, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	333a      	adds	r3, #58	; 0x3a
 80043e0:	4602      	mov	r2, r0
 80043e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80043e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	da09      	bge.n	8004400 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	333b      	adds	r3, #59	; 0x3b
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e008      	b.n	8004412 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	333b      	adds	r3, #59	; 0x3b
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	333c      	adds	r3, #60	; 0x3c
 8004420:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004424:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	787c      	ldrb	r4, [r7, #1]
 800442c:	78ba      	ldrb	r2, [r7, #2]
 800442e:	78f9      	ldrb	r1, [r7, #3]
 8004430:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	4623      	mov	r3, r4
 8004442:	f004 fe9b 	bl	800917c <USB_HC_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}

0800445c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_HCD_HC_Halt+0x1e>
 8004476:	2302      	movs	r3, #2
 8004478:	e00f      	b.n	800449a <HAL_HCD_HC_Halt+0x3e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f005 f8eb 	bl	8009666 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	70fb      	strb	r3, [r7, #3]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70bb      	strb	r3, [r7, #2]
 80044ba:	4613      	mov	r3, r2
 80044bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	333b      	adds	r3, #59	; 0x3b
 80044cc:	78ba      	ldrb	r2, [r7, #2]
 80044ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	333f      	adds	r3, #63	; 0x3f
 80044de:	787a      	ldrb	r2, [r7, #1]
 80044e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80044e2:	7c3b      	ldrb	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d112      	bne.n	800450e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	3342      	adds	r3, #66	; 0x42
 80044f6:	2203      	movs	r2, #3
 80044f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	333d      	adds	r3, #61	; 0x3d
 8004508:	7f3a      	ldrb	r2, [r7, #28]
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e008      	b.n	8004520 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	3342      	adds	r3, #66	; 0x42
 800451c:	2202      	movs	r2, #2
 800451e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004520:	787b      	ldrb	r3, [r7, #1]
 8004522:	2b03      	cmp	r3, #3
 8004524:	f200 80c6 	bhi.w	80046b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004541 	.word	0x08004541
 8004534:	080046a1 	.word	0x080046a1
 8004538:	080045a5 	.word	0x080045a5
 800453c:	08004623 	.word	0x08004623
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004540:	7c3b      	ldrb	r3, [r7, #16]
 8004542:	2b01      	cmp	r3, #1
 8004544:	f040 80b8 	bne.w	80046b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004548:	78bb      	ldrb	r3, [r7, #2]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80b4 	bne.w	80046b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004550:	8b3b      	ldrh	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	3355      	adds	r3, #85	; 0x55
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3355      	adds	r3, #85	; 0x55
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3342      	adds	r3, #66	; 0x42
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800458e:	e093      	b.n	80046b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3342      	adds	r3, #66	; 0x42
 800459e:	2202      	movs	r2, #2
 80045a0:	701a      	strb	r2, [r3, #0]
      break;
 80045a2:	e089      	b.n	80046b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80045a4:	78bb      	ldrb	r3, [r7, #2]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3355      	adds	r3, #85	; 0x55
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	3342      	adds	r3, #66	; 0x42
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80045d0:	e073      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	3342      	adds	r3, #66	; 0x42
 80045e0:	2202      	movs	r2, #2
 80045e2:	701a      	strb	r2, [r3, #0]
      break;
 80045e4:	e069      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3354      	adds	r3, #84	; 0x54
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	212c      	movs	r1, #44	; 0x2c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	3342      	adds	r3, #66	; 0x42
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
      break;
 800460c:	e055      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3342      	adds	r3, #66	; 0x42
 800461c:	2202      	movs	r2, #2
 800461e:	701a      	strb	r2, [r3, #0]
      break;
 8004620:	e04b      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004622:	78bb      	ldrb	r3, [r7, #2]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11d      	bne.n	8004664 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3355      	adds	r3, #85	; 0x55
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3342      	adds	r3, #66	; 0x42
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800464e:	e034      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	3342      	adds	r3, #66	; 0x42
 800465e:	2202      	movs	r2, #2
 8004660:	701a      	strb	r2, [r3, #0]
      break;
 8004662:	e02a      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3354      	adds	r3, #84	; 0x54
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d109      	bne.n	800468c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3342      	adds	r3, #66	; 0x42
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
      break;
 800468a:	e016      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	3342      	adds	r3, #66	; 0x42
 800469a:	2202      	movs	r2, #2
 800469c:	701a      	strb	r2, [r3, #0]
      break;
 800469e:	e00c      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3342      	adds	r3, #66	; 0x42
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
      break;
 80046b2:	e002      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80046b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	212c      	movs	r1, #44	; 0x2c
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	3344      	adds	r3, #68	; 0x44
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	8b3a      	ldrh	r2, [r7, #24]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	202c      	movs	r0, #44	; 0x2c
 80046d4:	fb00 f303 	mul.w	r3, r0, r3
 80046d8:	440b      	add	r3, r1
 80046da:	334c      	adds	r3, #76	; 0x4c
 80046dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	3360      	adds	r3, #96	; 0x60
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	3350      	adds	r3, #80	; 0x50
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	3339      	adds	r3, #57	; 0x39
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3361      	adds	r3, #97	; 0x61
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	222c      	movs	r2, #44	; 0x2c
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	3338      	adds	r3, #56	; 0x38
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	18d1      	adds	r1, r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	f004 fe3e 	bl	80093c0 <USB_HC_StartXfer>
 8004744:	4603      	mov	r3, r0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop

08004750 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f004 fb3f 	bl	8008dea <USB_GetMode>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	f040 80f6 	bne.w	8004960 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f004 fb23 	bl	8008dc4 <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80ec 	beq.w	800495e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f004 fb1a 	bl	8008dc4 <USB_ReadInterrupts>
 8004790:	4603      	mov	r3, r0
 8004792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800479a:	d104      	bne.n	80047a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80047a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f004 fb0a 	bl	8008dc4 <USB_ReadInterrupts>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ba:	d104      	bne.n	80047c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fafa 	bl	8008dc4 <USB_ReadInterrupts>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047da:	d104      	bne.n	80047e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80047e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f004 faea 	bl	8008dc4 <USB_ReadInterrupts>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d103      	bne.n	8004802 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2202      	movs	r2, #2
 8004800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f004 fadc 	bl	8008dc4 <USB_ReadInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004816:	d11c      	bne.n	8004852 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004820:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004832:	2110      	movs	r1, #16
 8004834:	6938      	ldr	r0, [r7, #16]
 8004836:	f004 f9cb 	bl	8008bd0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800483a:	6938      	ldr	r0, [r7, #16]
 800483c:	f004 f9fc 	bl	8008c38 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2101      	movs	r1, #1
 8004846:	4618      	mov	r0, r3
 8004848:	f004 fbd2 	bl	8008ff0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f007 f99f 	bl	800bb90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f004 fab4 	bl	8008dc4 <USB_ReadInterrupts>
 800485c:	4603      	mov	r3, r0
 800485e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004866:	d102      	bne.n	800486e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f001 f89e 	bl	80059aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f004 faa6 	bl	8008dc4 <USB_ReadInterrupts>
 8004878:	4603      	mov	r3, r0
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b08      	cmp	r3, #8
 8004880:	d106      	bne.n	8004890 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f007 f968 	bl	800bb58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2208      	movs	r2, #8
 800488e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f004 fa95 	bl	8008dc4 <USB_ReadInterrupts>
 800489a:	4603      	mov	r3, r0
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d101      	bne.n	80048a8 <HAL_HCD_IRQHandler+0x158>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <HAL_HCD_IRQHandler+0x15a>
 80048a8:	2300      	movs	r3, #0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0210 	bic.w	r2, r2, #16
 80048bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 ffa1 	bl	8005806 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0210 	orr.w	r2, r2, #16
 80048d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f004 fa73 	bl	8008dc4 <USB_ReadInterrupts>
 80048de:	4603      	mov	r3, r0
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e8:	d13a      	bne.n	8004960 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f004 fea8 	bl	8009644 <USB_HC_ReadInterrupt>
 80048f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e025      	b.n	8004948 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004926:	d106      	bne.n	8004936 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8ab 	bl	8004a8a <HCD_HC_IN_IRQHandler>
 8004934:	e005      	b.n	8004942 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fbf9 	bl	8005134 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	3301      	adds	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	429a      	cmp	r2, r3
 8004950:	d3d4      	bcc.n	80048fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800495a:	615a      	str	r2, [r3, #20]
 800495c:	e000      	b.n	8004960 <HAL_HCD_IRQHandler+0x210>
      return;
 800495e:	bf00      	nop
    }
  }
}
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_HCD_Start+0x16>
 8004978:	2302      	movs	r3, #2
 800497a:	e013      	b.n	80049a4 <HAL_HCD_Start+0x3e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f004 fb94 	bl	80090b8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f004 f8ac 	bl	8008af2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_HCD_Stop+0x16>
 80049be:	2302      	movs	r3, #2
 80049c0:	e00d      	b.n	80049de <HAL_HCD_Stop+0x32>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f004 ff82 	bl	80098d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f004 fb36 	bl	8009064 <USB_ResetPort>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	3360      	adds	r3, #96	; 0x60
 8004a1c:	781b      	ldrb	r3, [r3, #0]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	3350      	adds	r3, #80	; 0x50
 8004a44:	681b      	ldr	r3, [r3, #0]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 fb7a 	bl	8009158 <USB_GetCurrentFrame>
 8004a64:	4603      	mov	r3, r0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 fb55 	bl	800912a <USB_GetHostSpeed>
 8004a80:	4603      	mov	r3, r0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d11a      	bne.n	8004af0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2304      	movs	r3, #4
 8004aca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3361      	adds	r3, #97	; 0x61
 8004ada:	2206      	movs	r2, #6
 8004adc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f004 fdbc 	bl	8009666 <USB_HC_Halt>
 8004aee:	e0af      	b.n	8004c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b06:	d11b      	bne.n	8004b40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	461a      	mov	r2, r3
 8004b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	3361      	adds	r3, #97	; 0x61
 8004b2a:	2207      	movs	r2, #7
 8004b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f004 fd94 	bl	8009666 <USB_HC_Halt>
 8004b3e:	e087      	b.n	8004c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d109      	bne.n	8004b6a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b62:	461a      	mov	r2, r3
 8004b64:	2320      	movs	r3, #32
 8004b66:	6093      	str	r3, [r2, #8]
 8004b68:	e072      	b.n	8004c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d11a      	bne.n	8004bb6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2308      	movs	r3, #8
 8004b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3361      	adds	r3, #97	; 0x61
 8004ba0:	2205      	movs	r2, #5
 8004ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f004 fd59 	bl	8009666 <USB_HC_Halt>
 8004bb4:	e04c      	b.n	8004c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bcc:	d11b      	bne.n	8004c06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3361      	adds	r3, #97	; 0x61
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f004 fd31 	bl	8009666 <USB_HC_Halt>
 8004c04:	e024      	b.n	8004c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d119      	bne.n	8004c50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3361      	adds	r3, #97	; 0x61
 8004c3c:	2206      	movs	r2, #6
 8004c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f004 fd0b 	bl	8009666 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c66:	d112      	bne.n	8004c8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f004 fcf7 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c84:	461a      	mov	r2, r3
 8004c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c8c:	e24e      	b.n	800512c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f040 80df 	bne.w	8004e64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d019      	beq.n	8004ce2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	212c      	movs	r1, #44	; 0x2c
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	3348      	adds	r3, #72	; 0x48
 8004cbc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	0159      	lsls	r1, r3, #5
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	440b      	add	r3, r1
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004cd0:	1ad2      	subs	r2, r2, r3
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	202c      	movs	r0, #44	; 0x2c
 8004cd8:	fb00 f303 	mul.w	r3, r0, r3
 8004cdc:	440b      	add	r3, r1
 8004cde:	3350      	adds	r3, #80	; 0x50
 8004ce0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3361      	adds	r3, #97	; 0x61
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	335c      	adds	r3, #92	; 0x5c
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d12:	461a      	mov	r2, r3
 8004d14:	2301      	movs	r3, #1
 8004d16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	212c      	movs	r1, #44	; 0x2c
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	333f      	adds	r3, #63	; 0x3f
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	212c      	movs	r1, #44	; 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	333f      	adds	r3, #63	; 0x3f
 8004d3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d111      	bne.n	8004d64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f004 fc8b 	bl	8009666 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2310      	movs	r3, #16
 8004d60:	6093      	str	r3, [r2, #8]
 8004d62:	e03a      	b.n	8004dda <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	212c      	movs	r1, #44	; 0x2c
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	333f      	adds	r3, #63	; 0x3f
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d009      	beq.n	8004d8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	333f      	adds	r3, #63	; 0x3f
 8004d86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d126      	bne.n	8004dda <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004daa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3360      	adds	r3, #96	; 0x60
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	b2d9      	uxtb	r1, r3
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	202c      	movs	r0, #44	; 0x2c
 8004dc8:	fb00 f303 	mul.w	r3, r0, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	3360      	adds	r3, #96	; 0x60
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f006 fee9 	bl	800bbac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d12b      	bne.n	8004e3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	212c      	movs	r1, #44	; 0x2c
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	3348      	adds	r3, #72	; 0x48
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	202c      	movs	r0, #44	; 0x2c
 8004df8:	fb00 f202 	mul.w	r2, r0, r2
 8004dfc:	440a      	add	r2, r1
 8004dfe:	3240      	adds	r2, #64	; 0x40
 8004e00:	8812      	ldrh	r2, [r2, #0]
 8004e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 818e 	beq.w	800512c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	212c      	movs	r1, #44	; 0x2c
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3354      	adds	r3, #84	; 0x54
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f083 0301 	eor.w	r3, r3, #1
 8004e24:	b2d8      	uxtb	r0, r3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3354      	adds	r3, #84	; 0x54
 8004e34:	4602      	mov	r2, r0
 8004e36:	701a      	strb	r2, [r3, #0]
}
 8004e38:	e178      	b.n	800512c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	3354      	adds	r3, #84	; 0x54
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f083 0301 	eor.w	r3, r3, #1
 8004e4e:	b2d8      	uxtb	r0, r3
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	212c      	movs	r1, #44	; 0x2c
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3354      	adds	r3, #84	; 0x54
 8004e5e:	4602      	mov	r2, r0
 8004e60:	701a      	strb	r2, [r3, #0]
}
 8004e62:	e163      	b.n	800512c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	f040 80f6 	bne.w	8005068 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	212c      	movs	r1, #44	; 0x2c
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3361      	adds	r3, #97	; 0x61
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d109      	bne.n	8004ea4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	212c      	movs	r1, #44	; 0x2c
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3360      	adds	r3, #96	; 0x60
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e0c9      	b.n	8005038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	212c      	movs	r1, #44	; 0x2c
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	4413      	add	r3, r2
 8004eb0:	3361      	adds	r3, #97	; 0x61
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d109      	bne.n	8004ecc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	212c      	movs	r1, #44	; 0x2c
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3360      	adds	r3, #96	; 0x60
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e0b5      	b.n	8005038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3361      	adds	r3, #97	; 0x61
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d009      	beq.n	8004ef4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	212c      	movs	r1, #44	; 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	3361      	adds	r3, #97	; 0x61
 8004eee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d150      	bne.n	8004f96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	335c      	adds	r3, #92	; 0x5c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	202c      	movs	r0, #44	; 0x2c
 8004f0c:	fb00 f303 	mul.w	r3, r0, r3
 8004f10:	440b      	add	r3, r1
 8004f12:	335c      	adds	r3, #92	; 0x5c
 8004f14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	335c      	adds	r3, #92	; 0x5c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d912      	bls.n	8004f50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	212c      	movs	r1, #44	; 0x2c
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	4413      	add	r3, r2
 8004f36:	335c      	adds	r3, #92	; 0x5c
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	212c      	movs	r1, #44	; 0x2c
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	3360      	adds	r3, #96	; 0x60
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f4e:	e073      	b.n	8005038 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	212c      	movs	r1, #44	; 0x2c
 8004f56:	fb01 f303 	mul.w	r3, r1, r3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3360      	adds	r3, #96	; 0x60
 8004f5e:	2202      	movs	r2, #2
 8004f60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f94:	e050      	b.n	8005038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	212c      	movs	r1, #44	; 0x2c
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3361      	adds	r3, #97	; 0x61
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d122      	bne.n	8004ff0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3360      	adds	r3, #96	; 0x60
 8004fb8:	2202      	movs	r2, #2
 8004fba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e023      	b.n	8005038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	212c      	movs	r1, #44	; 0x2c
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3361      	adds	r3, #97	; 0x61
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b07      	cmp	r3, #7
 8005002:	d119      	bne.n	8005038 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	212c      	movs	r1, #44	; 0x2c
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	4413      	add	r3, r2
 8005010:	335c      	adds	r3, #92	; 0x5c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	202c      	movs	r0, #44	; 0x2c
 800501c:	fb00 f303 	mul.w	r3, r0, r3
 8005020:	440b      	add	r3, r1
 8005022:	335c      	adds	r3, #92	; 0x5c
 8005024:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	212c      	movs	r1, #44	; 0x2c
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	4413      	add	r3, r2
 8005032:	3360      	adds	r3, #96	; 0x60
 8005034:	2204      	movs	r2, #4
 8005036:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005044:	461a      	mov	r2, r3
 8005046:	2302      	movs	r3, #2
 8005048:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	b2d9      	uxtb	r1, r3
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	202c      	movs	r0, #44	; 0x2c
 8005054:	fb00 f303 	mul.w	r3, r0, r3
 8005058:	4413      	add	r3, r2
 800505a:	3360      	adds	r3, #96	; 0x60
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f006 fda3 	bl	800bbac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005066:	e061      	b.n	800512c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4413      	add	r3, r2
 8005070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d156      	bne.n	800512c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	333f      	adds	r3, #63	; 0x3f
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d111      	bne.n	80050b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	212c      	movs	r1, #44	; 0x2c
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	4413      	add	r3, r2
 800509e:	335c      	adds	r3, #92	; 0x5c
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f004 fad9 	bl	8009666 <USB_HC_Halt>
 80050b4:	e031      	b.n	800511a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	333f      	adds	r3, #63	; 0x3f
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	212c      	movs	r1, #44	; 0x2c
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	4413      	add	r3, r2
 80050d6:	333f      	adds	r3, #63	; 0x3f
 80050d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d11d      	bne.n	800511a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	212c      	movs	r1, #44	; 0x2c
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	335c      	adds	r3, #92	; 0x5c
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d110      	bne.n	800511a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	212c      	movs	r1, #44	; 0x2c
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	4413      	add	r3, r2
 8005104:	3361      	adds	r3, #97	; 0x61
 8005106:	2203      	movs	r2, #3
 8005108:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f004 faa6 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	461a      	mov	r2, r3
 8005128:	2310      	movs	r3, #16
 800512a:	6093      	str	r3, [r2, #8]
}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b04      	cmp	r3, #4
 8005162:	d11a      	bne.n	800519a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	461a      	mov	r2, r3
 8005172:	2304      	movs	r3, #4
 8005174:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	212c      	movs	r1, #44	; 0x2c
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	4413      	add	r3, r2
 8005182:	3361      	adds	r3, #97	; 0x61
 8005184:	2206      	movs	r2, #6
 8005186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f004 fa67 	bl	8009666 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005198:	e331      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d12e      	bne.n	800520e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	461a      	mov	r2, r3
 80051be:	2320      	movs	r3, #32
 80051c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	212c      	movs	r1, #44	; 0x2c
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	333d      	adds	r3, #61	; 0x3d
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	f040 8313 	bne.w	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	333d      	adds	r3, #61	; 0x3d
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	212c      	movs	r1, #44	; 0x2c
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	3360      	adds	r3, #96	; 0x60
 80051f8:	2202      	movs	r2, #2
 80051fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f004 fa2d 	bl	8009666 <USB_HC_Halt>
}
 800520c:	e2f7      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005224:	d112      	bne.n	800524c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	461a      	mov	r2, r3
 8005234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005238:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f004 fa0e 	bl	8009666 <USB_HC_Halt>
}
 800524a:	e2d8      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d140      	bne.n	80052e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	212c      	movs	r1, #44	; 0x2c
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	4413      	add	r3, r2
 800526e:	335c      	adds	r3, #92	; 0x5c
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	4413      	add	r3, r2
 800527c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d111      	bne.n	80052ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	212c      	movs	r1, #44	; 0x2c
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	333d      	adds	r3, #61	; 0x3d
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	461a      	mov	r2, r3
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	461a      	mov	r2, r3
 80052bc:	2301      	movs	r3, #1
 80052be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	212c      	movs	r1, #44	; 0x2c
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	3361      	adds	r3, #97	; 0x61
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f004 f9c2 	bl	8009666 <USB_HC_Halt>
}
 80052e2:	e28c      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d12c      	bne.n	8005354 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	212c      	movs	r1, #44	; 0x2c
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	4413      	add	r3, r2
 8005306:	3361      	adds	r3, #97	; 0x61
 8005308:	2204      	movs	r2, #4
 800530a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	212c      	movs	r1, #44	; 0x2c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	333d      	adds	r3, #61	; 0x3d
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	212c      	movs	r1, #44	; 0x2c
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	335c      	adds	r3, #92	; 0x5c
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f004 f993 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	461a      	mov	r2, r3
 800534e:	2340      	movs	r3, #64	; 0x40
 8005350:	6093      	str	r3, [r2, #8]
}
 8005352:	e254      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b08      	cmp	r3, #8
 8005368:	d11a      	bne.n	80053a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	461a      	mov	r2, r3
 8005378:	2308      	movs	r3, #8
 800537a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3361      	adds	r3, #97	; 0x61
 800538a:	2205      	movs	r2, #5
 800538c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f004 f964 	bl	8009666 <USB_HC_Halt>
}
 800539e:	e22e      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d140      	bne.n	8005438 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	212c      	movs	r1, #44	; 0x2c
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	335c      	adds	r3, #92	; 0x5c
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	212c      	movs	r1, #44	; 0x2c
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	3361      	adds	r3, #97	; 0x61
 80053d6:	2203      	movs	r2, #3
 80053d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	212c      	movs	r1, #44	; 0x2c
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	4413      	add	r3, r2
 80053e6:	333d      	adds	r3, #61	; 0x3d
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d112      	bne.n	8005414 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	212c      	movs	r1, #44	; 0x2c
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	333c      	adds	r3, #60	; 0x3c
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d108      	bne.n	8005414 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	212c      	movs	r1, #44	; 0x2c
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	333d      	adds	r3, #61	; 0x3d
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f004 f921 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	461a      	mov	r2, r3
 8005432:	2310      	movs	r3, #16
 8005434:	6093      	str	r3, [r2, #8]
}
 8005436:	e1e2      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d164      	bne.n	8005518 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d111      	bne.n	800547a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	212c      	movs	r1, #44	; 0x2c
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	4413      	add	r3, r2
 8005462:	3361      	adds	r3, #97	; 0x61
 8005464:	2206      	movs	r2, #6
 8005466:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f004 f8f7 	bl	8009666 <USB_HC_Halt>
 8005478:	e044      	b.n	8005504 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	212c      	movs	r1, #44	; 0x2c
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	4413      	add	r3, r2
 8005486:	335c      	adds	r3, #92	; 0x5c
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	202c      	movs	r0, #44	; 0x2c
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	440b      	add	r3, r1
 8005498:	335c      	adds	r3, #92	; 0x5c
 800549a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	212c      	movs	r1, #44	; 0x2c
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	335c      	adds	r3, #92	; 0x5c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d920      	bls.n	80054f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	212c      	movs	r1, #44	; 0x2c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	335c      	adds	r3, #92	; 0x5c
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	212c      	movs	r1, #44	; 0x2c
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	3360      	adds	r3, #96	; 0x60
 80054d0:	2204      	movs	r2, #4
 80054d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	b2d9      	uxtb	r1, r3
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	202c      	movs	r0, #44	; 0x2c
 80054de:	fb00 f303 	mul.w	r3, r0, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	3360      	adds	r3, #96	; 0x60
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f006 fb5e 	bl	800bbac <HAL_HCD_HC_NotifyURBChange_Callback>
 80054f0:	e008      	b.n	8005504 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	212c      	movs	r1, #44	; 0x2c
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	3360      	adds	r3, #96	; 0x60
 8005500:	2202      	movs	r2, #2
 8005502:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	461a      	mov	r2, r3
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	6093      	str	r3, [r2, #8]
}
 8005516:	e172      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552e:	d11b      	bne.n	8005568 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	212c      	movs	r1, #44	; 0x2c
 8005536:	fb01 f303 	mul.w	r3, r1, r3
 800553a:	4413      	add	r3, r2
 800553c:	3361      	adds	r3, #97	; 0x61
 800553e:	2208      	movs	r2, #8
 8005540:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f004 f88a 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	4413      	add	r3, r2
 800555a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555e:	461a      	mov	r2, r3
 8005560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005564:	6093      	str	r3, [r2, #8]
}
 8005566:	e14a      	b.n	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	4413      	add	r3, r2
 8005570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	f040 813f 	bne.w	80057fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	212c      	movs	r1, #44	; 0x2c
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	4413      	add	r3, r2
 800558c:	3361      	adds	r3, #97	; 0x61
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d17d      	bne.n	8005690 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	212c      	movs	r1, #44	; 0x2c
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	3360      	adds	r3, #96	; 0x60
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	212c      	movs	r1, #44	; 0x2c
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	333f      	adds	r3, #63	; 0x3f
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d00a      	beq.n	80055d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	212c      	movs	r1, #44	; 0x2c
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	333f      	adds	r3, #63	; 0x3f
 80055c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	f040 8100 	bne.w	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d113      	bne.n	8005600 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	212c      	movs	r1, #44	; 0x2c
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	3355      	adds	r3, #85	; 0x55
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f083 0301 	eor.w	r3, r3, #1
 80055ec:	b2d8      	uxtb	r0, r3
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	212c      	movs	r1, #44	; 0x2c
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	3355      	adds	r3, #85	; 0x55
 80055fc:	4602      	mov	r2, r0
 80055fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b01      	cmp	r3, #1
 8005606:	f040 80e3 	bne.w	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	212c      	movs	r1, #44	; 0x2c
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	4413      	add	r3, r2
 8005616:	334c      	adds	r3, #76	; 0x4c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80d8 	beq.w	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	212c      	movs	r1, #44	; 0x2c
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	4413      	add	r3, r2
 800562c:	334c      	adds	r3, #76	; 0x4c
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	202c      	movs	r0, #44	; 0x2c
 8005636:	fb00 f202 	mul.w	r2, r0, r2
 800563a:	440a      	add	r2, r1
 800563c:	3240      	adds	r2, #64	; 0x40
 800563e:	8812      	ldrh	r2, [r2, #0]
 8005640:	4413      	add	r3, r2
 8005642:	3b01      	subs	r3, #1
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	202c      	movs	r0, #44	; 0x2c
 800564a:	fb00 f202 	mul.w	r2, r0, r2
 800564e:	440a      	add	r2, r1
 8005650:	3240      	adds	r2, #64	; 0x40
 8005652:	8812      	ldrh	r2, [r2, #0]
 8005654:	fbb3 f3f2 	udiv	r3, r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80b5 	beq.w	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	212c      	movs	r1, #44	; 0x2c
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	3355      	adds	r3, #85	; 0x55
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f083 0301 	eor.w	r3, r3, #1
 800567a:	b2d8      	uxtb	r0, r3
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	212c      	movs	r1, #44	; 0x2c
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	4413      	add	r3, r2
 8005688:	3355      	adds	r3, #85	; 0x55
 800568a:	4602      	mov	r2, r0
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e09f      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	212c      	movs	r1, #44	; 0x2c
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	3361      	adds	r3, #97	; 0x61
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d109      	bne.n	80056b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	212c      	movs	r1, #44	; 0x2c
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	3360      	adds	r3, #96	; 0x60
 80056b2:	2202      	movs	r2, #2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e08b      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	212c      	movs	r1, #44	; 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	3361      	adds	r3, #97	; 0x61
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d109      	bne.n	80056e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	212c      	movs	r1, #44	; 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	3360      	adds	r3, #96	; 0x60
 80056da:	2202      	movs	r2, #2
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e077      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	212c      	movs	r1, #44	; 0x2c
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3361      	adds	r3, #97	; 0x61
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b05      	cmp	r3, #5
 80056f2:	d109      	bne.n	8005708 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	212c      	movs	r1, #44	; 0x2c
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	4413      	add	r3, r2
 8005700:	3360      	adds	r3, #96	; 0x60
 8005702:	2205      	movs	r2, #5
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e063      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	212c      	movs	r1, #44	; 0x2c
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	4413      	add	r3, r2
 8005714:	3361      	adds	r3, #97	; 0x61
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b06      	cmp	r3, #6
 800571a:	d009      	beq.n	8005730 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	212c      	movs	r1, #44	; 0x2c
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	4413      	add	r3, r2
 8005728:	3361      	adds	r3, #97	; 0x61
 800572a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800572c:	2b08      	cmp	r3, #8
 800572e:	d14f      	bne.n	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	212c      	movs	r1, #44	; 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	335c      	adds	r3, #92	; 0x5c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	202c      	movs	r0, #44	; 0x2c
 8005748:	fb00 f303 	mul.w	r3, r0, r3
 800574c:	440b      	add	r3, r1
 800574e:	335c      	adds	r3, #92	; 0x5c
 8005750:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	212c      	movs	r1, #44	; 0x2c
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	335c      	adds	r3, #92	; 0x5c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d912      	bls.n	800578c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	212c      	movs	r1, #44	; 0x2c
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	335c      	adds	r3, #92	; 0x5c
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	212c      	movs	r1, #44	; 0x2c
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	4413      	add	r3, r2
 8005784:	3360      	adds	r3, #96	; 0x60
 8005786:	2204      	movs	r2, #4
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e021      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	212c      	movs	r1, #44	; 0x2c
 8005792:	fb01 f303 	mul.w	r3, r1, r3
 8005796:	4413      	add	r3, r2
 8005798:	3360      	adds	r3, #96	; 0x60
 800579a:	2202      	movs	r2, #2
 800579c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ca:	461a      	mov	r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	461a      	mov	r2, r3
 80057de:	2302      	movs	r3, #2
 80057e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	b2d9      	uxtb	r1, r3
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	202c      	movs	r0, #44	; 0x2c
 80057ec:	fb00 f303 	mul.w	r3, r0, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	3360      	adds	r3, #96	; 0x60
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f006 f9d7 	bl	800bbac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057fe:	bf00      	nop
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b08a      	sub	sp, #40	; 0x28
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	0c5b      	lsrs	r3, r3, #17
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800583a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d004      	beq.n	800584c <HCD_RXQLVL_IRQHandler+0x46>
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b05      	cmp	r3, #5
 8005846:	f000 80a9 	beq.w	800599c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800584a:	e0aa      	b.n	80059a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80a6 	beq.w	80059a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	212c      	movs	r1, #44	; 0x2c
 800585a:	fb01 f303 	mul.w	r3, r1, r3
 800585e:	4413      	add	r3, r2
 8005860:	3344      	adds	r3, #68	; 0x44
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 809b 	beq.w	80059a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	212c      	movs	r1, #44	; 0x2c
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	4413      	add	r3, r2
 8005876:	3350      	adds	r3, #80	; 0x50
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	441a      	add	r2, r3
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	202c      	movs	r0, #44	; 0x2c
 8005884:	fb00 f303 	mul.w	r3, r0, r3
 8005888:	440b      	add	r3, r1
 800588a:	334c      	adds	r3, #76	; 0x4c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d87a      	bhi.n	8005988 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	212c      	movs	r1, #44	; 0x2c
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	4413      	add	r3, r2
 80058a2:	3344      	adds	r3, #68	; 0x44
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	b292      	uxth	r2, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	f003 fa32 	bl	8008d14 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	212c      	movs	r1, #44	; 0x2c
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	3344      	adds	r3, #68	; 0x44
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	441a      	add	r2, r3
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	202c      	movs	r0, #44	; 0x2c
 80058ca:	fb00 f303 	mul.w	r3, r0, r3
 80058ce:	440b      	add	r3, r1
 80058d0:	3344      	adds	r3, #68	; 0x44
 80058d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	212c      	movs	r1, #44	; 0x2c
 80058da:	fb01 f303 	mul.w	r3, r1, r3
 80058de:	4413      	add	r3, r2
 80058e0:	3350      	adds	r3, #80	; 0x50
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	441a      	add	r2, r3
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	202c      	movs	r0, #44	; 0x2c
 80058ee:	fb00 f303 	mul.w	r3, r0, r3
 80058f2:	440b      	add	r3, r1
 80058f4:	3350      	adds	r3, #80	; 0x50
 80058f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	0cdb      	lsrs	r3, r3, #19
 8005908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	212c      	movs	r1, #44	; 0x2c
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4413      	add	r3, r2
 800591a:	3340      	adds	r3, #64	; 0x40
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4293      	cmp	r3, r2
 8005924:	d13c      	bne.n	80059a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d039      	beq.n	80059a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	4413      	add	r3, r2
 8005934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005942:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800594a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	4413      	add	r3, r2
 8005954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	212c      	movs	r1, #44	; 0x2c
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	4413      	add	r3, r2
 800596a:	3354      	adds	r3, #84	; 0x54
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f083 0301 	eor.w	r3, r3, #1
 8005972:	b2d8      	uxtb	r0, r3
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	212c      	movs	r1, #44	; 0x2c
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	4413      	add	r3, r2
 8005980:	3354      	adds	r3, #84	; 0x54
 8005982:	4602      	mov	r2, r0
 8005984:	701a      	strb	r2, [r3, #0]
      break;
 8005986:	e00b      	b.n	80059a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	212c      	movs	r1, #44	; 0x2c
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	4413      	add	r3, r2
 8005994:	3360      	adds	r3, #96	; 0x60
 8005996:	2204      	movs	r2, #4
 8005998:	701a      	strb	r2, [r3, #0]
      break;
 800599a:	e001      	b.n	80059a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80059a0:	bf00      	nop
  }
}
 80059a2:	bf00      	nop
 80059a4:	3728      	adds	r7, #40	; 0x28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d10b      	bne.n	80059fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d102      	bne.n	80059f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f006 f8c1 	bl	800bb74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d132      	bne.n	8005a6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f043 0308 	orr.w	r3, r3, #8
 8005a0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d126      	bne.n	8005a64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d113      	bne.n	8005a46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a28:	d106      	bne.n	8005a38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2102      	movs	r1, #2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f003 fadd 	bl	8008ff0 <USB_InitFSLSPClkSel>
 8005a36:	e011      	b.n	8005a5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f003 fad6 	bl	8008ff0 <USB_InitFSLSPClkSel>
 8005a44:	e00a      	b.n	8005a5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d106      	bne.n	8005a5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a54:	461a      	mov	r2, r3
 8005a56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f006 f8b3 	bl	800bbc8 <HAL_HCD_PortEnabled_Callback>
 8005a62:	e002      	b.n	8005a6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f006 f8bd 	bl	800bbe4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d103      	bne.n	8005a7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f043 0320 	orr.w	r3, r3, #32
 8005a7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a82:	461a      	mov	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6013      	str	r3, [r2, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e12b      	b.n	8005cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb fb52 	bl	8001160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2224      	movs	r2, #36	; 0x24
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005af4:	f001 fdca 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 8005af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4a81      	ldr	r2, [pc, #516]	; (8005d04 <HAL_I2C_Init+0x274>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d807      	bhi.n	8005b14 <HAL_I2C_Init+0x84>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a80      	ldr	r2, [pc, #512]	; (8005d08 <HAL_I2C_Init+0x278>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	bf94      	ite	ls
 8005b0c:	2301      	movls	r3, #1
 8005b0e:	2300      	movhi	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e006      	b.n	8005b22 <HAL_I2C_Init+0x92>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a7d      	ldr	r2, [pc, #500]	; (8005d0c <HAL_I2C_Init+0x27c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	bf94      	ite	ls
 8005b1c:	2301      	movls	r3, #1
 8005b1e:	2300      	movhi	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e0e7      	b.n	8005cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a78      	ldr	r2, [pc, #480]	; (8005d10 <HAL_I2C_Init+0x280>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	0c9b      	lsrs	r3, r3, #18
 8005b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4a6a      	ldr	r2, [pc, #424]	; (8005d04 <HAL_I2C_Init+0x274>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d802      	bhi.n	8005b64 <HAL_I2C_Init+0xd4>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	3301      	adds	r3, #1
 8005b62:	e009      	b.n	8005b78 <HAL_I2C_Init+0xe8>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	4a69      	ldr	r2, [pc, #420]	; (8005d14 <HAL_I2C_Init+0x284>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	099b      	lsrs	r3, r3, #6
 8005b76:	3301      	adds	r3, #1
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	495c      	ldr	r1, [pc, #368]	; (8005d04 <HAL_I2C_Init+0x274>)
 8005b94:	428b      	cmp	r3, r1
 8005b96:	d819      	bhi.n	8005bcc <HAL_I2C_Init+0x13c>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	1e59      	subs	r1, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bac:	400b      	ands	r3, r1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_I2C_Init+0x138>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1e59      	subs	r1, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc6:	e051      	b.n	8005c6c <HAL_I2C_Init+0x1dc>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	e04f      	b.n	8005c6c <HAL_I2C_Init+0x1dc>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d111      	bne.n	8005bf8 <HAL_I2C_Init+0x168>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1e58      	subs	r0, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	440b      	add	r3, r1
 8005be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005be6:	3301      	adds	r3, #1
 8005be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	e012      	b.n	8005c1e <HAL_I2C_Init+0x18e>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1e58      	subs	r0, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6859      	ldr	r1, [r3, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	0099      	lsls	r1, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_Init+0x196>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e022      	b.n	8005c6c <HAL_I2C_Init+0x1dc>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10e      	bne.n	8005c4c <HAL_I2C_Init+0x1bc>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1e58      	subs	r0, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6859      	ldr	r1, [r3, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	440b      	add	r3, r1
 8005c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c40:	3301      	adds	r3, #1
 8005c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	e00f      	b.n	8005c6c <HAL_I2C_Init+0x1dc>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	1e58      	subs	r0, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	0099      	lsls	r1, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c62:	3301      	adds	r3, #1
 8005c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	6809      	ldr	r1, [r1, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6911      	ldr	r1, [r2, #16]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68d2      	ldr	r2, [r2, #12]
 8005ca6:	4311      	orrs	r1, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	430b      	orrs	r3, r1
 8005cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695a      	ldr	r2, [r3, #20]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	000186a0 	.word	0x000186a0
 8005d08:	001e847f 	.word	0x001e847f
 8005d0c:	003d08ff 	.word	0x003d08ff
 8005d10:	431bde83 	.word	0x431bde83
 8005d14:	10624dd3 	.word	0x10624dd3

08005d18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	461a      	mov	r2, r3
 8005d24:	460b      	mov	r3, r1
 8005d26:	817b      	strh	r3, [r7, #10]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d2c:	f7fb ff7c 	bl	8001c28 <HAL_GetTick>
 8005d30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	f040 80e0 	bne.w	8005f00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2319      	movs	r3, #25
 8005d46:	2201      	movs	r2, #1
 8005d48:	4970      	ldr	r1, [pc, #448]	; (8005f0c <HAL_I2C_Master_Transmit+0x1f4>)
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fde8 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	e0d3      	b.n	8005f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_I2C_Master_Transmit+0x50>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0cc      	b.n	8005f02 <HAL_I2C_Master_Transmit+0x1ea>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d007      	beq.n	8005d8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0201 	orr.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2221      	movs	r2, #33	; 0x21
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2210      	movs	r2, #16
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	893a      	ldrh	r2, [r7, #8]
 8005dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a50      	ldr	r2, [pc, #320]	; (8005f10 <HAL_I2C_Master_Transmit+0x1f8>)
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005dd0:	8979      	ldrh	r1, [r7, #10]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fbbc 	bl	8006554 <I2C_MasterRequestWrite>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e08d      	b.n	8005f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005dfc:	e066      	b.n	8005ecc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	6a39      	ldr	r1, [r7, #32]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fe62 	bl	8006acc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00d      	beq.n	8005e2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d107      	bne.n	8005e26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e06b      	b.n	8005f02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	781a      	ldrb	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d11b      	bne.n	8005ea0 <HAL_I2C_Master_Transmit+0x188>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d017      	beq.n	8005ea0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	6a39      	ldr	r1, [r7, #32]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fe52 	bl	8006b4e <I2C_WaitOnBTFFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00d      	beq.n	8005ecc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d107      	bne.n	8005ec8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e01a      	b.n	8005f02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d194      	bne.n	8005dfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e000      	b.n	8005f02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	00100002 	.word	0x00100002
 8005f10:	ffff0000 	.word	0xffff0000

08005f14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	; 0x30
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	460b      	mov	r3, r1
 8005f22:	817b      	strh	r3, [r7, #10]
 8005f24:	4613      	mov	r3, r2
 8005f26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f28:	f7fb fe7e 	bl	8001c28 <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	f040 820b 	bne.w	8006352 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2319      	movs	r3, #25
 8005f42:	2201      	movs	r2, #1
 8005f44:	497c      	ldr	r1, [pc, #496]	; (8006138 <HAL_I2C_Master_Receive+0x224>)
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fcea 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f52:	2302      	movs	r3, #2
 8005f54:	e1fe      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_I2C_Master_Receive+0x50>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e1f7      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d007      	beq.n	8005f8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2222      	movs	r2, #34	; 0x22
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	893a      	ldrh	r2, [r7, #8]
 8005fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a5c      	ldr	r2, [pc, #368]	; (800613c <HAL_I2C_Master_Receive+0x228>)
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fcc:	8979      	ldrh	r1, [r7, #10]
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fb40 	bl	8006658 <I2C_MasterRequestRead>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e1b8      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d113      	bne.n	8006012 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fea:	2300      	movs	r3, #0
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	623b      	str	r3, [r7, #32]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e18c      	b.n	800632c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	2b01      	cmp	r3, #1
 8006018:	d11b      	bne.n	8006052 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e16c      	b.n	800632c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006056:	2b02      	cmp	r3, #2
 8006058:	d11b      	bne.n	8006092 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006068:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	e14c      	b.n	800632c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060b8:	e138      	b.n	800632c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060be:	2b03      	cmp	r3, #3
 80060c0:	f200 80f1 	bhi.w	80062a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d123      	bne.n	8006114 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 fd7d 	bl	8006bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e139      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006112:	e10b      	b.n	800632c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	2b02      	cmp	r3, #2
 800611a:	d14e      	bne.n	80061ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	2200      	movs	r2, #0
 8006124:	4906      	ldr	r1, [pc, #24]	; (8006140 <HAL_I2C_Master_Receive+0x22c>)
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fbfa 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d008      	beq.n	8006144 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e10e      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
 8006136:	bf00      	nop
 8006138:	00100002 	.word	0x00100002
 800613c:	ffff0000 	.word	0xffff0000
 8006140:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061b8:	e0b8      	b.n	800632c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	2200      	movs	r2, #0
 80061c2:	4966      	ldr	r1, [pc, #408]	; (800635c <HAL_I2C_Master_Receive+0x448>)
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fbab 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0bf      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	2200      	movs	r2, #0
 800621e:	494f      	ldr	r1, [pc, #316]	; (800635c <HAL_I2C_Master_Receive+0x448>)
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fb7d 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e091      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062a4:	e042      	b.n	800632c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 fc90 	bl	8006bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e04c      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d118      	bne.n	800632c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f aec2 	bne.w	80060ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	e000      	b.n	8006354 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006352:	2302      	movs	r3, #2
  }
}
 8006354:	4618      	mov	r0, r3
 8006356:	3728      	adds	r7, #40	; 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	00010004 	.word	0x00010004

08006360 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	461a      	mov	r2, r3
 800636e:	4603      	mov	r3, r0
 8006370:	817b      	strh	r3, [r7, #10]
 8006372:	460b      	mov	r3, r1
 8006374:	813b      	strh	r3, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800637a:	f7fb fc55 	bl	8001c28 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b20      	cmp	r3, #32
 800638a:	f040 80d9 	bne.w	8006540 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	2319      	movs	r3, #25
 8006394:	2201      	movs	r2, #1
 8006396:	496d      	ldr	r1, [pc, #436]	; (800654c <HAL_I2C_Mem_Write+0x1ec>)
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fac1 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0cc      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_I2C_Mem_Write+0x56>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e0c5      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d007      	beq.n	80063dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2221      	movs	r2, #33	; 0x21
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2240      	movs	r2, #64	; 0x40
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800640c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a4d      	ldr	r2, [pc, #308]	; (8006550 <HAL_I2C_Mem_Write+0x1f0>)
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800641e:	88f8      	ldrh	r0, [r7, #6]
 8006420:	893a      	ldrh	r2, [r7, #8]
 8006422:	8979      	ldrh	r1, [r7, #10]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4603      	mov	r3, r0
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f9e0 	bl	80067f4 <I2C_RequestMemoryWrite>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d052      	beq.n	80064e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e081      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fb42 	bl	8006acc <I2C_WaitOnTXEFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00d      	beq.n	800646a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	2b04      	cmp	r3, #4
 8006454:	d107      	bne.n	8006466 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e06b      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	781a      	ldrb	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d11b      	bne.n	80064e0 <HAL_I2C_Mem_Write+0x180>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d017      	beq.n	80064e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1aa      	bne.n	800643e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fb2e 	bl	8006b4e <I2C_WaitOnBTFFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d107      	bne.n	8006510 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e016      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e000      	b.n	8006542 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
  }
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	00100002 	.word	0x00100002
 8006550:	ffff0000 	.word	0xffff0000

08006554 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	460b      	mov	r3, r1
 8006562:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d006      	beq.n	800657e <I2C_MasterRequestWrite+0x2a>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d003      	beq.n	800657e <I2C_MasterRequestWrite+0x2a>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800657c:	d108      	bne.n	8006590 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e00b      	b.n	80065a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	2b12      	cmp	r3, #18
 8006596:	d107      	bne.n	80065a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f9b3 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00d      	beq.n	80065dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ce:	d103      	bne.n	80065d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e035      	b.n	8006648 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e4:	d108      	bne.n	80065f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065e6:	897b      	ldrh	r3, [r7, #10]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065f4:	611a      	str	r2, [r3, #16]
 80065f6:	e01b      	b.n	8006630 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065f8:	897b      	ldrh	r3, [r7, #10]
 80065fa:	11db      	asrs	r3, r3, #7
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f063 030f 	orn	r3, r3, #15
 8006608:	b2da      	uxtb	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	490e      	ldr	r1, [pc, #56]	; (8006650 <I2C_MasterRequestWrite+0xfc>)
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f9d9 	bl	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e010      	b.n	8006648 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006626:	897b      	ldrh	r3, [r7, #10]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4907      	ldr	r1, [pc, #28]	; (8006654 <I2C_MasterRequestWrite+0x100>)
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f9c9 	bl	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	00010008 	.word	0x00010008
 8006654:	00010002 	.word	0x00010002

08006658 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	460b      	mov	r3, r1
 8006666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800667c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b08      	cmp	r3, #8
 8006682:	d006      	beq.n	8006692 <I2C_MasterRequestRead+0x3a>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d003      	beq.n	8006692 <I2C_MasterRequestRead+0x3a>
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006690:	d108      	bne.n	80066a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e00b      	b.n	80066bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	2b11      	cmp	r3, #17
 80066aa:	d107      	bne.n	80066bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f929 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00d      	beq.n	80066f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e2:	d103      	bne.n	80066ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e079      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066f8:	d108      	bne.n	800670c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066fa:	897b      	ldrh	r3, [r7, #10]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	611a      	str	r2, [r3, #16]
 800670a:	e05f      	b.n	80067cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800670c:	897b      	ldrh	r3, [r7, #10]
 800670e:	11db      	asrs	r3, r3, #7
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 0306 	and.w	r3, r3, #6
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f063 030f 	orn	r3, r3, #15
 800671c:	b2da      	uxtb	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4930      	ldr	r1, [pc, #192]	; (80067ec <I2C_MasterRequestRead+0x194>)
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f94f 	bl	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e054      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	b2da      	uxtb	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4929      	ldr	r1, [pc, #164]	; (80067f0 <I2C_MasterRequestRead+0x198>)
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f93f 	bl	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e044      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800677e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f8c7 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a6:	d103      	bne.n	80067b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e017      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80067b4:	897b      	ldrh	r3, [r7, #10]
 80067b6:	11db      	asrs	r3, r3, #7
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0306 	and.w	r3, r3, #6
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f063 030e 	orn	r3, r3, #14
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4907      	ldr	r1, [pc, #28]	; (80067f0 <I2C_MasterRequestRead+0x198>)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f8fb 	bl	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	00010008 	.word	0x00010008
 80067f0:	00010002 	.word	0x00010002

080067f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	4608      	mov	r0, r1
 80067fe:	4611      	mov	r1, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4603      	mov	r3, r0
 8006804:	817b      	strh	r3, [r7, #10]
 8006806:	460b      	mov	r3, r1
 8006808:	813b      	strh	r3, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800681c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	2200      	movs	r2, #0
 8006826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f878 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006844:	d103      	bne.n	800684e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e05f      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006852:	897b      	ldrh	r3, [r7, #10]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	492d      	ldr	r1, [pc, #180]	; (800691c <I2C_RequestMemoryWrite+0x128>)
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f8b0 	bl	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e04c      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006890:	6a39      	ldr	r1, [r7, #32]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 f91a 	bl	8006acc <I2C_WaitOnTXEFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d107      	bne.n	80068b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e02b      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d105      	bne.n	80068cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068c0:	893b      	ldrh	r3, [r7, #8]
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	611a      	str	r2, [r3, #16]
 80068ca:	e021      	b.n	8006910 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068cc:	893b      	ldrh	r3, [r7, #8]
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068dc:	6a39      	ldr	r1, [r7, #32]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f8f4 	bl	8006acc <I2C_WaitOnTXEFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d107      	bne.n	8006902 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e005      	b.n	8006912 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006906:	893b      	ldrh	r3, [r7, #8]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	00010002 	.word	0x00010002

08006920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006930:	e025      	b.n	800697e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d021      	beq.n	800697e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fb f975 	bl	8001c28 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d116      	bne.n	800697e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0220 	orr.w	r2, r3, #32
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e023      	b.n	80069c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	0c1b      	lsrs	r3, r3, #16
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	d10d      	bne.n	80069a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	43da      	mvns	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4013      	ands	r3, r2
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	bf0c      	ite	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	2300      	movne	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	e00c      	b.n	80069be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	43da      	mvns	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4013      	ands	r3, r2
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bf0c      	ite	eq
 80069b6:	2301      	moveq	r3, #1
 80069b8:	2300      	movne	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d0b6      	beq.n	8006932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069dc:	e051      	b.n	8006a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ec:	d123      	bne.n	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f043 0204 	orr.w	r2, r3, #4
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e046      	b.n	8006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d021      	beq.n	8006a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3e:	f7fb f8f3 	bl	8001c28 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d302      	bcc.n	8006a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d116      	bne.n	8006a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f043 0220 	orr.w	r2, r3, #32
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e020      	b.n	8006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d10c      	bne.n	8006aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	43da      	mvns	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	e00b      	b.n	8006abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	43da      	mvns	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d18d      	bne.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad8:	e02d      	b.n	8006b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f8ce 	bl	8006c7c <I2C_IsAcknowledgeFailed>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e02d      	b.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d021      	beq.n	8006b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af2:	f7fb f899 	bl	8001c28 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d302      	bcc.n	8006b08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d116      	bne.n	8006b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e007      	b.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d1ca      	bne.n	8006ada <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b5a:	e02d      	b.n	8006bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f88d 	bl	8006c7c <I2C_IsAcknowledgeFailed>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e02d      	b.n	8006bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d021      	beq.n	8006bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b74:	f7fb f858 	bl	8001c28 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d302      	bcc.n	8006b8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d116      	bne.n	8006bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	f043 0220 	orr.w	r2, r3, #32
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e007      	b.n	8006bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d1ca      	bne.n	8006b5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bdc:	e042      	b.n	8006c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d119      	bne.n	8006c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0210 	mvn.w	r2, #16
 8006bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e029      	b.n	8006c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c20:	f7fb f802 	bl	8001c28 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d302      	bcc.n	8006c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d116      	bne.n	8006c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	f043 0220 	orr.w	r2, r3, #32
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e007      	b.n	8006c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d1b5      	bne.n	8006bde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c92:	d11b      	bne.n	8006ccc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f043 0204 	orr.w	r2, r3, #4
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e267      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d075      	beq.n	8006de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cfa:	4b88      	ldr	r3, [pc, #544]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 030c 	and.w	r3, r3, #12
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d00c      	beq.n	8006d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d06:	4b85      	ldr	r3, [pc, #532]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d112      	bne.n	8006d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d12:	4b82      	ldr	r3, [pc, #520]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d1e:	d10b      	bne.n	8006d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d20:	4b7e      	ldr	r3, [pc, #504]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05b      	beq.n	8006de4 <HAL_RCC_OscConfig+0x108>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d157      	bne.n	8006de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e242      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d40:	d106      	bne.n	8006d50 <HAL_RCC_OscConfig+0x74>
 8006d42:	4b76      	ldr	r3, [pc, #472]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a75      	ldr	r2, [pc, #468]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e01d      	b.n	8006d8c <HAL_RCC_OscConfig+0xb0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d58:	d10c      	bne.n	8006d74 <HAL_RCC_OscConfig+0x98>
 8006d5a:	4b70      	ldr	r3, [pc, #448]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a6f      	ldr	r2, [pc, #444]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	4b6d      	ldr	r3, [pc, #436]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a6c      	ldr	r2, [pc, #432]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e00b      	b.n	8006d8c <HAL_RCC_OscConfig+0xb0>
 8006d74:	4b69      	ldr	r3, [pc, #420]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a68      	ldr	r2, [pc, #416]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	4b66      	ldr	r3, [pc, #408]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a65      	ldr	r2, [pc, #404]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d013      	beq.n	8006dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d94:	f7fa ff48 	bl	8001c28 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d9c:	f7fa ff44 	bl	8001c28 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b64      	cmp	r3, #100	; 0x64
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e207      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dae:	4b5b      	ldr	r3, [pc, #364]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0xc0>
 8006dba:	e014      	b.n	8006de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dbc:	f7fa ff34 	bl	8001c28 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc4:	f7fa ff30 	bl	8001c28 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b64      	cmp	r3, #100	; 0x64
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e1f3      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dd6:	4b51      	ldr	r3, [pc, #324]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f0      	bne.n	8006dc4 <HAL_RCC_OscConfig+0xe8>
 8006de2:	e000      	b.n	8006de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d063      	beq.n	8006eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006df2:	4b4a      	ldr	r3, [pc, #296]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dfe:	4b47      	ldr	r3, [pc, #284]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d11c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e0a:	4b44      	ldr	r3, [pc, #272]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d116      	bne.n	8006e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e16:	4b41      	ldr	r3, [pc, #260]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <HAL_RCC_OscConfig+0x152>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d001      	beq.n	8006e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e1c7      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2e:	4b3b      	ldr	r3, [pc, #236]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4937      	ldr	r1, [pc, #220]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e42:	e03a      	b.n	8006eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d020      	beq.n	8006e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e4c:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <HAL_RCC_OscConfig+0x244>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e52:	f7fa fee9 	bl	8001c28 <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e5a:	f7fa fee5 	bl	8001c28 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e1a8      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e6c:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0f0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e78:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4925      	ldr	r1, [pc, #148]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	600b      	str	r3, [r1, #0]
 8006e8c:	e015      	b.n	8006eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e8e:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <HAL_RCC_OscConfig+0x244>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fa fec8 	bl	8001c28 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e9c:	f7fa fec4 	bl	8001c28 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e187      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eae:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d036      	beq.n	8006f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d016      	beq.n	8006efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ece:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <HAL_RCC_OscConfig+0x248>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fa fea8 	bl	8001c28 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006edc:	f7fa fea4 	bl	8001c28 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e167      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eee:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <HAL_RCC_OscConfig+0x240>)
 8006ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0x200>
 8006efa:	e01b      	b.n	8006f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <HAL_RCC_OscConfig+0x248>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f02:	f7fa fe91 	bl	8001c28 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f08:	e00e      	b.n	8006f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f0a:	f7fa fe8d 	bl	8001c28 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d907      	bls.n	8006f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e150      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	42470000 	.word	0x42470000
 8006f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f28:	4b88      	ldr	r3, [pc, #544]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1ea      	bne.n	8006f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8097 	beq.w	8007070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f46:	4b81      	ldr	r3, [pc, #516]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10f      	bne.n	8006f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	4b7d      	ldr	r3, [pc, #500]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	4a7c      	ldr	r2, [pc, #496]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f60:	6413      	str	r3, [r2, #64]	; 0x40
 8006f62:	4b7a      	ldr	r3, [pc, #488]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	60bb      	str	r3, [r7, #8]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f72:	4b77      	ldr	r3, [pc, #476]	; (8007150 <HAL_RCC_OscConfig+0x474>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d118      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f7e:	4b74      	ldr	r3, [pc, #464]	; (8007150 <HAL_RCC_OscConfig+0x474>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a73      	ldr	r2, [pc, #460]	; (8007150 <HAL_RCC_OscConfig+0x474>)
 8006f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f8a:	f7fa fe4d 	bl	8001c28 <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f92:	f7fa fe49 	bl	8001c28 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e10c      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa4:	4b6a      	ldr	r3, [pc, #424]	; (8007150 <HAL_RCC_OscConfig+0x474>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d106      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x2ea>
 8006fb8:	4b64      	ldr	r3, [pc, #400]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	4a63      	ldr	r2, [pc, #396]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc4:	e01c      	b.n	8007000 <HAL_RCC_OscConfig+0x324>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d10c      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x30c>
 8006fce:	4b5f      	ldr	r3, [pc, #380]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	4a5e      	ldr	r2, [pc, #376]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fd4:	f043 0304 	orr.w	r3, r3, #4
 8006fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fda:	4b5c      	ldr	r3, [pc, #368]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	4a5b      	ldr	r2, [pc, #364]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe6:	e00b      	b.n	8007000 <HAL_RCC_OscConfig+0x324>
 8006fe8:	4b58      	ldr	r3, [pc, #352]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fec:	4a57      	ldr	r2, [pc, #348]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006fee:	f023 0301 	bic.w	r3, r3, #1
 8006ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff4:	4b55      	ldr	r3, [pc, #340]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	4a54      	ldr	r2, [pc, #336]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8006ffa:	f023 0304 	bic.w	r3, r3, #4
 8006ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007008:	f7fa fe0e 	bl	8001c28 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800700e:	e00a      	b.n	8007026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007010:	f7fa fe0a 	bl	8001c28 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	f241 3288 	movw	r2, #5000	; 0x1388
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e0cb      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007026:	4b49      	ldr	r3, [pc, #292]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0ee      	beq.n	8007010 <HAL_RCC_OscConfig+0x334>
 8007032:	e014      	b.n	800705e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007034:	f7fa fdf8 	bl	8001c28 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800703a:	e00a      	b.n	8007052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800703c:	f7fa fdf4 	bl	8001c28 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e0b5      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007052:	4b3e      	ldr	r3, [pc, #248]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1ee      	bne.n	800703c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d105      	bne.n	8007070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007064:	4b39      	ldr	r3, [pc, #228]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	4a38      	ldr	r2, [pc, #224]	; (800714c <HAL_RCC_OscConfig+0x470>)
 800706a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800706e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80a1 	beq.w	80071bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800707a:	4b34      	ldr	r3, [pc, #208]	; (800714c <HAL_RCC_OscConfig+0x470>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
 8007082:	2b08      	cmp	r3, #8
 8007084:	d05c      	beq.n	8007140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d141      	bne.n	8007112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800708e:	4b31      	ldr	r3, [pc, #196]	; (8007154 <HAL_RCC_OscConfig+0x478>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007094:	f7fa fdc8 	bl	8001c28 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800709c:	f7fa fdc4 	bl	8001c28 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e087      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ae:	4b27      	ldr	r3, [pc, #156]	; (800714c <HAL_RCC_OscConfig+0x470>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f0      	bne.n	800709c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69da      	ldr	r2, [r3, #28]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	019b      	lsls	r3, r3, #6
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	3b01      	subs	r3, #1
 80070d4:	041b      	lsls	r3, r3, #16
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	061b      	lsls	r3, r3, #24
 80070de:	491b      	ldr	r1, [pc, #108]	; (800714c <HAL_RCC_OscConfig+0x470>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070e4:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <HAL_RCC_OscConfig+0x478>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ea:	f7fa fd9d 	bl	8001c28 <HAL_GetTick>
 80070ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f2:	f7fa fd99 	bl	8001c28 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e05c      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0f0      	beq.n	80070f2 <HAL_RCC_OscConfig+0x416>
 8007110:	e054      	b.n	80071bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007112:	4b10      	ldr	r3, [pc, #64]	; (8007154 <HAL_RCC_OscConfig+0x478>)
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007118:	f7fa fd86 	bl	8001c28 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007120:	f7fa fd82 	bl	8001c28 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e045      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007132:	4b06      	ldr	r3, [pc, #24]	; (800714c <HAL_RCC_OscConfig+0x470>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f0      	bne.n	8007120 <HAL_RCC_OscConfig+0x444>
 800713e:	e03d      	b.n	80071bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d107      	bne.n	8007158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e038      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
 800714c:	40023800 	.word	0x40023800
 8007150:	40007000 	.word	0x40007000
 8007154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007158:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <HAL_RCC_OscConfig+0x4ec>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d028      	beq.n	80071b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007170:	429a      	cmp	r2, r3
 8007172:	d121      	bne.n	80071b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800717e:	429a      	cmp	r2, r3
 8007180:	d11a      	bne.n	80071b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007188:	4013      	ands	r3, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800718e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007190:	4293      	cmp	r3, r2
 8007192:	d111      	bne.n	80071b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	3b01      	subs	r3, #1
 80071a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d107      	bne.n	80071b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d001      	beq.n	80071bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40023800 	.word	0x40023800

080071cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e0cc      	b.n	800737a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071e0:	4b68      	ldr	r3, [pc, #416]	; (8007384 <HAL_RCC_ClockConfig+0x1b8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d90c      	bls.n	8007208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ee:	4b65      	ldr	r3, [pc, #404]	; (8007384 <HAL_RCC_ClockConfig+0x1b8>)
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f6:	4b63      	ldr	r3, [pc, #396]	; (8007384 <HAL_RCC_ClockConfig+0x1b8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d001      	beq.n	8007208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e0b8      	b.n	800737a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d020      	beq.n	8007256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007220:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4a58      	ldr	r2, [pc, #352]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800722a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007238:	4b53      	ldr	r3, [pc, #332]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	4a52      	ldr	r2, [pc, #328]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007244:	4b50      	ldr	r3, [pc, #320]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	494d      	ldr	r1, [pc, #308]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 8007252:	4313      	orrs	r3, r2
 8007254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d044      	beq.n	80072ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d107      	bne.n	800727a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726a:	4b47      	ldr	r3, [pc, #284]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d119      	bne.n	80072aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e07f      	b.n	800737a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d003      	beq.n	800728a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007286:	2b03      	cmp	r3, #3
 8007288:	d107      	bne.n	800729a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728a:	4b3f      	ldr	r3, [pc, #252]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e06f      	b.n	800737a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729a:	4b3b      	ldr	r3, [pc, #236]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e067      	b.n	800737a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072aa:	4b37      	ldr	r3, [pc, #220]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f023 0203 	bic.w	r2, r3, #3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	4934      	ldr	r1, [pc, #208]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072bc:	f7fa fcb4 	bl	8001c28 <HAL_GetTick>
 80072c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c2:	e00a      	b.n	80072da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c4:	f7fa fcb0 	bl	8001c28 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e04f      	b.n	800737a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072da:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 020c 	and.w	r2, r3, #12
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d1eb      	bne.n	80072c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <HAL_RCC_ClockConfig+0x1b8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d20c      	bcs.n	8007314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fa:	4b22      	ldr	r3, [pc, #136]	; (8007384 <HAL_RCC_ClockConfig+0x1b8>)
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007302:	4b20      	ldr	r3, [pc, #128]	; (8007384 <HAL_RCC_ClockConfig+0x1b8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d001      	beq.n	8007314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e032      	b.n	800737a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	d008      	beq.n	8007332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4916      	ldr	r1, [pc, #88]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	4313      	orrs	r3, r2
 8007330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800733e:	4b12      	ldr	r3, [pc, #72]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	490e      	ldr	r1, [pc, #56]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800734e:	4313      	orrs	r3, r2
 8007350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007352:	f000 f889 	bl	8007468 <HAL_RCC_GetSysClockFreq>
 8007356:	4602      	mov	r2, r0
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <HAL_RCC_ClockConfig+0x1bc>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	091b      	lsrs	r3, r3, #4
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	490a      	ldr	r1, [pc, #40]	; (800738c <HAL_RCC_ClockConfig+0x1c0>)
 8007364:	5ccb      	ldrb	r3, [r1, r3]
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	4a09      	ldr	r2, [pc, #36]	; (8007390 <HAL_RCC_ClockConfig+0x1c4>)
 800736c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <HAL_RCC_ClockConfig+0x1c8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f7fa fc14 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	40023c00 	.word	0x40023c00
 8007388:	40023800 	.word	0x40023800
 800738c:	0800c914 	.word	0x0800c914
 8007390:	20000004 	.word	0x20000004
 8007394:	20000008 	.word	0x20000008

08007398 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08c      	sub	sp, #48	; 0x30
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d129      	bne.n	80073fe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80073aa:	2300      	movs	r3, #0
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	4b2b      	ldr	r3, [pc, #172]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	4a2a      	ldr	r2, [pc, #168]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	6313      	str	r3, [r2, #48]	; 0x30
 80073ba:	4b28      	ldr	r3, [pc, #160]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80073c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073cc:	2302      	movs	r3, #2
 80073ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073d0:	2303      	movs	r3, #3
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80073d8:	2300      	movs	r3, #0
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80073dc:	f107 031c 	add.w	r3, r7, #28
 80073e0:	4619      	mov	r1, r3
 80073e2:	481f      	ldr	r0, [pc, #124]	; (8007460 <HAL_RCC_MCOConfig+0xc8>)
 80073e4:	f7fc fd94 	bl	8003f10 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80073e8:	4b1c      	ldr	r3, [pc, #112]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	4919      	ldr	r1, [pc, #100]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80073fc:	e029      	b.n	8007452 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	4b16      	ldr	r3, [pc, #88]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	4a15      	ldr	r2, [pc, #84]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 8007408:	f043 0304 	orr.w	r3, r3, #4
 800740c:	6313      	str	r3, [r2, #48]	; 0x30
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800741a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007420:	2302      	movs	r3, #2
 8007422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007424:	2303      	movs	r3, #3
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007428:	2300      	movs	r3, #0
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800742c:	2300      	movs	r3, #0
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007430:	f107 031c 	add.w	r3, r7, #28
 8007434:	4619      	mov	r1, r3
 8007436:	480b      	ldr	r0, [pc, #44]	; (8007464 <HAL_RCC_MCOConfig+0xcc>)
 8007438:	f7fc fd6a 	bl	8003f10 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	00d9      	lsls	r1, r3, #3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	430b      	orrs	r3, r1
 800744c:	4903      	ldr	r1, [pc, #12]	; (800745c <HAL_RCC_MCOConfig+0xc4>)
 800744e:	4313      	orrs	r3, r2
 8007450:	608b      	str	r3, [r1, #8]
}
 8007452:	bf00      	nop
 8007454:	3730      	adds	r7, #48	; 0x30
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	40023800 	.word	0x40023800
 8007460:	40020000 	.word	0x40020000
 8007464:	40020800 	.word	0x40020800

08007468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800746c:	b094      	sub	sp, #80	; 0x50
 800746e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	647b      	str	r3, [r7, #68]	; 0x44
 8007474:	2300      	movs	r3, #0
 8007476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007478:	2300      	movs	r3, #0
 800747a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007480:	4b79      	ldr	r3, [pc, #484]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 030c 	and.w	r3, r3, #12
 8007488:	2b08      	cmp	r3, #8
 800748a:	d00d      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0x40>
 800748c:	2b08      	cmp	r3, #8
 800748e:	f200 80e1 	bhi.w	8007654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_RCC_GetSysClockFreq+0x34>
 8007496:	2b04      	cmp	r3, #4
 8007498:	d003      	beq.n	80074a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800749a:	e0db      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800749c:	4b73      	ldr	r3, [pc, #460]	; (800766c <HAL_RCC_GetSysClockFreq+0x204>)
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80074a0:	e0db      	b.n	800765a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074a2:	4b73      	ldr	r3, [pc, #460]	; (8007670 <HAL_RCC_GetSysClockFreq+0x208>)
 80074a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074a6:	e0d8      	b.n	800765a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074a8:	4b6f      	ldr	r3, [pc, #444]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074b2:	4b6d      	ldr	r3, [pc, #436]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d063      	beq.n	8007586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074be:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	099b      	lsrs	r3, r3, #6
 80074c4:	2200      	movs	r2, #0
 80074c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80074c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	633b      	str	r3, [r7, #48]	; 0x30
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
 80074d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80074da:	4622      	mov	r2, r4
 80074dc:	462b      	mov	r3, r5
 80074de:	f04f 0000 	mov.w	r0, #0
 80074e2:	f04f 0100 	mov.w	r1, #0
 80074e6:	0159      	lsls	r1, r3, #5
 80074e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074ec:	0150      	lsls	r0, r2, #5
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4621      	mov	r1, r4
 80074f4:	1a51      	subs	r1, r2, r1
 80074f6:	6139      	str	r1, [r7, #16]
 80074f8:	4629      	mov	r1, r5
 80074fa:	eb63 0301 	sbc.w	r3, r3, r1
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800750c:	4659      	mov	r1, fp
 800750e:	018b      	lsls	r3, r1, #6
 8007510:	4651      	mov	r1, sl
 8007512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007516:	4651      	mov	r1, sl
 8007518:	018a      	lsls	r2, r1, #6
 800751a:	4651      	mov	r1, sl
 800751c:	ebb2 0801 	subs.w	r8, r2, r1
 8007520:	4659      	mov	r1, fp
 8007522:	eb63 0901 	sbc.w	r9, r3, r1
 8007526:	f04f 0200 	mov.w	r2, #0
 800752a:	f04f 0300 	mov.w	r3, #0
 800752e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800753a:	4690      	mov	r8, r2
 800753c:	4699      	mov	r9, r3
 800753e:	4623      	mov	r3, r4
 8007540:	eb18 0303 	adds.w	r3, r8, r3
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	462b      	mov	r3, r5
 8007548:	eb49 0303 	adc.w	r3, r9, r3
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800755a:	4629      	mov	r1, r5
 800755c:	024b      	lsls	r3, r1, #9
 800755e:	4621      	mov	r1, r4
 8007560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007564:	4621      	mov	r1, r4
 8007566:	024a      	lsls	r2, r1, #9
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756e:	2200      	movs	r2, #0
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
 8007572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007578:	f7f8 fe26 	bl	80001c8 <__aeabi_uldivmod>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4613      	mov	r3, r2
 8007582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007584:	e058      	b.n	8007638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007586:	4b38      	ldr	r3, [pc, #224]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	099b      	lsrs	r3, r3, #6
 800758c:	2200      	movs	r2, #0
 800758e:	4618      	mov	r0, r3
 8007590:	4611      	mov	r1, r2
 8007592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007596:	623b      	str	r3, [r7, #32]
 8007598:	2300      	movs	r3, #0
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
 800759c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	f04f 0000 	mov.w	r0, #0
 80075a8:	f04f 0100 	mov.w	r1, #0
 80075ac:	0159      	lsls	r1, r3, #5
 80075ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075b2:	0150      	lsls	r0, r2, #5
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4641      	mov	r1, r8
 80075ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80075be:	4649      	mov	r1, r9
 80075c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075d8:	ebb2 040a 	subs.w	r4, r2, sl
 80075dc:	eb63 050b 	sbc.w	r5, r3, fp
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	00eb      	lsls	r3, r5, #3
 80075ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ee:	00e2      	lsls	r2, r4, #3
 80075f0:	4614      	mov	r4, r2
 80075f2:	461d      	mov	r5, r3
 80075f4:	4643      	mov	r3, r8
 80075f6:	18e3      	adds	r3, r4, r3
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	464b      	mov	r3, r9
 80075fc:	eb45 0303 	adc.w	r3, r5, r3
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800760e:	4629      	mov	r1, r5
 8007610:	028b      	lsls	r3, r1, #10
 8007612:	4621      	mov	r1, r4
 8007614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007618:	4621      	mov	r1, r4
 800761a:	028a      	lsls	r2, r1, #10
 800761c:	4610      	mov	r0, r2
 800761e:	4619      	mov	r1, r3
 8007620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007622:	2200      	movs	r2, #0
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	61fa      	str	r2, [r7, #28]
 8007628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800762c:	f7f8 fdcc 	bl	80001c8 <__aeabi_uldivmod>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4613      	mov	r3, r2
 8007636:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	3301      	adds	r3, #1
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800764a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007652:	e002      	b.n	800765a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <HAL_RCC_GetSysClockFreq+0x204>)
 8007656:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800765a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800765c:	4618      	mov	r0, r3
 800765e:	3750      	adds	r7, #80	; 0x50
 8007660:	46bd      	mov	sp, r7
 8007662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007666:	bf00      	nop
 8007668:	40023800 	.word	0x40023800
 800766c:	00f42400 	.word	0x00f42400
 8007670:	007a1200 	.word	0x007a1200

08007674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <HAL_RCC_GetHCLKFreq+0x14>)
 800767a:	681b      	ldr	r3, [r3, #0]
}
 800767c:	4618      	mov	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000004 	.word	0x20000004

0800768c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007690:	f7ff fff0 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	0a9b      	lsrs	r3, r3, #10
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4903      	ldr	r1, [pc, #12]	; (80076b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40023800 	.word	0x40023800
 80076b0:	0800c924 	.word	0x0800c924

080076b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076b8:	f7ff ffdc 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 80076bc:	4602      	mov	r2, r0
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	0b5b      	lsrs	r3, r3, #13
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	4903      	ldr	r1, [pc, #12]	; (80076d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076ca:	5ccb      	ldrb	r3, [r1, r3]
 80076cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	40023800 	.word	0x40023800
 80076d8:	0800c924 	.word	0x0800c924

080076dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e07b      	b.n	80077e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d108      	bne.n	8007708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fe:	d009      	beq.n	8007714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	61da      	str	r2, [r3, #28]
 8007706:	e005      	b.n	8007714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7f9 fd5e 	bl	80011f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007798:	ea42 0103 	orr.w	r1, r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	0c1b      	lsrs	r3, r3, #16
 80077b2:	f003 0104 	and.w	r1, r3, #4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	f003 0210 	and.w	r2, r3, #16
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e038      	b.n	8007876 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7f9 fec9 	bl	80015b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3308      	adds	r3, #8
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f001 f829 	bl	8008880 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	461a      	mov	r2, r3
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	f001 f88b 	bl	8008954 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6858      	ldr	r0, [r3, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	f001 f8b8 	bl	80089c0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	6892      	ldr	r2, [r2, #8]
 8007858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	6892      	ldr	r2, [r2, #8]
 8007864:	f041 0101 	orr.w	r1, r1, #1
 8007868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e097      	b.n	80079c2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7f9 fd0a 	bl	80012c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c2:	f023 0307 	bic.w	r3, r3, #7
 80078c6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f000 f87a 	bl	80079cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007900:	f023 0303 	bic.w	r3, r3, #3
 8007904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	4313      	orrs	r3, r2
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800791e:	f023 030c 	bic.w	r3, r3, #12
 8007922:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800792a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800792e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	4313      	orrs	r3, r2
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	011a      	lsls	r2, r3, #4
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	031b      	lsls	r3, r3, #12
 800794e:	4313      	orrs	r3, r2
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800795c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007964:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	4313      	orrs	r3, r2
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a40      	ldr	r2, [pc, #256]	; (8007ae0 <TIM_Base_SetConfig+0x114>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d013      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ea:	d00f      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a3d      	ldr	r2, [pc, #244]	; (8007ae4 <TIM_Base_SetConfig+0x118>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00b      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a3c      	ldr	r2, [pc, #240]	; (8007ae8 <TIM_Base_SetConfig+0x11c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d007      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a3b      	ldr	r2, [pc, #236]	; (8007aec <TIM_Base_SetConfig+0x120>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a3a      	ldr	r2, [pc, #232]	; (8007af0 <TIM_Base_SetConfig+0x124>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d108      	bne.n	8007a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2f      	ldr	r2, [pc, #188]	; (8007ae0 <TIM_Base_SetConfig+0x114>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d02b      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a2c:	d027      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a2c      	ldr	r2, [pc, #176]	; (8007ae4 <TIM_Base_SetConfig+0x118>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d023      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2b      	ldr	r2, [pc, #172]	; (8007ae8 <TIM_Base_SetConfig+0x11c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01f      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2a      	ldr	r2, [pc, #168]	; (8007aec <TIM_Base_SetConfig+0x120>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d01b      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a29      	ldr	r2, [pc, #164]	; (8007af0 <TIM_Base_SetConfig+0x124>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d017      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a28      	ldr	r2, [pc, #160]	; (8007af4 <TIM_Base_SetConfig+0x128>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a27      	ldr	r2, [pc, #156]	; (8007af8 <TIM_Base_SetConfig+0x12c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00f      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a26      	ldr	r2, [pc, #152]	; (8007afc <TIM_Base_SetConfig+0x130>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00b      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a25      	ldr	r2, [pc, #148]	; (8007b00 <TIM_Base_SetConfig+0x134>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d007      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a24      	ldr	r2, [pc, #144]	; (8007b04 <TIM_Base_SetConfig+0x138>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d003      	beq.n	8007a7e <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a23      	ldr	r2, [pc, #140]	; (8007b08 <TIM_Base_SetConfig+0x13c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d108      	bne.n	8007a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a0a      	ldr	r2, [pc, #40]	; (8007ae0 <TIM_Base_SetConfig+0x114>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <TIM_Base_SetConfig+0xf8>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a0c      	ldr	r2, [pc, #48]	; (8007af0 <TIM_Base_SetConfig+0x124>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d103      	bne.n	8007acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	615a      	str	r2, [r3, #20]
}
 8007ad2:	bf00      	nop
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	40000c00 	.word	0x40000c00
 8007af0:	40010400 	.word	0x40010400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40014400 	.word	0x40014400
 8007afc:	40014800 	.word	0x40014800
 8007b00:	40001800 	.word	0x40001800
 8007b04:	40001c00 	.word	0x40001c00
 8007b08:	40002000 	.word	0x40002000

08007b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e05a      	b.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a21      	ldr	r2, [pc, #132]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d022      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b70:	d01d      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1d      	ldr	r2, [pc, #116]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d018      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1a      	ldr	r2, [pc, #104]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a17      	ldr	r2, [pc, #92]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10c      	bne.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40001800 	.word	0x40001800

08007c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e03f      	b.n	8007c96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7f9 fb90 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2224      	movs	r2, #36	; 0x24
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fba5 	bl	8008398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695a      	ldr	r2, [r3, #20]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b08a      	sub	sp, #40	; 0x28
 8007ca2:	af02      	add	r7, sp, #8
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	603b      	str	r3, [r7, #0]
 8007caa:	4613      	mov	r3, r2
 8007cac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d17c      	bne.n	8007db8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_UART_Transmit+0x2c>
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e075      	b.n	8007dba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_UART_Transmit+0x3e>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e06e      	b.n	8007dba <HAL_UART_Transmit+0x11c>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2221      	movs	r2, #33	; 0x21
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cf2:	f7f9 ff99 	bl	8001c28 <HAL_GetTick>
 8007cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	88fa      	ldrh	r2, [r7, #6]
 8007cfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0c:	d108      	bne.n	8007d20 <HAL_UART_Transmit+0x82>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d104      	bne.n	8007d20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	e003      	b.n	8007d28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d30:	e02a      	b.n	8007d88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f992 	bl	8008066 <UART_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e036      	b.n	8007dba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	3302      	adds	r3, #2
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	e007      	b.n	8007d7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	3301      	adds	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1cf      	bne.n	8007d32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2140      	movs	r1, #64	; 0x40
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f962 	bl	8008066 <UART_WaitOnFlagUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e006      	b.n	8007dba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e000      	b.n	8007dba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007db8:	2302      	movs	r3, #2
  }
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d11d      	bne.n	8007e18 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <HAL_UART_Receive_DMA+0x26>
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e016      	b.n	8007e1a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <HAL_UART_Receive_DMA+0x38>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e00f      	b.n	8007e1a <HAL_UART_Receive_DMA+0x58>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f998 	bl	8008144 <UART_Start_Receive_DMA>
 8007e14:	4603      	mov	r3, r0
 8007e16:	e000      	b.n	8007e1a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e18:	2302      	movs	r3, #2
  }
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b09c      	sub	sp, #112	; 0x70
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d172      	bne.n	8007f78 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	2200      	movs	r2, #0
 8007e96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	330c      	adds	r3, #12
 8007eb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007eb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007eba:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ebe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e5      	bne.n	8007e98 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3314      	adds	r3, #20
 8007ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3314      	adds	r3, #20
 8007eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007eec:	647a      	str	r2, [r7, #68]	; 0x44
 8007eee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e5      	bne.n	8007ecc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3314      	adds	r3, #20
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f16:	663b      	str	r3, [r7, #96]	; 0x60
 8007f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3314      	adds	r3, #20
 8007f1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f20:	633a      	str	r2, [r7, #48]	; 0x30
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e5      	bne.n	8007f00 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d119      	bne.n	8007f78 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0310 	bic.w	r3, r3, #16
 8007f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f64:	61fa      	str	r2, [r7, #28]
 8007f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	69b9      	ldr	r1, [r7, #24]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	617b      	str	r3, [r7, #20]
   return(result);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e5      	bne.n	8007f44 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d106      	bne.n	8007f8e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f84:	4619      	mov	r1, r3
 8007f86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f88:	f7ff ff69 	bl	8007e5e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f8c:	e002      	b.n	8007f94 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007f8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f90:	f7ff ff47 	bl	8007e22 <HAL_UART_RxCpltCallback>
}
 8007f94:	bf00      	nop
 8007f96:	3770      	adds	r7, #112	; 0x70
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d108      	bne.n	8007fc4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff ff4e 	bl	8007e5e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fc2:	e002      	b.n	8007fca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff ff36 	bl	8007e36 <HAL_UART_RxHalfCpltCallback>
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fee:	2b80      	cmp	r3, #128	; 0x80
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	2300      	movne	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b21      	cmp	r3, #33	; 0x21
 8008004:	d108      	bne.n	8008018 <UART_DMAError+0x46>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d005      	beq.n	8008018 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008012:	68b8      	ldr	r0, [r7, #8]
 8008014:	f000 f934 	bl	8008280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	bf0c      	ite	eq
 8008026:	2301      	moveq	r3, #1
 8008028:	2300      	movne	r3, #0
 800802a:	b2db      	uxtb	r3, r3
 800802c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b22      	cmp	r3, #34	; 0x22
 8008038:	d108      	bne.n	800804c <UART_DMAError+0x7a>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008046:	68b8      	ldr	r0, [r7, #8]
 8008048:	f000 f942 	bl	80082d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	f043 0210 	orr.w	r2, r3, #16
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008058:	68b8      	ldr	r0, [r7, #8]
 800805a:	f7ff fef6 	bl	8007e4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b090      	sub	sp, #64	; 0x40
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	603b      	str	r3, [r7, #0]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008076:	e050      	b.n	800811a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d04c      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <UART_WaitOnFlagUntilTimeout+0x30>
 8008086:	f7f9 fdcf 	bl	8001c28 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008092:	429a      	cmp	r2, r3
 8008094:	d241      	bcs.n	800811a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	330c      	adds	r3, #12
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	330c      	adds	r3, #12
 80080b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080b6:	637a      	str	r2, [r7, #52]	; 0x34
 80080b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e5      	bne.n	8008096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3314      	adds	r3, #20
 80080d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	613b      	str	r3, [r7, #16]
   return(result);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3314      	adds	r3, #20
 80080e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ea:	623a      	str	r2, [r7, #32]
 80080ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	69f9      	ldr	r1, [r7, #28]
 80080f0:	6a3a      	ldr	r2, [r7, #32]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e5      	bne.n	80080ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2220      	movs	r2, #32
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e00f      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4013      	ands	r3, r2
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	bf0c      	ite	eq
 800812a:	2301      	moveq	r3, #1
 800812c:	2300      	movne	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	461a      	mov	r2, r3
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	429a      	cmp	r2, r3
 8008136:	d09f      	beq.n	8008078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3740      	adds	r7, #64	; 0x40
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b098      	sub	sp, #96	; 0x60
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2222      	movs	r2, #34	; 0x22
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	4a40      	ldr	r2, [pc, #256]	; (8008274 <UART_Start_Receive_DMA+0x130>)
 8008172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	4a3f      	ldr	r2, [pc, #252]	; (8008278 <UART_Start_Receive_DMA+0x134>)
 800817a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	4a3e      	ldr	r2, [pc, #248]	; (800827c <UART_Start_Receive_DMA+0x138>)
 8008182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008188:	2200      	movs	r2, #0
 800818a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800818c:	f107 0308 	add.w	r3, r7, #8
 8008190:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	f7fa f9d8 	bl	8002558 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	613b      	str	r3, [r7, #16]
 80081bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d019      	beq.n	8008202 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	330c      	adds	r3, #12
 80081d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	330c      	adds	r3, #12
 80081ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80081f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80081f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e5      	bne.n	80081ce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3314      	adds	r3, #20
 8008208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	657b      	str	r3, [r7, #84]	; 0x54
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3314      	adds	r3, #20
 8008220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008222:	63ba      	str	r2, [r7, #56]	; 0x38
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e5      	bne.n	8008202 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	617b      	str	r3, [r7, #20]
   return(result);
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824c:	653b      	str	r3, [r7, #80]	; 0x50
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3314      	adds	r3, #20
 8008254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008256:	627a      	str	r2, [r7, #36]	; 0x24
 8008258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6a39      	ldr	r1, [r7, #32]
 800825c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	61fb      	str	r3, [r7, #28]
   return(result);
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3760      	adds	r7, #96	; 0x60
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	08007e77 	.word	0x08007e77
 8008278:	08007f9d 	.word	0x08007f9d
 800827c:	08007fd3 	.word	0x08007fd3

08008280 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b089      	sub	sp, #36	; 0x24
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60bb      	str	r3, [r7, #8]
   return(result);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	61ba      	str	r2, [r7, #24]
 80082aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6979      	ldr	r1, [r7, #20]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	613b      	str	r3, [r7, #16]
   return(result);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80082c4:	bf00      	nop
 80082c6:	3724      	adds	r7, #36	; 0x24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b095      	sub	sp, #84	; 0x54
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	330c      	adds	r3, #12
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e2:	e853 3f00 	ldrex	r3, [r3]
 80082e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	330c      	adds	r3, #12
 80082f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082f8:	643a      	str	r2, [r7, #64]	; 0x40
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008300:	e841 2300 	strex	r3, r2, [r1]
 8008304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e5      	bne.n	80082d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3314      	adds	r3, #20
 8008312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	61fb      	str	r3, [r7, #28]
   return(result);
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f023 0301 	bic.w	r3, r3, #1
 8008322:	64bb      	str	r3, [r7, #72]	; 0x48
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3314      	adds	r3, #20
 800832a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800832c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e5      	bne.n	800830c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	2b01      	cmp	r3, #1
 8008346:	d119      	bne.n	800837c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	60bb      	str	r3, [r7, #8]
   return(result);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f023 0310 	bic.w	r3, r3, #16
 800835e:	647b      	str	r3, [r7, #68]	; 0x44
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	330c      	adds	r3, #12
 8008366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008368:	61ba      	str	r2, [r7, #24]
 800836a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6979      	ldr	r1, [r7, #20]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	613b      	str	r3, [r7, #16]
   return(result);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e5      	bne.n	8008348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2220      	movs	r2, #32
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800838a:	bf00      	nop
 800838c:	3754      	adds	r7, #84	; 0x54
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
	...

08008398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800839c:	b0c0      	sub	sp, #256	; 0x100
 800839e:	af00      	add	r7, sp, #0
 80083a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b4:	68d9      	ldr	r1, [r3, #12]
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	ea40 0301 	orr.w	r3, r0, r1
 80083c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	431a      	orrs	r2, r3
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	4313      	orrs	r3, r2
 80083e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80083f0:	f021 010c 	bic.w	r1, r1, #12
 80083f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083fe:	430b      	orrs	r3, r1
 8008400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800840e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008412:	6999      	ldr	r1, [r3, #24]
 8008414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	ea40 0301 	orr.w	r3, r0, r1
 800841e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	4b8f      	ldr	r3, [pc, #572]	; (8008664 <UART_SetConfig+0x2cc>)
 8008428:	429a      	cmp	r2, r3
 800842a:	d005      	beq.n	8008438 <UART_SetConfig+0xa0>
 800842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	4b8d      	ldr	r3, [pc, #564]	; (8008668 <UART_SetConfig+0x2d0>)
 8008434:	429a      	cmp	r2, r3
 8008436:	d104      	bne.n	8008442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008438:	f7ff f93c 	bl	80076b4 <HAL_RCC_GetPCLK2Freq>
 800843c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008440:	e003      	b.n	800844a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008442:	f7ff f923 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 8008446:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800844a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008454:	f040 810c 	bne.w	8008670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800845c:	2200      	movs	r2, #0
 800845e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008462:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800846a:	4622      	mov	r2, r4
 800846c:	462b      	mov	r3, r5
 800846e:	1891      	adds	r1, r2, r2
 8008470:	65b9      	str	r1, [r7, #88]	; 0x58
 8008472:	415b      	adcs	r3, r3
 8008474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800847a:	4621      	mov	r1, r4
 800847c:	eb12 0801 	adds.w	r8, r2, r1
 8008480:	4629      	mov	r1, r5
 8008482:	eb43 0901 	adc.w	r9, r3, r1
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800849a:	4690      	mov	r8, r2
 800849c:	4699      	mov	r9, r3
 800849e:	4623      	mov	r3, r4
 80084a0:	eb18 0303 	adds.w	r3, r8, r3
 80084a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084a8:	462b      	mov	r3, r5
 80084aa:	eb49 0303 	adc.w	r3, r9, r3
 80084ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80084c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80084c6:	460b      	mov	r3, r1
 80084c8:	18db      	adds	r3, r3, r3
 80084ca:	653b      	str	r3, [r7, #80]	; 0x50
 80084cc:	4613      	mov	r3, r2
 80084ce:	eb42 0303 	adc.w	r3, r2, r3
 80084d2:	657b      	str	r3, [r7, #84]	; 0x54
 80084d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80084dc:	f7f7 fe74 	bl	80001c8 <__aeabi_uldivmod>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	4b61      	ldr	r3, [pc, #388]	; (800866c <UART_SetConfig+0x2d4>)
 80084e6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	011c      	lsls	r4, r3, #4
 80084ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80084fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008500:	4642      	mov	r2, r8
 8008502:	464b      	mov	r3, r9
 8008504:	1891      	adds	r1, r2, r2
 8008506:	64b9      	str	r1, [r7, #72]	; 0x48
 8008508:	415b      	adcs	r3, r3
 800850a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008510:	4641      	mov	r1, r8
 8008512:	eb12 0a01 	adds.w	sl, r2, r1
 8008516:	4649      	mov	r1, r9
 8008518:	eb43 0b01 	adc.w	fp, r3, r1
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800852c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008530:	4692      	mov	sl, r2
 8008532:	469b      	mov	fp, r3
 8008534:	4643      	mov	r3, r8
 8008536:	eb1a 0303 	adds.w	r3, sl, r3
 800853a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800853e:	464b      	mov	r3, r9
 8008540:	eb4b 0303 	adc.w	r3, fp, r3
 8008544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008554:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800855c:	460b      	mov	r3, r1
 800855e:	18db      	adds	r3, r3, r3
 8008560:	643b      	str	r3, [r7, #64]	; 0x40
 8008562:	4613      	mov	r3, r2
 8008564:	eb42 0303 	adc.w	r3, r2, r3
 8008568:	647b      	str	r3, [r7, #68]	; 0x44
 800856a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800856e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008572:	f7f7 fe29 	bl	80001c8 <__aeabi_uldivmod>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4611      	mov	r1, r2
 800857c:	4b3b      	ldr	r3, [pc, #236]	; (800866c <UART_SetConfig+0x2d4>)
 800857e:	fba3 2301 	umull	r2, r3, r3, r1
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	2264      	movs	r2, #100	; 0x64
 8008586:	fb02 f303 	mul.w	r3, r2, r3
 800858a:	1acb      	subs	r3, r1, r3
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008592:	4b36      	ldr	r3, [pc, #216]	; (800866c <UART_SetConfig+0x2d4>)
 8008594:	fba3 2302 	umull	r2, r3, r3, r2
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085a0:	441c      	add	r4, r3
 80085a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80085b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	1891      	adds	r1, r2, r2
 80085ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80085bc:	415b      	adcs	r3, r3
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085c4:	4641      	mov	r1, r8
 80085c6:	1851      	adds	r1, r2, r1
 80085c8:	6339      	str	r1, [r7, #48]	; 0x30
 80085ca:	4649      	mov	r1, r9
 80085cc:	414b      	adcs	r3, r1
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80085dc:	4659      	mov	r1, fp
 80085de:	00cb      	lsls	r3, r1, #3
 80085e0:	4651      	mov	r1, sl
 80085e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085e6:	4651      	mov	r1, sl
 80085e8:	00ca      	lsls	r2, r1, #3
 80085ea:	4610      	mov	r0, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	4642      	mov	r2, r8
 80085f2:	189b      	adds	r3, r3, r2
 80085f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085f8:	464b      	mov	r3, r9
 80085fa:	460a      	mov	r2, r1
 80085fc:	eb42 0303 	adc.w	r3, r2, r3
 8008600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008610:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008618:	460b      	mov	r3, r1
 800861a:	18db      	adds	r3, r3, r3
 800861c:	62bb      	str	r3, [r7, #40]	; 0x28
 800861e:	4613      	mov	r3, r2
 8008620:	eb42 0303 	adc.w	r3, r2, r3
 8008624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800862a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800862e:	f7f7 fdcb 	bl	80001c8 <__aeabi_uldivmod>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4b0d      	ldr	r3, [pc, #52]	; (800866c <UART_SetConfig+0x2d4>)
 8008638:	fba3 1302 	umull	r1, r3, r3, r2
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	2164      	movs	r1, #100	; 0x64
 8008640:	fb01 f303 	mul.w	r3, r1, r3
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	3332      	adds	r3, #50	; 0x32
 800864a:	4a08      	ldr	r2, [pc, #32]	; (800866c <UART_SetConfig+0x2d4>)
 800864c:	fba2 2303 	umull	r2, r3, r2, r3
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	f003 0207 	and.w	r2, r3, #7
 8008656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4422      	add	r2, r4
 800865e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008660:	e105      	b.n	800886e <UART_SetConfig+0x4d6>
 8008662:	bf00      	nop
 8008664:	40011000 	.word	0x40011000
 8008668:	40011400 	.word	0x40011400
 800866c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008674:	2200      	movs	r2, #0
 8008676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800867a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800867e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008682:	4642      	mov	r2, r8
 8008684:	464b      	mov	r3, r9
 8008686:	1891      	adds	r1, r2, r2
 8008688:	6239      	str	r1, [r7, #32]
 800868a:	415b      	adcs	r3, r3
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008692:	4641      	mov	r1, r8
 8008694:	1854      	adds	r4, r2, r1
 8008696:	4649      	mov	r1, r9
 8008698:	eb43 0501 	adc.w	r5, r3, r1
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	f04f 0300 	mov.w	r3, #0
 80086a4:	00eb      	lsls	r3, r5, #3
 80086a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086aa:	00e2      	lsls	r2, r4, #3
 80086ac:	4614      	mov	r4, r2
 80086ae:	461d      	mov	r5, r3
 80086b0:	4643      	mov	r3, r8
 80086b2:	18e3      	adds	r3, r4, r3
 80086b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086b8:	464b      	mov	r3, r9
 80086ba:	eb45 0303 	adc.w	r3, r5, r3
 80086be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80086de:	4629      	mov	r1, r5
 80086e0:	008b      	lsls	r3, r1, #2
 80086e2:	4621      	mov	r1, r4
 80086e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086e8:	4621      	mov	r1, r4
 80086ea:	008a      	lsls	r2, r1, #2
 80086ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80086f0:	f7f7 fd6a 	bl	80001c8 <__aeabi_uldivmod>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4b60      	ldr	r3, [pc, #384]	; (800887c <UART_SetConfig+0x4e4>)
 80086fa:	fba3 2302 	umull	r2, r3, r3, r2
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	011c      	lsls	r4, r3, #4
 8008702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008706:	2200      	movs	r2, #0
 8008708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800870c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008714:	4642      	mov	r2, r8
 8008716:	464b      	mov	r3, r9
 8008718:	1891      	adds	r1, r2, r2
 800871a:	61b9      	str	r1, [r7, #24]
 800871c:	415b      	adcs	r3, r3
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008724:	4641      	mov	r1, r8
 8008726:	1851      	adds	r1, r2, r1
 8008728:	6139      	str	r1, [r7, #16]
 800872a:	4649      	mov	r1, r9
 800872c:	414b      	adcs	r3, r1
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800873c:	4659      	mov	r1, fp
 800873e:	00cb      	lsls	r3, r1, #3
 8008740:	4651      	mov	r1, sl
 8008742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008746:	4651      	mov	r1, sl
 8008748:	00ca      	lsls	r2, r1, #3
 800874a:	4610      	mov	r0, r2
 800874c:	4619      	mov	r1, r3
 800874e:	4603      	mov	r3, r0
 8008750:	4642      	mov	r2, r8
 8008752:	189b      	adds	r3, r3, r2
 8008754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008758:	464b      	mov	r3, r9
 800875a:	460a      	mov	r2, r1
 800875c:	eb42 0303 	adc.w	r3, r2, r3
 8008760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	67bb      	str	r3, [r7, #120]	; 0x78
 800876e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800877c:	4649      	mov	r1, r9
 800877e:	008b      	lsls	r3, r1, #2
 8008780:	4641      	mov	r1, r8
 8008782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008786:	4641      	mov	r1, r8
 8008788:	008a      	lsls	r2, r1, #2
 800878a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800878e:	f7f7 fd1b 	bl	80001c8 <__aeabi_uldivmod>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4b39      	ldr	r3, [pc, #228]	; (800887c <UART_SetConfig+0x4e4>)
 8008798:	fba3 1302 	umull	r1, r3, r3, r2
 800879c:	095b      	lsrs	r3, r3, #5
 800879e:	2164      	movs	r1, #100	; 0x64
 80087a0:	fb01 f303 	mul.w	r3, r1, r3
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	3332      	adds	r3, #50	; 0x32
 80087aa:	4a34      	ldr	r2, [pc, #208]	; (800887c <UART_SetConfig+0x4e4>)
 80087ac:	fba2 2303 	umull	r2, r3, r2, r3
 80087b0:	095b      	lsrs	r3, r3, #5
 80087b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087b6:	441c      	add	r4, r3
 80087b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087bc:	2200      	movs	r2, #0
 80087be:	673b      	str	r3, [r7, #112]	; 0x70
 80087c0:	677a      	str	r2, [r7, #116]	; 0x74
 80087c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80087c6:	4642      	mov	r2, r8
 80087c8:	464b      	mov	r3, r9
 80087ca:	1891      	adds	r1, r2, r2
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	415b      	adcs	r3, r3
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087d6:	4641      	mov	r1, r8
 80087d8:	1851      	adds	r1, r2, r1
 80087da:	6039      	str	r1, [r7, #0]
 80087dc:	4649      	mov	r1, r9
 80087de:	414b      	adcs	r3, r1
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087ee:	4659      	mov	r1, fp
 80087f0:	00cb      	lsls	r3, r1, #3
 80087f2:	4651      	mov	r1, sl
 80087f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087f8:	4651      	mov	r1, sl
 80087fa:	00ca      	lsls	r2, r1, #3
 80087fc:	4610      	mov	r0, r2
 80087fe:	4619      	mov	r1, r3
 8008800:	4603      	mov	r3, r0
 8008802:	4642      	mov	r2, r8
 8008804:	189b      	adds	r3, r3, r2
 8008806:	66bb      	str	r3, [r7, #104]	; 0x68
 8008808:	464b      	mov	r3, r9
 800880a:	460a      	mov	r2, r1
 800880c:	eb42 0303 	adc.w	r3, r2, r3
 8008810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	663b      	str	r3, [r7, #96]	; 0x60
 800881c:	667a      	str	r2, [r7, #100]	; 0x64
 800881e:	f04f 0200 	mov.w	r2, #0
 8008822:	f04f 0300 	mov.w	r3, #0
 8008826:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800882a:	4649      	mov	r1, r9
 800882c:	008b      	lsls	r3, r1, #2
 800882e:	4641      	mov	r1, r8
 8008830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008834:	4641      	mov	r1, r8
 8008836:	008a      	lsls	r2, r1, #2
 8008838:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800883c:	f7f7 fcc4 	bl	80001c8 <__aeabi_uldivmod>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4b0d      	ldr	r3, [pc, #52]	; (800887c <UART_SetConfig+0x4e4>)
 8008846:	fba3 1302 	umull	r1, r3, r3, r2
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	2164      	movs	r1, #100	; 0x64
 800884e:	fb01 f303 	mul.w	r3, r1, r3
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	3332      	adds	r3, #50	; 0x32
 8008858:	4a08      	ldr	r2, [pc, #32]	; (800887c <UART_SetConfig+0x4e4>)
 800885a:	fba2 2303 	umull	r2, r3, r2, r3
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	f003 020f 	and.w	r2, r3, #15
 8008864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4422      	add	r2, r4
 800886c:	609a      	str	r2, [r3, #8]
}
 800886e:	bf00      	nop
 8008870:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008874:	46bd      	mov	sp, r7
 8008876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800887a:	bf00      	nop
 800887c:	51eb851f 	.word	0x51eb851f

08008880 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	f023 0101 	bic.w	r1, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d102      	bne.n	80088b0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	617b      	str	r3, [r7, #20]
 80088ae:	e001      	b.n	80088b4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80088c0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80088c6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80088cc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80088d2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80088d8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80088de:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80088e4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80088ea:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80088f0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800890e:	4b10      	ldr	r3, [pc, #64]	; (8008950 <FSMC_NORSRAM_Init+0xd0>)
 8008910:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008918:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008920:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	43db      	mvns	r3, r3
 8008930:	ea02 0103 	and.w	r1, r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	4319      	orrs	r1, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	0008fb7f 	.word	0x0008fb7f

08008954 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	431a      	orrs	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	431a      	orrs	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	041b      	lsls	r3, r3, #16
 8008988:	431a      	orrs	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	3b01      	subs	r3, #1
 8008990:	051b      	lsls	r3, r3, #20
 8008992:	431a      	orrs	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	3b02      	subs	r3, #2
 800899a:	061b      	lsls	r3, r3, #24
 800899c:	431a      	orrs	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	3201      	adds	r2, #1
 80089a8:	4319      	orrs	r1, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089d4:	d11d      	bne.n	8008a12 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80089e0:	4013      	ands	r3, r2
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	6811      	ldr	r1, [r2, #0]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	6852      	ldr	r2, [r2, #4]
 80089ea:	0112      	lsls	r2, r2, #4
 80089ec:	4311      	orrs	r1, r2
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	6892      	ldr	r2, [r2, #8]
 80089f2:	0212      	lsls	r2, r2, #8
 80089f4:	4311      	orrs	r1, r2
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	6992      	ldr	r2, [r2, #24]
 80089fa:	4311      	orrs	r1, r2
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	68d2      	ldr	r2, [r2, #12]
 8008a00:	0412      	lsls	r2, r2, #16
 8008a02:	430a      	orrs	r2, r1
 8008a04:	ea43 0102 	orr.w	r1, r3, r2
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a10:	e005      	b.n	8008a1e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	cff00000 	.word	0xcff00000

08008a30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a30:	b084      	sub	sp, #16
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	f107 001c 	add.w	r0, r7, #28
 8008a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d122      	bne.n	8008a8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d105      	bne.n	8008a82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f9c0 	bl	8008e08 <USB_CoreReset>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
 8008a8c:	e01a      	b.n	8008ac4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9b4 	bl	8008e08 <USB_CoreReset>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ab6:	e005      	b.n	8008ac4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d10b      	bne.n	8008ae2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f043 0206 	orr.w	r2, r3, #6
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f043 0220 	orr.w	r2, r3, #32
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aee:	b004      	add	sp, #16
 8008af0:	4770      	bx	lr

08008af2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f043 0201 	orr.w	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f023 0201 	bic.w	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b52:	78fb      	ldrb	r3, [r7, #3]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d115      	bne.n	8008b84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b64:	2001      	movs	r0, #1
 8008b66:	f7f9 f86b 	bl	8001c40 <HAL_Delay>
      ms++;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f93a 	bl	8008dea <USB_GetMode>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d01e      	beq.n	8008bba <USB_SetCurrentMode+0x84>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b31      	cmp	r3, #49	; 0x31
 8008b80:	d9f0      	bls.n	8008b64 <USB_SetCurrentMode+0x2e>
 8008b82:	e01a      	b.n	8008bba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d115      	bne.n	8008bb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b96:	2001      	movs	r0, #1
 8008b98:	f7f9 f852 	bl	8001c40 <HAL_Delay>
      ms++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f921 	bl	8008dea <USB_GetMode>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <USB_SetCurrentMode+0x84>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b31      	cmp	r3, #49	; 0x31
 8008bb2:	d9f0      	bls.n	8008b96 <USB_SetCurrentMode+0x60>
 8008bb4:	e001      	b.n	8008bba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e005      	b.n	8008bc6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b32      	cmp	r3, #50	; 0x32
 8008bbe:	d101      	bne.n	8008bc4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <USB_FlushTxFifo+0x64>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d901      	bls.n	8008bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e01b      	b.n	8008c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	daf2      	bge.n	8008bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	019b      	lsls	r3, r3, #6
 8008c00:	f043 0220 	orr.w	r2, r3, #32
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4a08      	ldr	r2, [pc, #32]	; (8008c34 <USB_FlushTxFifo+0x64>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d901      	bls.n	8008c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e006      	b.n	8008c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b20      	cmp	r3, #32
 8008c24:	d0f0      	beq.n	8008c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	00030d40 	.word	0x00030d40

08008c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4a11      	ldr	r2, [pc, #68]	; (8008c94 <USB_FlushRxFifo+0x5c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d901      	bls.n	8008c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e018      	b.n	8008c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	daf2      	bge.n	8008c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2210      	movs	r2, #16
 8008c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4a08      	ldr	r2, [pc, #32]	; (8008c94 <USB_FlushRxFifo+0x5c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d901      	bls.n	8008c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e006      	b.n	8008c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f003 0310 	and.w	r3, r3, #16
 8008c82:	2b10      	cmp	r3, #16
 8008c84:	d0f0      	beq.n	8008c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	00030d40 	.word	0x00030d40

08008c98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b089      	sub	sp, #36	; 0x24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	71fb      	strb	r3, [r7, #7]
 8008caa:	4613      	mov	r3, r2
 8008cac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d123      	bne.n	8008d06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cbe:	88bb      	ldrh	r3, [r7, #4]
 8008cc0:	3303      	adds	r3, #3
 8008cc2:	089b      	lsrs	r3, r3, #2
 8008cc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	61bb      	str	r3, [r7, #24]
 8008cca:	e018      	b.n	8008cfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	031a      	lsls	r2, r3, #12
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd8:	461a      	mov	r2, r3
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	61bb      	str	r3, [r7, #24]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d3e2      	bcc.n	8008ccc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3724      	adds	r7, #36	; 0x24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b08b      	sub	sp, #44	; 0x2c
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	089b      	lsrs	r3, r3, #2
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	623b      	str	r3, [r7, #32]
 8008d3e:	e014      	b.n	8008d6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	3301      	adds	r3, #1
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	3301      	adds	r3, #1
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	3301      	adds	r3, #1
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	3301      	adds	r3, #1
 8008d68:	623b      	str	r3, [r7, #32]
 8008d6a:	6a3a      	ldr	r2, [r7, #32]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d3e6      	bcc.n	8008d40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d72:	8bfb      	ldrh	r3, [r7, #30]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01e      	beq.n	8008db6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d82:	461a      	mov	r2, r3
 8008d84:	f107 0310 	add.w	r3, r7, #16
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	fa22 f303 	lsr.w	r3, r2, r3
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	701a      	strb	r2, [r3, #0]
      i++;
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	3301      	adds	r3, #1
 8008da2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	3301      	adds	r3, #1
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008daa:	8bfb      	ldrh	r3, [r7, #30]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008db0:	8bfb      	ldrh	r3, [r7, #30]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1ea      	bne.n	8008d8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	372c      	adds	r7, #44	; 0x2c
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	f003 0301 	and.w	r3, r3, #1
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <USB_CoreReset+0x64>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d901      	bls.n	8008e26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e01b      	b.n	8008e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	daf2      	bge.n	8008e14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	f043 0201 	orr.w	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3301      	adds	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <USB_CoreReset+0x64>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d901      	bls.n	8008e50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e006      	b.n	8008e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d0f0      	beq.n	8008e3e <USB_CoreReset+0x36>

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	00030d40 	.word	0x00030d40

08008e70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e70:	b084      	sub	sp, #16
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b086      	sub	sp, #24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e90:	461a      	mov	r2, r3
 8008e92:	2300      	movs	r3, #0
 8008e94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d018      	beq.n	8008ef8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d10a      	bne.n	8008ee2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eda:	f043 0304 	orr.w	r3, r3, #4
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	e014      	b.n	8008f0c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ef0:	f023 0304 	bic.w	r3, r3, #4
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	e009      	b.n	8008f0c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f06:	f023 0304 	bic.w	r3, r3, #4
 8008f0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f0c:	2110      	movs	r1, #16
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fe5e 	bl	8008bd0 <USB_FlushTxFifo>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fe8a 	bl	8008c38 <USB_FlushRxFifo>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f2e:	2300      	movs	r3, #0
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	e015      	b.n	8008f60 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f40:	461a      	mov	r2, r3
 8008f42:	f04f 33ff 	mov.w	r3, #4294967295
 8008f46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f54:	461a      	mov	r2, r3
 8008f56:	2300      	movs	r3, #0
 8008f58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d3e5      	bcc.n	8008f34 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a13      	ldr	r2, [pc, #76]	; (8008fdc <USB_HostInit+0x16c>)
 8008f8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a13      	ldr	r2, [pc, #76]	; (8008fe0 <USB_HostInit+0x170>)
 8008f94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008f98:	e009      	b.n	8008fae <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2280      	movs	r2, #128	; 0x80
 8008f9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a10      	ldr	r2, [pc, #64]	; (8008fe4 <USB_HostInit+0x174>)
 8008fa4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a0f      	ldr	r2, [pc, #60]	; (8008fe8 <USB_HostInit+0x178>)
 8008faa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d105      	bne.n	8008fc0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f043 0210 	orr.w	r2, r3, #16
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699a      	ldr	r2, [r3, #24]
 8008fc4:	4b09      	ldr	r3, [pc, #36]	; (8008fec <USB_HostInit+0x17c>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd8:	b004      	add	sp, #16
 8008fda:	4770      	bx	lr
 8008fdc:	01000200 	.word	0x01000200
 8008fe0:	00e00300 	.word	0x00e00300
 8008fe4:	00600080 	.word	0x00600080
 8008fe8:	004000e0 	.word	0x004000e0
 8008fec:	a3200008 	.word	0xa3200008

08008ff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	68f9      	ldr	r1, [r7, #12]
 8009024:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009028:	4313      	orrs	r3, r2
 800902a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d107      	bne.n	8009042 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009038:	461a      	mov	r2, r3
 800903a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800903e:	6053      	str	r3, [r2, #4]
 8009040:	e009      	b.n	8009056 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009042:	78fb      	ldrb	r3, [r7, #3]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d106      	bne.n	8009056 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800904e:	461a      	mov	r2, r3
 8009050:	f241 7370 	movw	r3, #6000	; 0x1770
 8009054:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009084:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800908e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009092:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009094:	2064      	movs	r0, #100	; 0x64
 8009096:	f7f8 fdd3 	bl	8001c40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80090a8:	200a      	movs	r0, #10
 80090aa:	f7f8 fdc9 	bl	8001c40 <HAL_Delay>

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80090dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <USB_DriveVbus+0x44>
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d106      	bne.n	80090fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	d109      	bne.n	800911c <USB_DriveVbus+0x64>
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800911a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800912a:	b480      	push	{r7}
 800912c:	b085      	sub	sp, #20
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	0c5b      	lsrs	r3, r3, #17
 8009148:	f003 0303 	and.w	r3, r3, #3
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	b29b      	uxth	r3, r3
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	4608      	mov	r0, r1
 8009186:	4611      	mov	r1, r2
 8009188:	461a      	mov	r2, r3
 800918a:	4603      	mov	r3, r0
 800918c:	70fb      	strb	r3, [r7, #3]
 800918e:	460b      	mov	r3, r1
 8009190:	70bb      	strb	r3, [r7, #2]
 8009192:	4613      	mov	r3, r2
 8009194:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091aa:	461a      	mov	r2, r3
 80091ac:	f04f 33ff 	mov.w	r3, #4294967295
 80091b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80091b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d87e      	bhi.n	80092b8 <USB_HC_Init+0x13c>
 80091ba:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <USB_HC_Init+0x44>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	080091d1 	.word	0x080091d1
 80091c4:	0800927b 	.word	0x0800927b
 80091c8:	080091d1 	.word	0x080091d1
 80091cc:	0800923d 	.word	0x0800923d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091dc:	461a      	mov	r2, r3
 80091de:	f240 439d 	movw	r3, #1181	; 0x49d
 80091e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80091e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	da10      	bge.n	800920e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	0151      	lsls	r1, r2, #5
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	440a      	add	r2, r1
 8009202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800920a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800920c:	e057      	b.n	80092be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009216:	2b00      	cmp	r3, #0
 8009218:	d051      	beq.n	80092be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	4413      	add	r3, r2
 8009222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	78fa      	ldrb	r2, [r7, #3]
 800922a:	0151      	lsls	r1, r2, #5
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	440a      	add	r2, r1
 8009230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009234:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009238:	60d3      	str	r3, [r2, #12]
      break;
 800923a:	e040      	b.n	80092be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	4413      	add	r3, r2
 8009244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009248:	461a      	mov	r2, r3
 800924a:	f240 639d 	movw	r3, #1693	; 0x69d
 800924e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da34      	bge.n	80092c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	4413      	add	r3, r2
 8009260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	440a      	add	r2, r1
 800926e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009276:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009278:	e023      	b.n	80092c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009286:	461a      	mov	r2, r3
 8009288:	f240 2325 	movw	r3, #549	; 0x225
 800928c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800928e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009292:	2b00      	cmp	r3, #0
 8009294:	da17      	bge.n	80092c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009296:	78fb      	ldrb	r3, [r7, #3]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	4413      	add	r3, r2
 800929e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80092b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80092b6:	e006      	b.n	80092c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	77fb      	strb	r3, [r7, #31]
      break;
 80092bc:	e004      	b.n	80092c8 <USB_HC_Init+0x14c>
      break;
 80092be:	bf00      	nop
 80092c0:	e002      	b.n	80092c8 <USB_HC_Init+0x14c>
      break;
 80092c2:	bf00      	nop
 80092c4:	e000      	b.n	80092c8 <USB_HC_Init+0x14c>
      break;
 80092c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092e2:	f043 0302 	orr.w	r3, r3, #2
 80092e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ee:	699a      	ldr	r2, [r3, #24]
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	2101      	movs	r1, #1
 80092f8:	fa01 f303 	lsl.w	r3, r1, r3
 80092fc:	6939      	ldr	r1, [r7, #16]
 80092fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009302:	4313      	orrs	r3, r2
 8009304:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009312:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009316:	2b00      	cmp	r3, #0
 8009318:	da03      	bge.n	8009322 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800931a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931e:	61bb      	str	r3, [r7, #24]
 8009320:	e001      	b.n	8009326 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff feff 	bl	800912a <USB_GetHostSpeed>
 800932c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800932e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009332:	2b02      	cmp	r3, #2
 8009334:	d106      	bne.n	8009344 <USB_HC_Init+0x1c8>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d003      	beq.n	8009344 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800933c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e001      	b.n	8009348 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009348:	787b      	ldrb	r3, [r7, #1]
 800934a:	059b      	lsls	r3, r3, #22
 800934c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009350:	78bb      	ldrb	r3, [r7, #2]
 8009352:	02db      	lsls	r3, r3, #11
 8009354:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009358:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800935a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800935e:	049b      	lsls	r3, r3, #18
 8009360:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009364:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009366:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009368:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800936c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	0159      	lsls	r1, r3, #5
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	440b      	add	r3, r1
 800937a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009384:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009386:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800938a:	2b03      	cmp	r3, #3
 800938c:	d003      	beq.n	8009396 <USB_HC_Init+0x21a>
 800938e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009392:	2b01      	cmp	r3, #1
 8009394:	d10f      	bne.n	80093b6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	4413      	add	r3, r2
 800939e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80093b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	; 0x30
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80093d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d02d      	beq.n	8009446 <USB_HC_StartXfer+0x86>
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	791b      	ldrb	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d129      	bne.n	8009446 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d117      	bne.n	8009428 <USB_HC_StartXfer+0x68>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	79db      	ldrb	r3, [r3, #7]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <USB_HC_StartXfer+0x48>
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	79db      	ldrb	r3, [r3, #7]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d10f      	bne.n	8009428 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	440a      	add	r2, r1
 800941e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009426:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10b      	bne.n	8009446 <USB_HC_StartXfer+0x86>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	795b      	ldrb	r3, [r3, #5]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d107      	bne.n	8009446 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	785b      	ldrb	r3, [r3, #1]
 800943a:	4619      	mov	r1, r3
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 fa0f 	bl	8009860 <USB_DoPing>
      return HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	e0f8      	b.n	8009638 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d018      	beq.n	8009480 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	8912      	ldrh	r2, [r2, #8]
 8009456:	4413      	add	r3, r2
 8009458:	3b01      	subs	r3, #1
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	8912      	ldrh	r2, [r2, #8]
 800945e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009462:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009464:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009466:	8b7b      	ldrh	r3, [r7, #26]
 8009468:	429a      	cmp	r2, r3
 800946a:	d90b      	bls.n	8009484 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800946c:	8b7b      	ldrh	r3, [r7, #26]
 800946e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	8912      	ldrh	r2, [r2, #8]
 8009476:	fb03 f202 	mul.w	r2, r3, r2
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	611a      	str	r2, [r3, #16]
 800947e:	e001      	b.n	8009484 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009480:	2301      	movs	r3, #1
 8009482:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	78db      	ldrb	r3, [r3, #3]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d007      	beq.n	800949c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800948c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	8912      	ldrh	r2, [r2, #8]
 8009492:	fb03 f202 	mul.w	r2, r3, r2
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	611a      	str	r2, [r3, #16]
 800949a:	e003      	b.n	80094a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	695a      	ldr	r2, [r3, #20]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094ae:	04d9      	lsls	r1, r3, #19
 80094b0:	4b63      	ldr	r3, [pc, #396]	; (8009640 <USB_HC_StartXfer+0x280>)
 80094b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	7a9b      	ldrb	r3, [r3, #10]
 80094ba:	075b      	lsls	r3, r3, #29
 80094bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094c0:	69f9      	ldr	r1, [r7, #28]
 80094c2:	0148      	lsls	r0, r1, #5
 80094c4:	6a39      	ldr	r1, [r7, #32]
 80094c6:	4401      	add	r1, r0
 80094c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	68d9      	ldr	r1, [r3, #12]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e6:	460a      	mov	r2, r1
 80094e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bf0c      	ite	eq
 80094fa:	2301      	moveq	r3, #1
 80094fc:	2300      	movne	r3, #0
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	4413      	add	r3, r2
 800950a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	6a3a      	ldr	r2, [r7, #32]
 8009516:	440a      	add	r2, r1
 8009518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800951c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009520:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	4413      	add	r3, r2
 800952a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	7e7b      	ldrb	r3, [r7, #25]
 8009532:	075b      	lsls	r3, r3, #29
 8009534:	69f9      	ldr	r1, [r7, #28]
 8009536:	0148      	lsls	r0, r1, #5
 8009538:	6a39      	ldr	r1, [r7, #32]
 800953a:	4401      	add	r1, r0
 800953c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009540:	4313      	orrs	r3, r2
 8009542:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	4413      	add	r3, r2
 800954c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800955a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	78db      	ldrb	r3, [r3, #3]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	e003      	b.n	8009576 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009574:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800957c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	4413      	add	r3, r2
 8009586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800958a:	461a      	mov	r2, r3
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	e04e      	b.n	8009638 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	78db      	ldrb	r3, [r3, #3]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d149      	bne.n	8009636 <USB_HC_StartXfer+0x276>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d045      	beq.n	8009636 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	79db      	ldrb	r3, [r3, #7]
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d830      	bhi.n	8009614 <USB_HC_StartXfer+0x254>
 80095b2:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <USB_HC_StartXfer+0x1f8>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	080095c9 	.word	0x080095c9
 80095bc:	080095ed 	.word	0x080095ed
 80095c0:	080095c9 	.word	0x080095c9
 80095c4:	080095ed 	.word	0x080095ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	3303      	adds	r3, #3
 80095ce:	089b      	lsrs	r3, r3, #2
 80095d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80095d2:	8afa      	ldrh	r2, [r7, #22]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	b29b      	uxth	r3, r3
 80095da:	429a      	cmp	r2, r3
 80095dc:	d91c      	bls.n	8009618 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	f043 0220 	orr.w	r2, r3, #32
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80095ea:	e015      	b.n	8009618 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	3303      	adds	r3, #3
 80095f2:	089b      	lsrs	r3, r3, #2
 80095f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80095f6:	8afa      	ldrh	r2, [r7, #22]
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	b29b      	uxth	r3, r3
 8009602:	429a      	cmp	r2, r3
 8009604:	d90a      	bls.n	800961c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	619a      	str	r2, [r3, #24]
        }
        break;
 8009612:	e003      	b.n	800961c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009614:	bf00      	nop
 8009616:	e002      	b.n	800961e <USB_HC_StartXfer+0x25e>
        break;
 8009618:	bf00      	nop
 800961a:	e000      	b.n	800961e <USB_HC_StartXfer+0x25e>
        break;
 800961c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	68d9      	ldr	r1, [r3, #12]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	785a      	ldrb	r2, [r3, #1]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	b29b      	uxth	r3, r3
 800962c:	2000      	movs	r0, #0
 800962e:	9000      	str	r0, [sp, #0]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f7ff fb31 	bl	8008c98 <USB_WritePacket>
  }

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3728      	adds	r7, #40	; 0x28
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	1ff80000 	.word	0x1ff80000

08009644 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	b29b      	uxth	r3, r3
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009666:	b480      	push	{r7}
 8009668:	b089      	sub	sp, #36	; 0x24
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	0c9b      	lsrs	r3, r3, #18
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	4413      	add	r3, r2
 800969c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	0fdb      	lsrs	r3, r3, #31
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d104      	bne.n	80096c0 <USB_HC_Halt+0x5a>
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	e0c8      	b.n	8009852 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <USB_HC_Halt+0x66>
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d163      	bne.n	8009794 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	0151      	lsls	r1, r2, #5
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	440a      	add	r2, r1
 80096e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f003 0320 	and.w	r3, r3, #32
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f040 80ab 	bne.w	8009850 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d133      	bne.n	800976e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	440a      	add	r2, r1
 800971c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009724:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	4413      	add	r3, r2
 800972e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	0151      	lsls	r1, r2, #5
 8009738:	69fa      	ldr	r2, [r7, #28]
 800973a:	440a      	add	r2, r1
 800973c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009744:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3301      	adds	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009752:	d81d      	bhi.n	8009790 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800976a:	d0ec      	beq.n	8009746 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800976c:	e070      	b.n	8009850 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	4413      	add	r3, r2
 8009776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	0151      	lsls	r1, r2, #5
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	440a      	add	r2, r1
 8009784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800978c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800978e:	e05f      	b.n	8009850 <USB_HC_Halt+0x1ea>
            break;
 8009790:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009792:	e05d      	b.n	8009850 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d133      	bne.n	800982c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009802:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009810:	d81d      	bhi.n	800984e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4413      	add	r3, r2
 800981a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009828:	d0ec      	beq.n	8009804 <USB_HC_Halt+0x19e>
 800982a:	e011      	b.n	8009850 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	440a      	add	r2, r1
 8009842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	e000      	b.n	8009850 <USB_HC_Halt+0x1ea>
          break;
 800984e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3724      	adds	r7, #36	; 0x24
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
	...

08009860 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009874:	2301      	movs	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	04da      	lsls	r2, r3, #19
 800987c:	4b15      	ldr	r3, [pc, #84]	; (80098d4 <USB_DoPing+0x74>)
 800987e:	4013      	ands	r3, r2
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	440a      	add	r2, r1
 8009888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800988c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009890:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098be:	461a      	mov	r2, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	371c      	adds	r7, #28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	1ff80000 	.word	0x1ff80000

080098d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff f911 	bl	8008b14 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098f2:	2110      	movs	r1, #16
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff f96b 	bl	8008bd0 <USB_FlushTxFifo>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff f997 	bl	8008c38 <USB_FlushRxFifo>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009914:	2300      	movs	r3, #0
 8009916:	61bb      	str	r3, [r7, #24]
 8009918:	e01f      	b.n	800995a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	4413      	add	r3, r2
 8009922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009930:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009938:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009940:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800994e:	461a      	mov	r2, r3
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	3301      	adds	r3, #1
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	2b0f      	cmp	r3, #15
 800995e:	d9dc      	bls.n	800991a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009960:	2300      	movs	r3, #0
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	e034      	b.n	80099d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	4413      	add	r3, r2
 800996e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800997c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009984:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800998c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	4413      	add	r3, r2
 8009996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999a:	461a      	mov	r2, r3
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099ac:	d80c      	bhi.n	80099c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099c4:	d0ec      	beq.n	80099a0 <USB_StopHost+0xc8>
 80099c6:	e000      	b.n	80099ca <USB_StopHost+0xf2>
        break;
 80099c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	3301      	adds	r3, #1
 80099ce:	61bb      	str	r3, [r7, #24]
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d9c7      	bls.n	8009966 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099dc:	461a      	mov	r2, r3
 80099de:	f04f 33ff 	mov.w	r3, #4294967295
 80099e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff f880 	bl	8008af2 <USB_EnableGlobalInt>

  return ret;
 80099f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80099fc:	b590      	push	{r4, r7, lr}
 80099fe:	b089      	sub	sp, #36	; 0x24
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a04:	2301      	movs	r3, #1
 8009a06:	2202      	movs	r2, #2
 8009a08:	2102      	movs	r1, #2
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fc66 	bl	800a2dc <USBH_FindInterface>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2bff      	cmp	r3, #255	; 0xff
 8009a18:	d002      	beq.n	8009a20 <USBH_CDC_InterfaceInit+0x24>
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d901      	bls.n	8009a24 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a20:	2302      	movs	r3, #2
 8009a22:	e13d      	b.n	8009ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fc3b 	bl	800a2a4 <USBH_SelectInterface>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a38:	2302      	movs	r3, #2
 8009a3a:	e131      	b.n	8009ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a42:	2050      	movs	r0, #80	; 0x50
 8009a44:	f002 fafa 	bl	800c03c <malloc>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	e11f      	b.n	8009ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a60:	2250      	movs	r2, #80	; 0x50
 8009a62:	2100      	movs	r1, #0
 8009a64:	68b8      	ldr	r0, [r7, #8]
 8009a66:	f002 faf9 	bl	800c05c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	211a      	movs	r1, #26
 8009a70:	fb01 f303 	mul.w	r3, r1, r3
 8009a74:	4413      	add	r3, r2
 8009a76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	b25b      	sxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da15      	bge.n	8009aae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	211a      	movs	r1, #26
 8009a88:	fb01 f303 	mul.w	r3, r1, r3
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	211a      	movs	r1, #26
 8009a9e:	fb01 f303 	mul.w	r3, r1, r3
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009aa8:	881a      	ldrh	r2, [r3, #0]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	785b      	ldrb	r3, [r3, #1]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 ff2c 	bl	800b912 <USBH_AllocPipe>
 8009aba:	4603      	mov	r3, r0
 8009abc:	461a      	mov	r2, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	7819      	ldrb	r1, [r3, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	7858      	ldrb	r0, [r3, #1]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	8952      	ldrh	r2, [r2, #10]
 8009ada:	9202      	str	r2, [sp, #8]
 8009adc:	2203      	movs	r2, #3
 8009ade:	9201      	str	r2, [sp, #4]
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	4623      	mov	r3, r4
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 fee4 	bl	800b8b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2200      	movs	r2, #0
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f002 f9f3 	bl	800bee0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009afa:	2300      	movs	r3, #0
 8009afc:	2200      	movs	r2, #0
 8009afe:	210a      	movs	r1, #10
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fbeb 	bl	800a2dc <USBH_FindInterface>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	2bff      	cmp	r3, #255	; 0xff
 8009b0e:	d002      	beq.n	8009b16 <USBH_CDC_InterfaceInit+0x11a>
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d901      	bls.n	8009b1a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b16:	2302      	movs	r3, #2
 8009b18:	e0c2      	b.n	8009ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	211a      	movs	r1, #26
 8009b20:	fb01 f303 	mul.w	r3, r1, r3
 8009b24:	4413      	add	r3, r2
 8009b26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b25b      	sxtb	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da16      	bge.n	8009b60 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	211a      	movs	r1, #26
 8009b38:	fb01 f303 	mul.w	r3, r1, r3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b42:	781a      	ldrb	r2, [r3, #0]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	211a      	movs	r1, #26
 8009b4e:	fb01 f303 	mul.w	r3, r1, r3
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b58:	881a      	ldrh	r2, [r3, #0]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	835a      	strh	r2, [r3, #26]
 8009b5e:	e015      	b.n	8009b8c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	211a      	movs	r1, #26
 8009b66:	fb01 f303 	mul.w	r3, r1, r3
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b70:	781a      	ldrb	r2, [r3, #0]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	211a      	movs	r1, #26
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b86:	881a      	ldrh	r2, [r3, #0]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	211a      	movs	r1, #26
 8009b92:	fb01 f303 	mul.w	r3, r1, r3
 8009b96:	4413      	add	r3, r2
 8009b98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b25b      	sxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	da16      	bge.n	8009bd2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	211a      	movs	r1, #26
 8009baa:	fb01 f303 	mul.w	r3, r1, r3
 8009bae:	4413      	add	r3, r2
 8009bb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bb4:	781a      	ldrb	r2, [r3, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	211a      	movs	r1, #26
 8009bc0:	fb01 f303 	mul.w	r3, r1, r3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009bca:	881a      	ldrh	r2, [r3, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	835a      	strh	r2, [r3, #26]
 8009bd0:	e015      	b.n	8009bfe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	211a      	movs	r1, #26
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	4413      	add	r3, r2
 8009bde:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	211a      	movs	r1, #26
 8009bee:	fb01 f303 	mul.w	r3, r1, r3
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009bf8:	881a      	ldrh	r2, [r3, #0]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	7b9b      	ldrb	r3, [r3, #14]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 fe84 	bl	800b912 <USBH_AllocPipe>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	7bdb      	ldrb	r3, [r3, #15]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 fe7a 	bl	800b912 <USBH_AllocPipe>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	461a      	mov	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	7b59      	ldrb	r1, [r3, #13]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	7b98      	ldrb	r0, [r3, #14]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	8b12      	ldrh	r2, [r2, #24]
 8009c3e:	9202      	str	r2, [sp, #8]
 8009c40:	2202      	movs	r2, #2
 8009c42:	9201      	str	r2, [sp, #4]
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	4623      	mov	r3, r4
 8009c48:	4602      	mov	r2, r0
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 fe32 	bl	800b8b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	7b19      	ldrb	r1, [r3, #12]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	7bd8      	ldrb	r0, [r3, #15]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	8b52      	ldrh	r2, [r2, #26]
 8009c68:	9202      	str	r2, [sp, #8]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	9201      	str	r2, [sp, #4]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	4623      	mov	r3, r4
 8009c72:	4602      	mov	r2, r0
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f001 fe1d 	bl	800b8b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	7b5b      	ldrb	r3, [r3, #13]
 8009c86:	2200      	movs	r2, #0
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f002 f928 	bl	800bee0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	7b1b      	ldrb	r3, [r3, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f002 f921 	bl	800bee0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd90      	pop	{r4, r7, pc}

08009ca8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00e      	beq.n	8009ce0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 fe12 	bl	800b8f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 fe3d 	bl	800b954 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	7b1b      	ldrb	r3, [r3, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00e      	beq.n	8009d06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	7b1b      	ldrb	r3, [r3, #12]
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 fdff 	bl	800b8f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	7b1b      	ldrb	r3, [r3, #12]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 fe2a 	bl	800b954 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	7b5b      	ldrb	r3, [r3, #13]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00e      	beq.n	8009d2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	7b5b      	ldrb	r3, [r3, #13]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 fdec 	bl	800b8f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	7b5b      	ldrb	r3, [r3, #13]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 fe17 	bl	800b954 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f002 f983 	bl	800c04c <free>
    phost->pActiveClass->pData = 0U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3340      	adds	r3, #64	; 0x40
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f8b1 	bl	8009eda <GetLineCoding>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009d7c:	7afb      	ldrb	r3, [r7, #11]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d105      	bne.n	8009d8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d88:	2102      	movs	r1, #2
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009da0:	2301      	movs	r3, #1
 8009da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	d877      	bhi.n	8009eac <USBH_CDC_Process+0x114>
 8009dbc:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <USBH_CDC_Process+0x2c>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009dd9 	.word	0x08009dd9
 8009dc8:	08009ddf 	.word	0x08009ddf
 8009dcc:	08009e0f 	.word	0x08009e0f
 8009dd0:	08009e83 	.word	0x08009e83
 8009dd4:	08009e91 	.word	0x08009e91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73fb      	strb	r3, [r7, #15]
      break;
 8009ddc:	e06d      	b.n	8009eba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f897 	bl	8009f18 <SetLineCoding>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2202      	movs	r2, #2
 8009df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009dfc:	e058      	b.n	8009eb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d055      	beq.n	8009eb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2204      	movs	r2, #4
 8009e08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e0c:	e050      	b.n	8009eb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	3340      	adds	r3, #64	; 0x40
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f860 	bl	8009eda <GetLineCoding>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d126      	bne.n	8009e72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e36:	791b      	ldrb	r3, [r3, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d13b      	bne.n	8009eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d133      	bne.n	8009eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d12b      	bne.n	8009eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d124      	bne.n	8009eb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f958 	bl	800a120 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e70:	e020      	b.n	8009eb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d01d      	beq.n	8009eb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e80:	e018      	b.n	8009eb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f867 	bl	8009f56 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f8da 	bl	800a042 <CDC_ProcessReception>
      break;
 8009e8e:	e014      	b.n	8009eba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009e90:	2100      	movs	r1, #0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 ffef 	bl	800ae76 <USBH_ClrFeature>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009eaa:	e005      	b.n	8009eb8 <USBH_CDC_Process+0x120>

    default:
      break;
 8009eac:	bf00      	nop
 8009eae:	e004      	b.n	8009eba <USBH_CDC_Process+0x122>
      break;
 8009eb0:	bf00      	nop
 8009eb2:	e002      	b.n	8009eba <USBH_CDC_Process+0x122>
      break;
 8009eb4:	bf00      	nop
 8009eb6:	e000      	b.n	8009eba <USBH_CDC_Process+0x122>
      break;
 8009eb8:	bf00      	nop

  }

  return status;
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b082      	sub	sp, #8
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	22a1      	movs	r2, #161	; 0xa1
 8009ee8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2221      	movs	r2, #33	; 0x21
 8009eee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2207      	movs	r2, #7
 8009f00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2207      	movs	r2, #7
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 fa81 	bl	800b410 <USBH_CtlReq>
 8009f0e:	4603      	mov	r3, r0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2221      	movs	r2, #33	; 0x21
 8009f26:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2207      	movs	r2, #7
 8009f3e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2207      	movs	r2, #7
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fa62 	bl	800b410 <USBH_CtlReq>
 8009f4c:	4603      	mov	r3, r0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b086      	sub	sp, #24
 8009f5a:	af02      	add	r7, sp, #8
 8009f5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d002      	beq.n	8009f7c <CDC_ProcessTransmission+0x26>
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d023      	beq.n	8009fc2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009f7a:	e05e      	b.n	800a03a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	8b12      	ldrh	r2, [r2, #24]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d90b      	bls.n	8009fa0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	69d9      	ldr	r1, [r3, #28]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	8b1a      	ldrh	r2, [r3, #24]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	7b5b      	ldrb	r3, [r3, #13]
 8009f94:	2001      	movs	r0, #1
 8009f96:	9000      	str	r0, [sp, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fc48 	bl	800b82e <USBH_BulkSendData>
 8009f9e:	e00b      	b.n	8009fb8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	7b5b      	ldrb	r3, [r3, #13]
 8009fae:	2001      	movs	r0, #1
 8009fb0:	9000      	str	r0, [sp, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 fc3b 	bl	800b82e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009fc0:	e03b      	b.n	800a03a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	7b5b      	ldrb	r3, [r3, #13]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 ff5f 	bl	800be8c <USBH_LL_GetURBState>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d128      	bne.n	800a02a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	8b12      	ldrh	r2, [r2, #24]
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d90e      	bls.n	800a002 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	8b12      	ldrh	r2, [r2, #24]
 8009fec:	1a9a      	subs	r2, r3, r2
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	8b12      	ldrh	r2, [r2, #24]
 8009ffa:	441a      	add	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	61da      	str	r2, [r3, #28]
 800a000:	e002      	b.n	800a008 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d004      	beq.n	800a01a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a018:	e00e      	b.n	800a038 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f868 	bl	800a0f8 <USBH_CDC_TransmitCallback>
      break;
 800a028:	e006      	b.n	800a038 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d103      	bne.n	800a038 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a038:	bf00      	nop
  }
}
 800a03a:	bf00      	nop
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b086      	sub	sp, #24
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a054:	2300      	movs	r3, #0
 800a056:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d002      	beq.n	800a068 <CDC_ProcessReception+0x26>
 800a062:	2b04      	cmp	r3, #4
 800a064:	d00e      	beq.n	800a084 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a066:	e043      	b.n	800a0f0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	6a19      	ldr	r1, [r3, #32]
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	8b5a      	ldrh	r2, [r3, #26]
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	7b1b      	ldrb	r3, [r3, #12]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 fbff 	bl	800b878 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2204      	movs	r2, #4
 800a07e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a082:	e035      	b.n	800a0f0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	7b1b      	ldrb	r3, [r3, #12]
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 fefe 	bl	800be8c <USBH_LL_GetURBState>
 800a090:	4603      	mov	r3, r0
 800a092:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a094:	7cfb      	ldrb	r3, [r7, #19]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d129      	bne.n	800a0ee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	7b1b      	ldrb	r3, [r3, #12]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f001 fe61 	bl	800bd68 <USBH_LL_GetLastXferSize>
 800a0a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d016      	beq.n	800a0e0 <CDC_ProcessReception+0x9e>
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	8b5b      	ldrh	r3, [r3, #26]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d910      	bls.n	800a0e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	1ad2      	subs	r2, r2, r3
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6a1a      	ldr	r2, [r3, #32]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	441a      	add	r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2203      	movs	r2, #3
 800a0da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a0de:	e006      	b.n	800a0ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f80f 	bl	800a10c <USBH_CDC_ReceiveCallback>
      break;
 800a0ee:	bf00      	nop
  }
}
 800a0f0:	bf00      	nop
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	4613      	mov	r3, r2
 800a140:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a148:	2302      	movs	r3, #2
 800a14a:	e029      	b.n	800a1a0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	79fa      	ldrb	r2, [r7, #7]
 800a150:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 f81f 	bl	800a1a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d003      	beq.n	800a198 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f001 fd31 	bl	800bc00 <USBH_LL_Init>

  return USBH_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e009      	b.n	800a1ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	33e0      	adds	r3, #224	; 0xe0
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b0f      	cmp	r3, #15
 800a1d2:	d9f2      	bls.n	800a1ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	e009      	b.n	800a1ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f4:	d3f1      	bcc.n	800a1da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2240      	movs	r2, #64	; 0x40
 800a21a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d016      	beq.n	800a292 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10e      	bne.n	800a28c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a274:	1c59      	adds	r1, r3, #1
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	33de      	adds	r3, #222	; 0xde
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]
 800a28a:	e004      	b.n	800a296 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a28c:	2302      	movs	r3, #2
 800a28e:	73fb      	strb	r3, [r7, #15]
 800a290:	e001      	b.n	800a296 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a292:	2302      	movs	r3, #2
 800a294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a296:	7bfb      	ldrb	r3, [r7, #15]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d204      	bcs.n	800a2ca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a2c8:	e001      	b.n	800a2ce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	70fb      	strb	r3, [r7, #3]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70bb      	strb	r3, [r7, #2]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a304:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a306:	e025      	b.n	800a354 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	221a      	movs	r2, #26
 800a30c:	fb02 f303 	mul.w	r3, r2, r3
 800a310:	3308      	adds	r3, #8
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	4413      	add	r3, r2
 800a316:	3302      	adds	r3, #2
 800a318:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	795b      	ldrb	r3, [r3, #5]
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	429a      	cmp	r2, r3
 800a322:	d002      	beq.n	800a32a <USBH_FindInterface+0x4e>
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	2bff      	cmp	r3, #255	; 0xff
 800a328:	d111      	bne.n	800a34e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a32e:	78ba      	ldrb	r2, [r7, #2]
 800a330:	429a      	cmp	r2, r3
 800a332:	d002      	beq.n	800a33a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a334:	78bb      	ldrb	r3, [r7, #2]
 800a336:	2bff      	cmp	r3, #255	; 0xff
 800a338:	d109      	bne.n	800a34e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a33e:	787a      	ldrb	r2, [r7, #1]
 800a340:	429a      	cmp	r2, r3
 800a342:	d002      	beq.n	800a34a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a344:	787b      	ldrb	r3, [r7, #1]
 800a346:	2bff      	cmp	r3, #255	; 0xff
 800a348:	d101      	bne.n	800a34e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	e006      	b.n	800a35c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
 800a350:	3301      	adds	r3, #1
 800a352:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d9d6      	bls.n	800a308 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a35a:	23ff      	movs	r3, #255	; 0xff
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fc81 	bl	800bc78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a376:	2101      	movs	r1, #1
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 fd9a 	bl	800beb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af04      	add	r7, sp, #16
 800a38e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a390:	2302      	movs	r3, #2
 800a392:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d102      	bne.n	800a3aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2203      	movs	r2, #3
 800a3a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b0b      	cmp	r3, #11
 800a3b2:	f200 81be 	bhi.w	800a732 <USBH_Process+0x3aa>
 800a3b6:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <USBH_Process+0x34>)
 800a3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3bc:	0800a3ed 	.word	0x0800a3ed
 800a3c0:	0800a41f 	.word	0x0800a41f
 800a3c4:	0800a487 	.word	0x0800a487
 800a3c8:	0800a6cd 	.word	0x0800a6cd
 800a3cc:	0800a733 	.word	0x0800a733
 800a3d0:	0800a52b 	.word	0x0800a52b
 800a3d4:	0800a673 	.word	0x0800a673
 800a3d8:	0800a561 	.word	0x0800a561
 800a3dc:	0800a581 	.word	0x0800a581
 800a3e0:	0800a5a1 	.word	0x0800a5a1
 800a3e4:	0800a5e5 	.word	0x0800a5e5
 800a3e8:	0800a6b5 	.word	0x0800a6b5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 819e 	beq.w	800a736 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a400:	20c8      	movs	r0, #200	; 0xc8
 800a402:	f001 fd9d 	bl	800bf40 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f001 fc93 	bl	800bd32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a41c:	e18b      	b.n	800a736 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a424:	2b01      	cmp	r3, #1
 800a426:	d107      	bne.n	800a438 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a436:	e18d      	b.n	800a754 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a43e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a442:	d914      	bls.n	800a46e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a44a:	3301      	adds	r3, #1
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d903      	bls.n	800a466 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	220d      	movs	r2, #13
 800a462:	701a      	strb	r2, [r3, #0]
      break;
 800a464:	e176      	b.n	800a754 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
      break;
 800a46c:	e172      	b.n	800a754 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a474:	f103 020a 	add.w	r2, r3, #10
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a47e:	200a      	movs	r0, #10
 800a480:	f001 fd5e 	bl	800bf40 <USBH_Delay>
      break;
 800a484:	e166      	b.n	800a754 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a496:	2104      	movs	r1, #4
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a49c:	2064      	movs	r0, #100	; 0x64
 800a49e:	f001 fd4f 	bl	800bf40 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fc1e 	bl	800bce4 <USBH_LL_GetSpeed>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2205      	movs	r2, #5
 800a4b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f001 fa29 	bl	800b912 <USBH_AllocPipe>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4c8:	2180      	movs	r1, #128	; 0x80
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f001 fa21 	bl	800b912 <USBH_AllocPipe>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7919      	ldrb	r1, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4ec:	b292      	uxth	r2, r2
 800a4ee:	9202      	str	r2, [sp, #8]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	9201      	str	r2, [sp, #4]
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2280      	movs	r2, #128	; 0x80
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 f9da 	bl	800b8b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	7959      	ldrb	r1, [r3, #5]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a514:	b292      	uxth	r2, r2
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	2200      	movs	r2, #0
 800a51a:	9201      	str	r2, [sp, #4]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4603      	mov	r3, r0
 800a520:	2200      	movs	r2, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 f9c6 	bl	800b8b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a528:	e114      	b.n	800a754 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f918 	bl	800a760 <USBH_HandleEnum>
 800a530:	4603      	mov	r3, r0
 800a532:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f040 80fe 	bne.w	800a73a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d103      	bne.n	800a558 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2208      	movs	r2, #8
 800a554:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a556:	e0f0      	b.n	800a73a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2207      	movs	r2, #7
 800a55c:	701a      	strb	r2, [r3, #0]
      break;
 800a55e:	e0ec      	b.n	800a73a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 80e9 	beq.w	800a73e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a572:	2101      	movs	r1, #1
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2208      	movs	r2, #8
 800a57c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a57e:	e0de      	b.n	800a73e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a586:	b29b      	uxth	r3, r3
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc2c 	bl	800ade8 <USBH_SetCfg>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	f040 80d5 	bne.w	800a742 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2209      	movs	r2, #9
 800a59c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a59e:	e0d0      	b.n	800a742 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a5a6:	f003 0320 	and.w	r3, r3, #32
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d016      	beq.n	800a5dc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fc3c 	bl	800ae2e <USBH_SetFeature>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d103      	bne.n	800a5ca <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	220a      	movs	r2, #10
 800a5c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a5c8:	e0bd      	b.n	800a746 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	f040 80b9 	bne.w	800a746 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	701a      	strb	r2, [r3, #0]
      break;
 800a5da:	e0b4      	b.n	800a746 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	220a      	movs	r2, #10
 800a5e0:	701a      	strb	r2, [r3, #0]
      break;
 800a5e2:	e0b0      	b.n	800a746 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 80ad 	beq.w	800a74a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]
 800a5fc:	e016      	b.n	800a62c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a5fe:	7bfa      	ldrb	r2, [r7, #15]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	32de      	adds	r2, #222	; 0xde
 800a604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a608:	791a      	ldrb	r2, [r3, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a610:	429a      	cmp	r2, r3
 800a612:	d108      	bne.n	800a626 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a614:	7bfa      	ldrb	r2, [r7, #15]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	32de      	adds	r2, #222	; 0xde
 800a61a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a624:	e005      	b.n	800a632 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	3301      	adds	r3, #1
 800a62a:	73fb      	strb	r3, [r7, #15]
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0e5      	beq.n	800a5fe <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d016      	beq.n	800a66a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	4798      	blx	r3
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d109      	bne.n	800a662 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2206      	movs	r2, #6
 800a652:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a65a:	2103      	movs	r1, #3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a660:	e073      	b.n	800a74a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	220d      	movs	r2, #13
 800a666:	701a      	strb	r2, [r3, #0]
      break;
 800a668:	e06f      	b.n	800a74a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	220d      	movs	r2, #13
 800a66e:	701a      	strb	r2, [r3, #0]
      break;
 800a670:	e06b      	b.n	800a74a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d017      	beq.n	800a6ac <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	4798      	blx	r3
 800a688:	4603      	mov	r3, r0
 800a68a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d103      	bne.n	800a69c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	220b      	movs	r2, #11
 800a698:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a69a:	e058      	b.n	800a74e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d154      	bne.n	800a74e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	220d      	movs	r2, #13
 800a6a8:	701a      	strb	r2, [r3, #0]
      break;
 800a6aa:	e050      	b.n	800a74e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	220d      	movs	r2, #13
 800a6b0:	701a      	strb	r2, [r3, #0]
      break;
 800a6b2:	e04c      	b.n	800a74e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d049      	beq.n	800a752 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	4798      	blx	r3
      }
      break;
 800a6ca:	e042      	b.n	800a752 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff fd67 	bl	800a1a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d009      	beq.n	800a6f8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d005      	beq.n	800a70e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a708:	2105      	movs	r1, #5
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b01      	cmp	r3, #1
 800a718:	d107      	bne.n	800a72a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fe20 	bl	800a368 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a728:	e014      	b.n	800a754 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f001 faa4 	bl	800bc78 <USBH_LL_Start>
      break;
 800a730:	e010      	b.n	800a754 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a732:	bf00      	nop
 800a734:	e00e      	b.n	800a754 <USBH_Process+0x3cc>
      break;
 800a736:	bf00      	nop
 800a738:	e00c      	b.n	800a754 <USBH_Process+0x3cc>
      break;
 800a73a:	bf00      	nop
 800a73c:	e00a      	b.n	800a754 <USBH_Process+0x3cc>
    break;
 800a73e:	bf00      	nop
 800a740:	e008      	b.n	800a754 <USBH_Process+0x3cc>
      break;
 800a742:	bf00      	nop
 800a744:	e006      	b.n	800a754 <USBH_Process+0x3cc>
      break;
 800a746:	bf00      	nop
 800a748:	e004      	b.n	800a754 <USBH_Process+0x3cc>
      break;
 800a74a:	bf00      	nop
 800a74c:	e002      	b.n	800a754 <USBH_Process+0x3cc>
      break;
 800a74e:	bf00      	nop
 800a750:	e000      	b.n	800a754 <USBH_Process+0x3cc>
      break;
 800a752:	bf00      	nop
  }
  return USBH_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop

0800a760 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af04      	add	r7, sp, #16
 800a766:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a768:	2301      	movs	r3, #1
 800a76a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a76c:	2301      	movs	r3, #1
 800a76e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	785b      	ldrb	r3, [r3, #1]
 800a774:	2b07      	cmp	r3, #7
 800a776:	f200 81c1 	bhi.w	800aafc <USBH_HandleEnum+0x39c>
 800a77a:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <USBH_HandleEnum+0x20>)
 800a77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a85f 	.word	0x0800a85f
 800a788:	0800a8c9 	.word	0x0800a8c9
 800a78c:	0800a957 	.word	0x0800a957
 800a790:	0800a9c1 	.word	0x0800a9c1
 800a794:	0800aa31 	.word	0x0800aa31
 800a798:	0800aa77 	.word	0x0800aa77
 800a79c:	0800aabd 	.word	0x0800aabd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a7a0:	2108      	movs	r1, #8
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa50 	bl	800ac48 <USBH_Get_DevDesc>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d130      	bne.n	800a814 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	7919      	ldrb	r1, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7d6:	b292      	uxth	r2, r2
 800a7d8:	9202      	str	r2, [sp, #8]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	9201      	str	r2, [sp, #4]
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2280      	movs	r2, #128	; 0x80
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 f865 	bl	800b8b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	7959      	ldrb	r1, [r3, #5]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7fe:	b292      	uxth	r2, r2
 800a800:	9202      	str	r2, [sp, #8]
 800a802:	2200      	movs	r2, #0
 800a804:	9201      	str	r2, [sp, #4]
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	4603      	mov	r3, r0
 800a80a:	2200      	movs	r2, #0
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 f851 	bl	800b8b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a812:	e175      	b.n	800ab00 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b03      	cmp	r3, #3
 800a818:	f040 8172 	bne.w	800ab00 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a822:	3301      	adds	r3, #1
 800a824:	b2da      	uxtb	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a832:	2b03      	cmp	r3, #3
 800a834:	d903      	bls.n	800a83e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	220d      	movs	r2, #13
 800a83a:	701a      	strb	r2, [r3, #0]
      break;
 800a83c:	e160      	b.n	800ab00 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	795b      	ldrb	r3, [r3, #5]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f885 	bl	800b954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	791b      	ldrb	r3, [r3, #4]
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f001 f87f 	bl	800b954 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]
      break;
 800a85c:	e150      	b.n	800ab00 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a85e:	2112      	movs	r1, #18
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f9f1 	bl	800ac48 <USBH_Get_DevDesc>
 800a866:	4603      	mov	r3, r0
 800a868:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d103      	bne.n	800a878 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a876:	e145      	b.n	800ab04 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	f040 8142 	bne.w	800ab04 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a886:	3301      	adds	r3, #1
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a896:	2b03      	cmp	r3, #3
 800a898:	d903      	bls.n	800a8a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	220d      	movs	r2, #13
 800a89e:	701a      	strb	r2, [r3, #0]
      break;
 800a8a0:	e130      	b.n	800ab04 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	795b      	ldrb	r3, [r3, #5]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 f853 	bl	800b954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	791b      	ldrb	r3, [r3, #4]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 f84d 	bl	800b954 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]
      break;
 800a8c6:	e11d      	b.n	800ab04 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa68 	bl	800ada0 <USBH_SetAddress>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d132      	bne.n	800a940 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a8da:	2002      	movs	r0, #2
 800a8dc:	f001 fb30 	bl	800bf40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	7919      	ldrb	r1, [r3, #4]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a902:	b292      	uxth	r2, r2
 800a904:	9202      	str	r2, [sp, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	9201      	str	r2, [sp, #4]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	4603      	mov	r3, r0
 800a90e:	2280      	movs	r2, #128	; 0x80
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 ffcf 	bl	800b8b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	7959      	ldrb	r1, [r3, #5]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a92a:	b292      	uxth	r2, r2
 800a92c:	9202      	str	r2, [sp, #8]
 800a92e:	2200      	movs	r2, #0
 800a930:	9201      	str	r2, [sp, #4]
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	4603      	mov	r3, r0
 800a936:	2200      	movs	r2, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 ffbb 	bl	800b8b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a93e:	e0e3      	b.n	800ab08 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	2b03      	cmp	r3, #3
 800a944:	f040 80e0 	bne.w	800ab08 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	220d      	movs	r2, #13
 800a94c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	705a      	strb	r2, [r3, #1]
      break;
 800a954:	e0d8      	b.n	800ab08 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a956:	2109      	movs	r1, #9
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f99d 	bl	800ac98 <USBH_Get_CfgDesc>
 800a95e:	4603      	mov	r3, r0
 800a960:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2204      	movs	r2, #4
 800a96c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a96e:	e0cd      	b.n	800ab0c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b03      	cmp	r3, #3
 800a974:	f040 80ca 	bne.w	800ab0c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a97e:	3301      	adds	r3, #1
 800a980:	b2da      	uxtb	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d903      	bls.n	800a99a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	220d      	movs	r2, #13
 800a996:	701a      	strb	r2, [r3, #0]
      break;
 800a998:	e0b8      	b.n	800ab0c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	795b      	ldrb	r3, [r3, #5]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 ffd7 	bl	800b954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	791b      	ldrb	r3, [r3, #4]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 ffd1 	bl	800b954 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	701a      	strb	r2, [r3, #0]
      break;
 800a9be:	e0a5      	b.n	800ab0c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f965 	bl	800ac98 <USBH_Get_CfgDesc>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2205      	movs	r2, #5
 800a9dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9de:	e097      	b.n	800ab10 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	f040 8094 	bne.w	800ab10 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d903      	bls.n	800aa0a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	220d      	movs	r2, #13
 800aa06:	701a      	strb	r2, [r3, #0]
      break;
 800aa08:	e082      	b.n	800ab10 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	795b      	ldrb	r3, [r3, #5]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 ff9f 	bl	800b954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	791b      	ldrb	r3, [r3, #4]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 ff99 	bl	800b954 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	701a      	strb	r2, [r3, #0]
      break;
 800aa2e:	e06f      	b.n	800ab10 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d019      	beq.n	800aa6e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa46:	23ff      	movs	r3, #255	; 0xff
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f949 	bl	800ace0 <USBH_Get_StringDesc>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d103      	bne.n	800aa60 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2206      	movs	r2, #6
 800aa5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aa5e:	e059      	b.n	800ab14 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d156      	bne.n	800ab14 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2206      	movs	r2, #6
 800aa6a:	705a      	strb	r2, [r3, #1]
      break;
 800aa6c:	e052      	b.n	800ab14 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2206      	movs	r2, #6
 800aa72:	705a      	strb	r2, [r3, #1]
      break;
 800aa74:	e04e      	b.n	800ab14 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d019      	beq.n	800aab4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa8c:	23ff      	movs	r3, #255	; 0xff
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f926 	bl	800ace0 <USBH_Get_StringDesc>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d103      	bne.n	800aaa6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aaa4:	e038      	b.n	800ab18 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	2b03      	cmp	r3, #3
 800aaaa:	d135      	bne.n	800ab18 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2207      	movs	r2, #7
 800aab0:	705a      	strb	r2, [r3, #1]
      break;
 800aab2:	e031      	b.n	800ab18 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2207      	movs	r2, #7
 800aab8:	705a      	strb	r2, [r3, #1]
      break;
 800aaba:	e02d      	b.n	800ab18 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d017      	beq.n	800aaf6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aad2:	23ff      	movs	r3, #255	; 0xff
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f903 	bl	800ace0 <USBH_Get_StringDesc>
 800aada:	4603      	mov	r3, r0
 800aadc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aae8:	e018      	b.n	800ab1c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d115      	bne.n	800ab1c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf4:	e012      	b.n	800ab1c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
      break;
 800aafa:	e00f      	b.n	800ab1c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800aafc:	bf00      	nop
 800aafe:	e00e      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab00:	bf00      	nop
 800ab02:	e00c      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab04:	bf00      	nop
 800ab06:	e00a      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab08:	bf00      	nop
 800ab0a:	e008      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab0c:	bf00      	nop
 800ab0e:	e006      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab10:	bf00      	nop
 800ab12:	e004      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab14:	bf00      	nop
 800ab16:	e002      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab18:	bf00      	nop
 800ab1a:	e000      	b.n	800ab1e <USBH_HandleEnum+0x3be>
      break;
 800ab1c:	bf00      	nop
  }
  return Status;
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f804 	bl	800ab6a <USBH_HandleSof>
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b0b      	cmp	r3, #11
 800ab7a:	d10a      	bne.n	800ab92 <USBH_HandleSof+0x28>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d005      	beq.n	800ab92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	4798      	blx	r3
  }
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800abaa:	bf00      	nop
}
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800abc6:	bf00      	nop
}
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 f844 	bl	800bcae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	791b      	ldrb	r3, [r3, #4]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fe91 	bl	800b954 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	795b      	ldrb	r3, [r3, #5]
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fe8b 	bl	800b954 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af02      	add	r7, sp, #8
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ac5a:	78fb      	ldrb	r3, [r7, #3]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	4613      	mov	r3, r2
 800ac62:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac66:	2100      	movs	r1, #0
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f864 	bl	800ad36 <USBH_GetDescriptor>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac84:	78fa      	ldrb	r2, [r7, #3]
 800ac86:	b292      	uxth	r2, r2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f000 f918 	bl	800aebe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	331c      	adds	r3, #28
 800aca8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800acaa:	887b      	ldrh	r3, [r7, #2]
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acb4:	2100      	movs	r1, #0
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f83d 	bl	800ad36 <USBH_GetDescriptor>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d107      	bne.n	800acd6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800acc6:	887b      	ldrh	r3, [r7, #2]
 800acc8:	461a      	mov	r2, r3
 800acca:	68b9      	ldr	r1, [r7, #8]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f987 	bl	800afe0 <USBH_ParseCfgDesc>
 800acd2:	4603      	mov	r3, r0
 800acd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af02      	add	r7, sp, #8
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	607a      	str	r2, [r7, #4]
 800acea:	461a      	mov	r2, r3
 800acec:	460b      	mov	r3, r1
 800acee:	72fb      	strb	r3, [r7, #11]
 800acf0:	4613      	mov	r3, r2
 800acf2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800acf4:	7afb      	ldrb	r3, [r7, #11]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800acfc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ad04:	893b      	ldrh	r3, [r7, #8]
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f812 	bl	800ad36 <USBH_GetDescriptor>
 800ad12:	4603      	mov	r3, r0
 800ad14:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ad16:	7dfb      	ldrb	r3, [r7, #23]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d107      	bne.n	800ad2c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad22:	893a      	ldrh	r2, [r7, #8]
 800ad24:	6879      	ldr	r1, [r7, #4]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 fb24 	bl	800b374 <USBH_ParseStringDesc>
  }

  return status;
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	607b      	str	r3, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	72fb      	strb	r3, [r7, #11]
 800ad44:	4613      	mov	r3, r2
 800ad46:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	789b      	ldrb	r3, [r3, #2]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d11c      	bne.n	800ad8a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2206      	movs	r2, #6
 800ad60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	893a      	ldrh	r2, [r7, #8]
 800ad66:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ad68:	893b      	ldrh	r3, [r7, #8]
 800ad6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad72:	d104      	bne.n	800ad7e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f240 4209 	movw	r2, #1033	; 0x409
 800ad7a:	829a      	strh	r2, [r3, #20]
 800ad7c:	e002      	b.n	800ad84 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	8b3a      	ldrh	r2, [r7, #24]
 800ad88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ad8a:	8b3b      	ldrh	r3, [r7, #24]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 fb3d 	bl	800b410 <USBH_CtlReq>
 800ad96:	4603      	mov	r3, r0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	789b      	ldrb	r3, [r3, #2]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d10f      	bne.n	800add4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2205      	movs	r2, #5
 800adbe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800add4:	2200      	movs	r2, #0
 800add6:	2100      	movs	r1, #0
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fb19 	bl	800b410 <USBH_CtlReq>
 800adde:	4603      	mov	r3, r0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	789b      	ldrb	r3, [r3, #2]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d10e      	bne.n	800ae1a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2209      	movs	r2, #9
 800ae06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	887a      	ldrh	r2, [r7, #2]
 800ae0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 faf6 	bl	800b410 <USBH_CtlReq>
 800ae24:	4603      	mov	r3, r0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	460b      	mov	r3, r1
 800ae38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	789b      	ldrb	r3, [r3, #2]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d10f      	bne.n	800ae62 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae62:	2200      	movs	r2, #0
 800ae64:	2100      	movs	r1, #0
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fad2 	bl	800b410 <USBH_CtlReq>
 800ae6c:	4603      	mov	r3, r0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	789b      	ldrb	r3, [r3, #2]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d10f      	bne.n	800aeaa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2100      	movs	r1, #0
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 faae 	bl	800b410 <USBH_CtlReq>
 800aeb4:	4603      	mov	r3, r0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b085      	sub	sp, #20
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	4613      	mov	r3, r2
 800aeca:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	781a      	ldrb	r2, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	785a      	ldrb	r2, [r3, #1]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	3302      	adds	r3, #2
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	3303      	adds	r3, #3
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	4313      	orrs	r3, r2
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	791a      	ldrb	r2, [r3, #4]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	795a      	ldrb	r2, [r3, #5]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	799a      	ldrb	r2, [r3, #6]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	79da      	ldrb	r2, [r3, #7]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	79db      	ldrb	r3, [r3, #7]
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	dc11      	bgt.n	800af44 <USBH_ParseDevDesc+0x86>
 800af20:	2b08      	cmp	r3, #8
 800af22:	db16      	blt.n	800af52 <USBH_ParseDevDesc+0x94>
 800af24:	3b08      	subs	r3, #8
 800af26:	2201      	movs	r2, #1
 800af28:	fa02 f303 	lsl.w	r3, r2, r3
 800af2c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800af30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af34:	2b00      	cmp	r3, #0
 800af36:	bf14      	ite	ne
 800af38:	2301      	movne	r3, #1
 800af3a:	2300      	moveq	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <USBH_ParseDevDesc+0x8a>
 800af42:	e006      	b.n	800af52 <USBH_ParseDevDesc+0x94>
 800af44:	2b40      	cmp	r3, #64	; 0x40
 800af46:	d104      	bne.n	800af52 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	79da      	ldrb	r2, [r3, #7]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	71da      	strb	r2, [r3, #7]
      break;
 800af50:	e003      	b.n	800af5a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2240      	movs	r2, #64	; 0x40
 800af56:	71da      	strb	r2, [r3, #7]
      break;
 800af58:	bf00      	nop
  }

  if (length > 8U)
 800af5a:	88fb      	ldrh	r3, [r7, #6]
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d939      	bls.n	800afd4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	3308      	adds	r3, #8
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	b29a      	uxth	r2, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	3309      	adds	r3, #9
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	b29b      	uxth	r3, r3
 800af70:	021b      	lsls	r3, r3, #8
 800af72:	b29b      	uxth	r3, r3
 800af74:	4313      	orrs	r3, r2
 800af76:	b29a      	uxth	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	330a      	adds	r3, #10
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	b29a      	uxth	r2, r3
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	330b      	adds	r3, #11
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	021b      	lsls	r3, r3, #8
 800af8e:	b29b      	uxth	r3, r3
 800af90:	4313      	orrs	r3, r2
 800af92:	b29a      	uxth	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	330c      	adds	r3, #12
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	330d      	adds	r3, #13
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	021b      	lsls	r3, r3, #8
 800afaa:	b29b      	uxth	r3, r3
 800afac:	4313      	orrs	r3, r2
 800afae:	b29a      	uxth	r2, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	7b9a      	ldrb	r2, [r3, #14]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	7bda      	ldrb	r2, [r3, #15]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	7c1a      	ldrb	r2, [r3, #16]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	7c5a      	ldrb	r2, [r3, #17]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	745a      	strb	r2, [r3, #17]
  }
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08c      	sub	sp, #48	; 0x30
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aff4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b000:	2300      	movs	r3, #0
 800b002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	781a      	ldrb	r2, [r3, #0]
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	785a      	ldrb	r2, [r3, #1]
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	3302      	adds	r3, #2
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	b29a      	uxth	r2, r3
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	3303      	adds	r3, #3
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	b29b      	uxth	r3, r3
 800b034:	4313      	orrs	r3, r2
 800b036:	b29b      	uxth	r3, r3
 800b038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b03c:	bf28      	it	cs
 800b03e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b042:	b29a      	uxth	r2, r3
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	791a      	ldrb	r2, [r3, #4]
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	795a      	ldrb	r2, [r3, #5]
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	799a      	ldrb	r2, [r3, #6]
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	79da      	ldrb	r2, [r3, #7]
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	7a1a      	ldrb	r2, [r3, #8]
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b09      	cmp	r3, #9
 800b076:	d002      	beq.n	800b07e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	2209      	movs	r2, #9
 800b07c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b07e:	88fb      	ldrh	r3, [r7, #6]
 800b080:	2b09      	cmp	r3, #9
 800b082:	f240 809d 	bls.w	800b1c0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b086:	2309      	movs	r3, #9
 800b088:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b08e:	e081      	b.n	800b194 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b090:	f107 0316 	add.w	r3, r7, #22
 800b094:	4619      	mov	r1, r3
 800b096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b098:	f000 f99f 	bl	800b3da <USBH_GetNextDesc>
 800b09c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d176      	bne.n	800b194 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b09      	cmp	r3, #9
 800b0ac:	d002      	beq.n	800b0b4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b0:	2209      	movs	r2, #9
 800b0b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0b8:	221a      	movs	r2, #26
 800b0ba:	fb02 f303 	mul.w	r3, r2, r3
 800b0be:	3308      	adds	r3, #8
 800b0c0:	6a3a      	ldr	r2, [r7, #32]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	3302      	adds	r3, #2
 800b0c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b0c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ca:	69f8      	ldr	r0, [r7, #28]
 800b0cc:	f000 f87e 	bl	800b1cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b0da:	e043      	b.n	800b164 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b0dc:	f107 0316 	add.w	r3, r7, #22
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0e4:	f000 f979 	bl	800b3da <USBH_GetNextDesc>
 800b0e8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	785b      	ldrb	r3, [r3, #1]
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	d138      	bne.n	800b164 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	795b      	ldrb	r3, [r3, #5]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d10f      	bne.n	800b11a <USBH_ParseCfgDesc+0x13a>
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	799b      	ldrb	r3, [r3, #6]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d10b      	bne.n	800b11a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	79db      	ldrb	r3, [r3, #7]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10f      	bne.n	800b12a <USBH_ParseCfgDesc+0x14a>
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b09      	cmp	r3, #9
 800b110:	d00b      	beq.n	800b12a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	2209      	movs	r2, #9
 800b116:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b118:	e007      	b.n	800b12a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b07      	cmp	r3, #7
 800b120:	d004      	beq.n	800b12c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	2207      	movs	r2, #7
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	e000      	b.n	800b12c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b12a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b130:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b134:	3201      	adds	r2, #1
 800b136:	00d2      	lsls	r2, r2, #3
 800b138:	211a      	movs	r1, #26
 800b13a:	fb01 f303 	mul.w	r3, r1, r3
 800b13e:	4413      	add	r3, r2
 800b140:	3308      	adds	r3, #8
 800b142:	6a3a      	ldr	r2, [r7, #32]
 800b144:	4413      	add	r3, r2
 800b146:	3304      	adds	r3, #4
 800b148:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b14c:	69b9      	ldr	r1, [r7, #24]
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 f86b 	bl	800b22a <USBH_ParseEPDesc>
 800b154:	4603      	mov	r3, r0
 800b156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b15a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b15e:	3301      	adds	r3, #1
 800b160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	791b      	ldrb	r3, [r3, #4]
 800b168:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d204      	bcs.n	800b17a <USBH_ParseCfgDesc+0x19a>
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	885a      	ldrh	r2, [r3, #2]
 800b174:	8afb      	ldrh	r3, [r7, #22]
 800b176:	429a      	cmp	r2, r3
 800b178:	d8b0      	bhi.n	800b0dc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	791b      	ldrb	r3, [r3, #4]
 800b17e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b182:	429a      	cmp	r2, r3
 800b184:	d201      	bcs.n	800b18a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b186:	2303      	movs	r3, #3
 800b188:	e01c      	b.n	800b1c4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b18e:	3301      	adds	r3, #1
 800b190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d805      	bhi.n	800b1a8 <USBH_ParseCfgDesc+0x1c8>
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	885a      	ldrh	r2, [r3, #2]
 800b1a0:	8afb      	ldrh	r3, [r7, #22]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	f63f af74 	bhi.w	800b090 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	791b      	ldrb	r3, [r3, #4]
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	bf28      	it	cs
 800b1b0:	2302      	movcs	r3, #2
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d201      	bcs.n	800b1c0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e001      	b.n	800b1c4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b1c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3730      	adds	r7, #48	; 0x30
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	785a      	ldrb	r2, [r3, #1]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	789a      	ldrb	r2, [r3, #2]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	78da      	ldrb	r2, [r3, #3]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	791a      	ldrb	r2, [r3, #4]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	795a      	ldrb	r2, [r3, #5]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	799a      	ldrb	r2, [r3, #6]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	79da      	ldrb	r2, [r3, #7]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	7a1a      	ldrb	r2, [r3, #8]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	721a      	strb	r2, [r3, #8]
}
 800b21e:	bf00      	nop
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b087      	sub	sp, #28
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	781a      	ldrb	r2, [r3, #0]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	785a      	ldrb	r2, [r3, #1]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	789a      	ldrb	r2, [r3, #2]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	78da      	ldrb	r2, [r3, #3]
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3304      	adds	r3, #4
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	b29a      	uxth	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3305      	adds	r3, #5
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	021b      	lsls	r3, r3, #8
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	4313      	orrs	r3, r2
 800b270:	b29a      	uxth	r2, r3
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	799a      	ldrb	r2, [r3, #6]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	889b      	ldrh	r3, [r3, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d102      	bne.n	800b28c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b286:	2303      	movs	r3, #3
 800b288:	75fb      	strb	r3, [r7, #23]
 800b28a:	e033      	b.n	800b2f4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	889b      	ldrh	r3, [r3, #4]
 800b290:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b294:	f023 0307 	bic.w	r3, r3, #7
 800b298:	b29a      	uxth	r2, r3
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	889b      	ldrh	r3, [r3, #4]
 800b2a2:	b21a      	sxth	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b299      	uxth	r1, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3305      	adds	r3, #5
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	021b      	lsls	r3, r3, #8
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	430b      	orrs	r3, r1
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d110      	bne.n	800b2e6 <USBH_ParseEPDesc+0xbc>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	b299      	uxth	r1, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3305      	adds	r3, #5
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	021b      	lsls	r3, r3, #8
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	b21b      	sxth	r3, r3
 800b2de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2e2:	b21b      	sxth	r3, r3
 800b2e4:	e001      	b.n	800b2ea <USBH_ParseEPDesc+0xc0>
 800b2e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	b21b      	sxth	r3, r3
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d116      	bne.n	800b32c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	78db      	ldrb	r3, [r3, #3]
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	2b01      	cmp	r3, #1
 800b308:	d005      	beq.n	800b316 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	78db      	ldrb	r3, [r3, #3]
 800b30e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b312:	2b03      	cmp	r3, #3
 800b314:	d127      	bne.n	800b366 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	799b      	ldrb	r3, [r3, #6]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <USBH_ParseEPDesc+0xfc>
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	799b      	ldrb	r3, [r3, #6]
 800b322:	2b10      	cmp	r3, #16
 800b324:	d91f      	bls.n	800b366 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b326:	2303      	movs	r3, #3
 800b328:	75fb      	strb	r3, [r7, #23]
 800b32a:	e01c      	b.n	800b366 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	78db      	ldrb	r3, [r3, #3]
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	2b01      	cmp	r3, #1
 800b336:	d10a      	bne.n	800b34e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	799b      	ldrb	r3, [r3, #6]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <USBH_ParseEPDesc+0x11e>
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	799b      	ldrb	r3, [r3, #6]
 800b344:	2b10      	cmp	r3, #16
 800b346:	d90e      	bls.n	800b366 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b348:	2303      	movs	r3, #3
 800b34a:	75fb      	strb	r3, [r7, #23]
 800b34c:	e00b      	b.n	800b366 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	78db      	ldrb	r3, [r3, #3]
 800b352:	f003 0303 	and.w	r3, r3, #3
 800b356:	2b03      	cmp	r3, #3
 800b358:	d105      	bne.n	800b366 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	799b      	ldrb	r3, [r3, #6]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b362:	2303      	movs	r3, #3
 800b364:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b366:	7dfb      	ldrb	r3, [r7, #23]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	371c      	adds	r7, #28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b374:	b480      	push	{r7}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	4613      	mov	r3, r2
 800b380:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3301      	adds	r3, #1
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d120      	bne.n	800b3ce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	1e9a      	subs	r2, r3, #2
 800b392:	88fb      	ldrh	r3, [r7, #6]
 800b394:	4293      	cmp	r3, r2
 800b396:	bf28      	it	cs
 800b398:	4613      	movcs	r3, r2
 800b39a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	3302      	adds	r3, #2
 800b3a0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	82fb      	strh	r3, [r7, #22]
 800b3a6:	e00b      	b.n	800b3c0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b3a8:	8afb      	ldrh	r3, [r7, #22]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	781a      	ldrb	r2, [r3, #0]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b3ba:	8afb      	ldrh	r3, [r7, #22]
 800b3bc:	3302      	adds	r3, #2
 800b3be:	82fb      	strh	r3, [r7, #22]
 800b3c0:	8afa      	ldrh	r2, [r7, #22]
 800b3c2:	8abb      	ldrh	r3, [r7, #20]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d3ef      	bcc.n	800b3a8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
  }
}
 800b3ce:	bf00      	nop
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b085      	sub	sp, #20
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	881a      	ldrh	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	4413      	add	r3, r2
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4413      	add	r3, r2
 800b400:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b402:	68fb      	ldr	r3, [r7, #12]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	4613      	mov	r3, r2
 800b41c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b41e:	2301      	movs	r3, #1
 800b420:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	789b      	ldrb	r3, [r3, #2]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d002      	beq.n	800b430 <USBH_CtlReq+0x20>
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d00f      	beq.n	800b44e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b42e:	e027      	b.n	800b480 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	88fa      	ldrh	r2, [r7, #6]
 800b43a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2201      	movs	r2, #1
 800b440:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2202      	movs	r2, #2
 800b446:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b448:	2301      	movs	r3, #1
 800b44a:	75fb      	strb	r3, [r7, #23]
      break;
 800b44c:	e018      	b.n	800b480 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 f81c 	bl	800b48c <USBH_HandleControl>
 800b454:	4603      	mov	r3, r0
 800b456:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <USBH_CtlReq+0x54>
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2b03      	cmp	r3, #3
 800b462:	d106      	bne.n	800b472 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2201      	movs	r2, #1
 800b468:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	761a      	strb	r2, [r3, #24]
      break;
 800b470:	e005      	b.n	800b47e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d102      	bne.n	800b47e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	709a      	strb	r2, [r3, #2]
      break;
 800b47e:	bf00      	nop
  }
  return status;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
	...

0800b48c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af02      	add	r7, sp, #8
 800b492:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b494:	2301      	movs	r3, #1
 800b496:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b498:	2300      	movs	r3, #0
 800b49a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	7e1b      	ldrb	r3, [r3, #24]
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	2b0a      	cmp	r3, #10
 800b4a4:	f200 8156 	bhi.w	800b754 <USBH_HandleControl+0x2c8>
 800b4a8:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <USBH_HandleControl+0x24>)
 800b4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ae:	bf00      	nop
 800b4b0:	0800b4dd 	.word	0x0800b4dd
 800b4b4:	0800b4f7 	.word	0x0800b4f7
 800b4b8:	0800b561 	.word	0x0800b561
 800b4bc:	0800b587 	.word	0x0800b587
 800b4c0:	0800b5bf 	.word	0x0800b5bf
 800b4c4:	0800b5e9 	.word	0x0800b5e9
 800b4c8:	0800b63b 	.word	0x0800b63b
 800b4cc:	0800b65d 	.word	0x0800b65d
 800b4d0:	0800b699 	.word	0x0800b699
 800b4d4:	0800b6bf 	.word	0x0800b6bf
 800b4d8:	0800b6fd 	.word	0x0800b6fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f103 0110 	add.w	r1, r3, #16
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	795b      	ldrb	r3, [r3, #5]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f943 	bl	800b774 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	761a      	strb	r2, [r3, #24]
      break;
 800b4f4:	e139      	b.n	800b76a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	795b      	ldrb	r3, [r3, #5]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fcc5 	bl	800be8c <USBH_LL_GetURBState>
 800b502:	4603      	mov	r3, r0
 800b504:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d11e      	bne.n	800b54a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7c1b      	ldrb	r3, [r3, #16]
 800b510:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b514:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8adb      	ldrh	r3, [r3, #22]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b51e:	7b7b      	ldrb	r3, [r7, #13]
 800b520:	2b80      	cmp	r3, #128	; 0x80
 800b522:	d103      	bne.n	800b52c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2203      	movs	r2, #3
 800b528:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b52a:	e115      	b.n	800b758 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2205      	movs	r2, #5
 800b530:	761a      	strb	r2, [r3, #24]
      break;
 800b532:	e111      	b.n	800b758 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b534:	7b7b      	ldrb	r3, [r7, #13]
 800b536:	2b80      	cmp	r3, #128	; 0x80
 800b538:	d103      	bne.n	800b542 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2209      	movs	r2, #9
 800b53e:	761a      	strb	r2, [r3, #24]
      break;
 800b540:	e10a      	b.n	800b758 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2207      	movs	r2, #7
 800b546:	761a      	strb	r2, [r3, #24]
      break;
 800b548:	e106      	b.n	800b758 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d003      	beq.n	800b558 <USBH_HandleControl+0xcc>
 800b550:	7bbb      	ldrb	r3, [r7, #14]
 800b552:	2b02      	cmp	r3, #2
 800b554:	f040 8100 	bne.w	800b758 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	220b      	movs	r2, #11
 800b55c:	761a      	strb	r2, [r3, #24]
      break;
 800b55e:	e0fb      	b.n	800b758 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b566:	b29a      	uxth	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6899      	ldr	r1, [r3, #8]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	899a      	ldrh	r2, [r3, #12]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	791b      	ldrb	r3, [r3, #4]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f93a 	bl	800b7f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2204      	movs	r2, #4
 800b582:	761a      	strb	r2, [r3, #24]
      break;
 800b584:	e0f1      	b.n	800b76a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	791b      	ldrb	r3, [r3, #4]
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc7d 	bl	800be8c <USBH_LL_GetURBState>
 800b592:	4603      	mov	r3, r0
 800b594:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d102      	bne.n	800b5a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2209      	movs	r2, #9
 800b5a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b05      	cmp	r3, #5
 800b5a6:	d102      	bne.n	800b5ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5ac:	e0d6      	b.n	800b75c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	f040 80d3 	bne.w	800b75c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	220b      	movs	r2, #11
 800b5ba:	761a      	strb	r2, [r3, #24]
      break;
 800b5bc:	e0ce      	b.n	800b75c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6899      	ldr	r1, [r3, #8]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	899a      	ldrh	r2, [r3, #12]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	795b      	ldrb	r3, [r3, #5]
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	9000      	str	r0, [sp, #0]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f8ea 	bl	800b7a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2206      	movs	r2, #6
 800b5e4:	761a      	strb	r2, [r3, #24]
      break;
 800b5e6:	e0c0      	b.n	800b76a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	795b      	ldrb	r3, [r3, #5]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fc4c 	bl	800be8c <USBH_LL_GetURBState>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d103      	bne.n	800b606 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2207      	movs	r2, #7
 800b602:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b604:	e0ac      	b.n	800b760 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	2b05      	cmp	r3, #5
 800b60a:	d105      	bne.n	800b618 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	220c      	movs	r2, #12
 800b610:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b612:	2303      	movs	r3, #3
 800b614:	73fb      	strb	r3, [r7, #15]
      break;
 800b616:	e0a3      	b.n	800b760 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b618:	7bbb      	ldrb	r3, [r7, #14]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d103      	bne.n	800b626 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2205      	movs	r2, #5
 800b622:	761a      	strb	r2, [r3, #24]
      break;
 800b624:	e09c      	b.n	800b760 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b04      	cmp	r3, #4
 800b62a:	f040 8099 	bne.w	800b760 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	220b      	movs	r2, #11
 800b632:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b634:	2302      	movs	r3, #2
 800b636:	73fb      	strb	r3, [r7, #15]
      break;
 800b638:	e092      	b.n	800b760 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	791b      	ldrb	r3, [r3, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8d5 	bl	800b7f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b64e:	b29a      	uxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2208      	movs	r2, #8
 800b658:	761a      	strb	r2, [r3, #24]

      break;
 800b65a:	e086      	b.n	800b76a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	791b      	ldrb	r3, [r3, #4]
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fc12 	bl	800be8c <USBH_LL_GetURBState>
 800b668:	4603      	mov	r3, r0
 800b66a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d105      	bne.n	800b67e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	220d      	movs	r2, #13
 800b676:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b67c:	e072      	b.n	800b764 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b04      	cmp	r3, #4
 800b682:	d103      	bne.n	800b68c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	220b      	movs	r2, #11
 800b688:	761a      	strb	r2, [r3, #24]
      break;
 800b68a:	e06b      	b.n	800b764 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b68c:	7bbb      	ldrb	r3, [r7, #14]
 800b68e:	2b05      	cmp	r3, #5
 800b690:	d168      	bne.n	800b764 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b692:	2303      	movs	r3, #3
 800b694:	73fb      	strb	r3, [r7, #15]
      break;
 800b696:	e065      	b.n	800b764 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	795b      	ldrb	r3, [r3, #5]
 800b69c:	2201      	movs	r2, #1
 800b69e:	9200      	str	r2, [sp, #0]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f87f 	bl	800b7a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	220a      	movs	r2, #10
 800b6ba:	761a      	strb	r2, [r3, #24]
      break;
 800b6bc:	e055      	b.n	800b76a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	795b      	ldrb	r3, [r3, #5]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fbe1 	bl	800be8c <USBH_LL_GetURBState>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d105      	bne.n	800b6e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	220d      	movs	r2, #13
 800b6dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b6de:	e043      	b.n	800b768 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d103      	bne.n	800b6ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2209      	movs	r2, #9
 800b6ea:	761a      	strb	r2, [r3, #24]
      break;
 800b6ec:	e03c      	b.n	800b768 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b6ee:	7bbb      	ldrb	r3, [r7, #14]
 800b6f0:	2b04      	cmp	r3, #4
 800b6f2:	d139      	bne.n	800b768 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	220b      	movs	r2, #11
 800b6f8:	761a      	strb	r2, [r3, #24]
      break;
 800b6fa:	e035      	b.n	800b768 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	7e5b      	ldrb	r3, [r3, #25]
 800b700:	3301      	adds	r3, #1
 800b702:	b2da      	uxtb	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	765a      	strb	r2, [r3, #25]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	7e5b      	ldrb	r3, [r3, #25]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d806      	bhi.n	800b71e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b71c:	e025      	b.n	800b76a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b724:	2106      	movs	r1, #6
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	795b      	ldrb	r3, [r3, #5]
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f90c 	bl	800b954 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	791b      	ldrb	r3, [r3, #4]
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f906 	bl	800b954 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b74e:	2302      	movs	r3, #2
 800b750:	73fb      	strb	r3, [r7, #15]
      break;
 800b752:	e00a      	b.n	800b76a <USBH_HandleControl+0x2de>

    default:
      break;
 800b754:	bf00      	nop
 800b756:	e008      	b.n	800b76a <USBH_HandleControl+0x2de>
      break;
 800b758:	bf00      	nop
 800b75a:	e006      	b.n	800b76a <USBH_HandleControl+0x2de>
      break;
 800b75c:	bf00      	nop
 800b75e:	e004      	b.n	800b76a <USBH_HandleControl+0x2de>
      break;
 800b760:	bf00      	nop
 800b762:	e002      	b.n	800b76a <USBH_HandleControl+0x2de>
      break;
 800b764:	bf00      	nop
 800b766:	e000      	b.n	800b76a <USBH_HandleControl+0x2de>
      break;
 800b768:	bf00      	nop
  }

  return status;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b088      	sub	sp, #32
 800b778:	af04      	add	r7, sp, #16
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b782:	79f9      	ldrb	r1, [r7, #7]
 800b784:	2300      	movs	r3, #0
 800b786:	9303      	str	r3, [sp, #12]
 800b788:	2308      	movs	r3, #8
 800b78a:	9302      	str	r3, [sp, #8]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	2300      	movs	r3, #0
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	2300      	movs	r3, #0
 800b796:	2200      	movs	r2, #0
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 fb46 	bl	800be2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af04      	add	r7, sp, #16
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	80fb      	strh	r3, [r7, #6]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b7cc:	7979      	ldrb	r1, [r7, #5]
 800b7ce:	7e3b      	ldrb	r3, [r7, #24]
 800b7d0:	9303      	str	r3, [sp, #12]
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	9302      	str	r3, [sp, #8]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	2301      	movs	r3, #1
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 fb21 	bl	800be2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b088      	sub	sp, #32
 800b7f6:	af04      	add	r7, sp, #16
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	461a      	mov	r2, r3
 800b800:	460b      	mov	r3, r1
 800b802:	80fb      	strh	r3, [r7, #6]
 800b804:	4613      	mov	r3, r2
 800b806:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b808:	7979      	ldrb	r1, [r7, #5]
 800b80a:	2300      	movs	r3, #0
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	9302      	str	r3, [sp, #8]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	2301      	movs	r3, #1
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	2300      	movs	r3, #0
 800b81c:	2201      	movs	r2, #1
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f000 fb03 	bl	800be2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b824:	2300      	movs	r3, #0

}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b088      	sub	sp, #32
 800b832:	af04      	add	r7, sp, #16
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	4611      	mov	r1, r2
 800b83a:	461a      	mov	r2, r3
 800b83c:	460b      	mov	r3, r1
 800b83e:	80fb      	strh	r3, [r7, #6]
 800b840:	4613      	mov	r3, r2
 800b842:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b852:	7979      	ldrb	r1, [r7, #5]
 800b854:	7e3b      	ldrb	r3, [r7, #24]
 800b856:	9303      	str	r3, [sp, #12]
 800b858:	88fb      	ldrh	r3, [r7, #6]
 800b85a:	9302      	str	r3, [sp, #8]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	2301      	movs	r3, #1
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	2302      	movs	r3, #2
 800b866:	2200      	movs	r2, #0
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 fade 	bl	800be2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af04      	add	r7, sp, #16
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	4611      	mov	r1, r2
 800b884:	461a      	mov	r2, r3
 800b886:	460b      	mov	r3, r1
 800b888:	80fb      	strh	r3, [r7, #6]
 800b88a:	4613      	mov	r3, r2
 800b88c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b88e:	7979      	ldrb	r1, [r7, #5]
 800b890:	2300      	movs	r3, #0
 800b892:	9303      	str	r3, [sp, #12]
 800b894:	88fb      	ldrh	r3, [r7, #6]
 800b896:	9302      	str	r3, [sp, #8]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	2301      	movs	r3, #1
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 fac0 	bl	800be2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af04      	add	r7, sp, #16
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	4608      	mov	r0, r1
 800b8be:	4611      	mov	r1, r2
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	70fb      	strb	r3, [r7, #3]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	70bb      	strb	r3, [r7, #2]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b8ce:	7878      	ldrb	r0, [r7, #1]
 800b8d0:	78ba      	ldrb	r2, [r7, #2]
 800b8d2:	78f9      	ldrb	r1, [r7, #3]
 800b8d4:	8b3b      	ldrh	r3, [r7, #24]
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	7d3b      	ldrb	r3, [r7, #20]
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	7c3b      	ldrb	r3, [r7, #16]
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fa53 	bl	800bd8e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b082      	sub	sp, #8
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	4619      	mov	r1, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fa72 	bl	800bdec <USBH_LL_ClosePipe>

  return USBH_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	460b      	mov	r3, r1
 800b91c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f836 	bl	800b990 <USBH_GetFreePipe>
 800b924:	4603      	mov	r3, r0
 800b926:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b928:	89fb      	ldrh	r3, [r7, #14]
 800b92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00a      	beq.n	800b948 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b932:	78fa      	ldrb	r2, [r7, #3]
 800b934:	89fb      	ldrh	r3, [r7, #14]
 800b936:	f003 030f 	and.w	r3, r3, #15
 800b93a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b93e:	6879      	ldr	r1, [r7, #4]
 800b940:	33e0      	adds	r3, #224	; 0xe0
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	440b      	add	r3, r1
 800b946:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b948:	89fb      	ldrh	r3, [r7, #14]
 800b94a:	b2db      	uxtb	r3, r3
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	2b0f      	cmp	r3, #15
 800b964:	d80d      	bhi.n	800b982 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	33e0      	adds	r3, #224	; 0xe0
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	33e0      	adds	r3, #224	; 0xe0
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	440b      	add	r3, r1
 800b980:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]
 800b9a0:	e00f      	b.n	800b9c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	33e0      	adds	r3, #224	; 0xe0
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	e007      	b.n	800b9cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	73fb      	strb	r3, [r7, #15]
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b0f      	cmp	r3, #15
 800b9c6:	d9ec      	bls.n	800b9a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b9c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b9dc:	2201      	movs	r2, #1
 800b9de:	490e      	ldr	r1, [pc, #56]	; (800ba18 <MX_USB_HOST_Init+0x40>)
 800b9e0:	480e      	ldr	r0, [pc, #56]	; (800ba1c <MX_USB_HOST_Init+0x44>)
 800b9e2:	f7fe fba7 	bl	800a134 <USBH_Init>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b9ec:	f7f5 fa8e 	bl	8000f0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b9f0:	490b      	ldr	r1, [pc, #44]	; (800ba20 <MX_USB_HOST_Init+0x48>)
 800b9f2:	480a      	ldr	r0, [pc, #40]	; (800ba1c <MX_USB_HOST_Init+0x44>)
 800b9f4:	f7fe fc2c 	bl	800a250 <USBH_RegisterClass>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b9fe:	f7f5 fa85 	bl	8000f0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ba02:	4806      	ldr	r0, [pc, #24]	; (800ba1c <MX_USB_HOST_Init+0x44>)
 800ba04:	f7fe fcb0 	bl	800a368 <USBH_Start>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ba0e:	f7f5 fa7d 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ba12:	bf00      	nop
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	0800ba39 	.word	0x0800ba39
 800ba1c:	2000041c 	.word	0x2000041c
 800ba20:	20000010 	.word	0x20000010

0800ba24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ba28:	4802      	ldr	r0, [pc, #8]	; (800ba34 <MX_USB_HOST_Process+0x10>)
 800ba2a:	f7fe fcad 	bl	800a388 <USBH_Process>
}
 800ba2e:	bf00      	nop
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2000041c 	.word	0x2000041c

0800ba38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	d819      	bhi.n	800ba80 <USBH_UserProcess+0x48>
 800ba4c:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <USBH_UserProcess+0x1c>)
 800ba4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800ba81 	.word	0x0800ba81
 800ba58:	0800ba71 	.word	0x0800ba71
 800ba5c:	0800ba81 	.word	0x0800ba81
 800ba60:	0800ba79 	.word	0x0800ba79
 800ba64:	0800ba69 	.word	0x0800ba69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ba68:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <USBH_UserProcess+0x58>)
 800ba6a:	2203      	movs	r2, #3
 800ba6c:	701a      	strb	r2, [r3, #0]
  break;
 800ba6e:	e008      	b.n	800ba82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ba70:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <USBH_UserProcess+0x58>)
 800ba72:	2202      	movs	r2, #2
 800ba74:	701a      	strb	r2, [r3, #0]
  break;
 800ba76:	e004      	b.n	800ba82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ba78:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <USBH_UserProcess+0x58>)
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	701a      	strb	r2, [r3, #0]
  break;
 800ba7e:	e000      	b.n	800ba82 <USBH_UserProcess+0x4a>

  default:
  break;
 800ba80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ba82:	bf00      	nop
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	200007f4 	.word	0x200007f4

0800ba94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08a      	sub	sp, #40	; 0x28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba9c:	f107 0314 	add.w	r3, r7, #20
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	605a      	str	r2, [r3, #4]
 800baa6:	609a      	str	r2, [r3, #8]
 800baa8:	60da      	str	r2, [r3, #12]
 800baaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bab4:	d147      	bne.n	800bb46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bab6:	2300      	movs	r3, #0
 800bab8:	613b      	str	r3, [r7, #16]
 800baba:	4b25      	ldr	r3, [pc, #148]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800babc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800babe:	4a24      	ldr	r2, [pc, #144]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800bac0:	f043 0301 	orr.w	r3, r3, #1
 800bac4:	6313      	str	r3, [r2, #48]	; 0x30
 800bac6:	4b22      	ldr	r3, [pc, #136]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800bac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bad8:	2300      	movs	r3, #0
 800bada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800badc:	2300      	movs	r3, #0
 800bade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bae0:	f107 0314 	add.w	r3, r7, #20
 800bae4:	4619      	mov	r1, r3
 800bae6:	481b      	ldr	r0, [pc, #108]	; (800bb54 <HAL_HCD_MspInit+0xc0>)
 800bae8:	f7f8 fa12 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800baec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800baf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baf2:	2302      	movs	r3, #2
 800baf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baf6:	2300      	movs	r3, #0
 800baf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bafa:	2300      	movs	r3, #0
 800bafc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bafe:	230a      	movs	r3, #10
 800bb00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb02:	f107 0314 	add.w	r3, r7, #20
 800bb06:	4619      	mov	r1, r3
 800bb08:	4812      	ldr	r0, [pc, #72]	; (800bb54 <HAL_HCD_MspInit+0xc0>)
 800bb0a:	f7f8 fa01 	bl	8003f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb0e:	4b10      	ldr	r3, [pc, #64]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800bb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb12:	4a0f      	ldr	r2, [pc, #60]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800bb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb18:	6353      	str	r3, [r2, #52]	; 0x34
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800bb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb22:	4a0b      	ldr	r2, [pc, #44]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800bb24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb28:	6453      	str	r3, [r2, #68]	; 0x44
 800bb2a:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <HAL_HCD_MspInit+0xbc>)
 800bb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb36:	2200      	movs	r2, #0
 800bb38:	2100      	movs	r1, #0
 800bb3a:	2043      	movs	r0, #67	; 0x43
 800bb3c:	f7f6 f97f 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb40:	2043      	movs	r0, #67	; 0x43
 800bb42:	f7f6 f998 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb46:	bf00      	nop
 800bb48:	3728      	adds	r7, #40	; 0x28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	40023800 	.word	0x40023800
 800bb54:	40020000 	.word	0x40020000

0800bb58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe ffed 	bl	800ab46 <USBH_LL_IncTimer>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff f825 	bl	800abd2 <USBH_LL_Connect>
}
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff f82e 	bl	800ac00 <USBH_LL_Disconnect>
}
 800bba4:	bf00      	nop
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
 800bbb8:	4613      	mov	r3, r2
 800bbba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe ffdf 	bl	800ab9a <USBH_LL_PortEnabled>
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe ffdf 	bl	800abb6 <USBH_LL_PortDisabled>
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d12a      	bne.n	800bc68 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bc12:	4a18      	ldr	r2, [pc, #96]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a15      	ldr	r2, [pc, #84]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc22:	4b14      	ldr	r3, [pc, #80]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bc28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bc2a:	4b12      	ldr	r3, [pc, #72]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc2c:	2208      	movs	r2, #8
 800bc2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bc30:	4b10      	ldr	r3, [pc, #64]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc32:	2201      	movs	r2, #1
 800bc34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc36:	4b0f      	ldr	r3, [pc, #60]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bc3c:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc3e:	2202      	movs	r2, #2
 800bc40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc42:	4b0c      	ldr	r3, [pc, #48]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bc48:	480a      	ldr	r0, [pc, #40]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc4a:	f7f8 fb16 	bl	800427a <HAL_HCD_Init>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bc54:	f7f5 f95a 	bl	8000f0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bc58:	4806      	ldr	r0, [pc, #24]	; (800bc74 <USBH_LL_Init+0x74>)
 800bc5a:	f7f8 fefa 	bl	8004a52 <HAL_HCD_GetCurrentFrame>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7fe ff60 	bl	800ab28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200007f8 	.word	0x200007f8

0800bc78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7f8 fe69 	bl	8004966 <HAL_HCD_Start>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 f95c 	bl	800bf58 <USBH_Get_USB_Status>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7f8 fe71 	bl	80049ac <HAL_HCD_Stop>
 800bcca:	4603      	mov	r3, r0
 800bccc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 f941 	bl	800bf58 <USBH_Get_USB_Status>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bcec:	2301      	movs	r3, #1
 800bcee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7f8 feb9 	bl	8004a6e <HAL_HCD_GetCurrentSpeed>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d00c      	beq.n	800bd1c <USBH_LL_GetSpeed+0x38>
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d80d      	bhi.n	800bd22 <USBH_LL_GetSpeed+0x3e>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <USBH_LL_GetSpeed+0x2c>
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d003      	beq.n	800bd16 <USBH_LL_GetSpeed+0x32>
 800bd0e:	e008      	b.n	800bd22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bd10:	2300      	movs	r3, #0
 800bd12:	73fb      	strb	r3, [r7, #15]
    break;
 800bd14:	e008      	b.n	800bd28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bd16:	2301      	movs	r3, #1
 800bd18:	73fb      	strb	r3, [r7, #15]
    break;
 800bd1a:	e005      	b.n	800bd28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd20:	e002      	b.n	800bd28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bd22:	2301      	movs	r3, #1
 800bd24:	73fb      	strb	r3, [r7, #15]
    break;
 800bd26:	bf00      	nop
  }
  return  speed;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7f8 fe4c 	bl	80049e6 <HAL_HCD_ResetPort>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 f8ff 	bl	800bf58 <USBH_Get_USB_Status>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	460b      	mov	r3, r1
 800bd72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f8 fe53 	bl	8004a2a <HAL_HCD_HC_GetXferCount>
 800bd84:	4603      	mov	r3, r0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd8e:	b590      	push	{r4, r7, lr}
 800bd90:	b089      	sub	sp, #36	; 0x24
 800bd92:	af04      	add	r7, sp, #16
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	4608      	mov	r0, r1
 800bd98:	4611      	mov	r1, r2
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	70fb      	strb	r3, [r7, #3]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70bb      	strb	r3, [r7, #2]
 800bda4:	4613      	mov	r3, r2
 800bda6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bdb6:	787c      	ldrb	r4, [r7, #1]
 800bdb8:	78ba      	ldrb	r2, [r7, #2]
 800bdba:	78f9      	ldrb	r1, [r7, #3]
 800bdbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bdbe:	9302      	str	r3, [sp, #8]
 800bdc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	4623      	mov	r3, r4
 800bdce:	f7f8 fab6 	bl	800433e <HAL_HCD_HC_Init>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 f8bd 	bl	800bf58 <USBH_Get_USB_Status>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd90      	pop	{r4, r7, pc}

0800bdec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be06:	78fa      	ldrb	r2, [r7, #3]
 800be08:	4611      	mov	r1, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f8 fb26 	bl	800445c <HAL_HCD_HC_Halt>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 f89e 	bl	800bf58 <USBH_Get_USB_Status>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be20:	7bbb      	ldrb	r3, [r7, #14]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800be2a:	b590      	push	{r4, r7, lr}
 800be2c:	b089      	sub	sp, #36	; 0x24
 800be2e:	af04      	add	r7, sp, #16
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	4608      	mov	r0, r1
 800be34:	4611      	mov	r1, r2
 800be36:	461a      	mov	r2, r3
 800be38:	4603      	mov	r3, r0
 800be3a:	70fb      	strb	r3, [r7, #3]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70bb      	strb	r3, [r7, #2]
 800be40:	4613      	mov	r3, r2
 800be42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be48:	2300      	movs	r3, #0
 800be4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800be52:	787c      	ldrb	r4, [r7, #1]
 800be54:	78ba      	ldrb	r2, [r7, #2]
 800be56:	78f9      	ldrb	r1, [r7, #3]
 800be58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be5c:	9303      	str	r3, [sp, #12]
 800be5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be60:	9302      	str	r3, [sp, #8]
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	9301      	str	r3, [sp, #4]
 800be66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	4623      	mov	r3, r4
 800be6e:	f7f8 fb19 	bl	80044a4 <HAL_HCD_HC_SubmitRequest>
 800be72:	4603      	mov	r3, r0
 800be74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 f86d 	bl	800bf58 <USBH_Get_USB_Status>
 800be7e:	4603      	mov	r3, r0
 800be80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be82:	7bbb      	ldrb	r3, [r7, #14]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd90      	pop	{r4, r7, pc}

0800be8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7f8 fdad 	bl	8004a02 <HAL_HCD_HC_GetURBState>
 800bea8:	4603      	mov	r3, r0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d103      	bne.n	800bed0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bec8:	78fb      	ldrb	r3, [r7, #3]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 f870 	bl	800bfb0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bed0:	20c8      	movs	r0, #200	; 0xc8
 800bed2:	f7f5 feb5 	bl	8001c40 <HAL_Delay>
  return USBH_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
 800beec:	4613      	mov	r3, r2
 800beee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bef6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bef8:	78fb      	ldrb	r3, [r7, #3]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	212c      	movs	r1, #44	; 0x2c
 800befe:	fb01 f303 	mul.w	r3, r1, r3
 800bf02:	4413      	add	r3, r2
 800bf04:	333b      	adds	r3, #59	; 0x3b
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d009      	beq.n	800bf20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bf0c:	78fb      	ldrb	r3, [r7, #3]
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	212c      	movs	r1, #44	; 0x2c
 800bf12:	fb01 f303 	mul.w	r3, r1, r3
 800bf16:	4413      	add	r3, r2
 800bf18:	3354      	adds	r3, #84	; 0x54
 800bf1a:	78ba      	ldrb	r2, [r7, #2]
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	e008      	b.n	800bf32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	212c      	movs	r1, #44	; 0x2c
 800bf26:	fb01 f303 	mul.w	r3, r1, r3
 800bf2a:	4413      	add	r3, r2
 800bf2c:	3355      	adds	r3, #85	; 0x55
 800bf2e:	78ba      	ldrb	r2, [r7, #2]
 800bf30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7f5 fe79 	bl	8001c40 <HAL_Delay>
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
	...

0800bf58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	4603      	mov	r3, r0
 800bf60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d817      	bhi.n	800bf9c <USBH_Get_USB_Status+0x44>
 800bf6c:	a201      	add	r2, pc, #4	; (adr r2, 800bf74 <USBH_Get_USB_Status+0x1c>)
 800bf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf72:	bf00      	nop
 800bf74:	0800bf85 	.word	0x0800bf85
 800bf78:	0800bf8b 	.word	0x0800bf8b
 800bf7c:	0800bf91 	.word	0x0800bf91
 800bf80:	0800bf97 	.word	0x0800bf97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	73fb      	strb	r3, [r7, #15]
    break;
 800bf88:	e00b      	b.n	800bfa2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf8e:	e008      	b.n	800bfa2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bf90:	2301      	movs	r3, #1
 800bf92:	73fb      	strb	r3, [r7, #15]
    break;
 800bf94:	e005      	b.n	800bfa2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bf96:	2302      	movs	r3, #2
 800bf98:	73fb      	strb	r3, [r7, #15]
    break;
 800bf9a:	e002      	b.n	800bfa2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bf9c:	2302      	movs	r3, #2
 800bf9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa0:	bf00      	nop
  }
  return usb_status;
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bfba:	79fb      	ldrb	r3, [r7, #7]
 800bfbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
 800bfc8:	e001      	b.n	800bfce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	4803      	ldr	r0, [pc, #12]	; (800bfe4 <MX_DriverVbusFS+0x34>)
 800bfd6:	f7f8 f937 	bl	8004248 <HAL_GPIO_WritePin>
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	40020800 	.word	0x40020800

0800bfe8 <__errno>:
 800bfe8:	4b01      	ldr	r3, [pc, #4]	; (800bff0 <__errno+0x8>)
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20000030 	.word	0x20000030

0800bff4 <__libc_init_array>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	4d0d      	ldr	r5, [pc, #52]	; (800c02c <__libc_init_array+0x38>)
 800bff8:	4c0d      	ldr	r4, [pc, #52]	; (800c030 <__libc_init_array+0x3c>)
 800bffa:	1b64      	subs	r4, r4, r5
 800bffc:	10a4      	asrs	r4, r4, #2
 800bffe:	2600      	movs	r6, #0
 800c000:	42a6      	cmp	r6, r4
 800c002:	d109      	bne.n	800c018 <__libc_init_array+0x24>
 800c004:	4d0b      	ldr	r5, [pc, #44]	; (800c034 <__libc_init_array+0x40>)
 800c006:	4c0c      	ldr	r4, [pc, #48]	; (800c038 <__libc_init_array+0x44>)
 800c008:	f000 fc76 	bl	800c8f8 <_init>
 800c00c:	1b64      	subs	r4, r4, r5
 800c00e:	10a4      	asrs	r4, r4, #2
 800c010:	2600      	movs	r6, #0
 800c012:	42a6      	cmp	r6, r4
 800c014:	d105      	bne.n	800c022 <__libc_init_array+0x2e>
 800c016:	bd70      	pop	{r4, r5, r6, pc}
 800c018:	f855 3b04 	ldr.w	r3, [r5], #4
 800c01c:	4798      	blx	r3
 800c01e:	3601      	adds	r6, #1
 800c020:	e7ee      	b.n	800c000 <__libc_init_array+0xc>
 800c022:	f855 3b04 	ldr.w	r3, [r5], #4
 800c026:	4798      	blx	r3
 800c028:	3601      	adds	r6, #1
 800c02a:	e7f2      	b.n	800c012 <__libc_init_array+0x1e>
 800c02c:	0800c9fc 	.word	0x0800c9fc
 800c030:	0800c9fc 	.word	0x0800c9fc
 800c034:	0800c9fc 	.word	0x0800c9fc
 800c038:	0800ca00 	.word	0x0800ca00

0800c03c <malloc>:
 800c03c:	4b02      	ldr	r3, [pc, #8]	; (800c048 <malloc+0xc>)
 800c03e:	4601      	mov	r1, r0
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	f000 b87f 	b.w	800c144 <_malloc_r>
 800c046:	bf00      	nop
 800c048:	20000030 	.word	0x20000030

0800c04c <free>:
 800c04c:	4b02      	ldr	r3, [pc, #8]	; (800c058 <free+0xc>)
 800c04e:	4601      	mov	r1, r0
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f000 b80b 	b.w	800c06c <_free_r>
 800c056:	bf00      	nop
 800c058:	20000030 	.word	0x20000030

0800c05c <memset>:
 800c05c:	4402      	add	r2, r0
 800c05e:	4603      	mov	r3, r0
 800c060:	4293      	cmp	r3, r2
 800c062:	d100      	bne.n	800c066 <memset+0xa>
 800c064:	4770      	bx	lr
 800c066:	f803 1b01 	strb.w	r1, [r3], #1
 800c06a:	e7f9      	b.n	800c060 <memset+0x4>

0800c06c <_free_r>:
 800c06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c06e:	2900      	cmp	r1, #0
 800c070:	d044      	beq.n	800c0fc <_free_r+0x90>
 800c072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c076:	9001      	str	r0, [sp, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f1a1 0404 	sub.w	r4, r1, #4
 800c07e:	bfb8      	it	lt
 800c080:	18e4      	addlt	r4, r4, r3
 800c082:	f000 fb91 	bl	800c7a8 <__malloc_lock>
 800c086:	4a1e      	ldr	r2, [pc, #120]	; (800c100 <_free_r+0x94>)
 800c088:	9801      	ldr	r0, [sp, #4]
 800c08a:	6813      	ldr	r3, [r2, #0]
 800c08c:	b933      	cbnz	r3, 800c09c <_free_r+0x30>
 800c08e:	6063      	str	r3, [r4, #4]
 800c090:	6014      	str	r4, [r2, #0]
 800c092:	b003      	add	sp, #12
 800c094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c098:	f000 bb8c 	b.w	800c7b4 <__malloc_unlock>
 800c09c:	42a3      	cmp	r3, r4
 800c09e:	d908      	bls.n	800c0b2 <_free_r+0x46>
 800c0a0:	6825      	ldr	r5, [r4, #0]
 800c0a2:	1961      	adds	r1, r4, r5
 800c0a4:	428b      	cmp	r3, r1
 800c0a6:	bf01      	itttt	eq
 800c0a8:	6819      	ldreq	r1, [r3, #0]
 800c0aa:	685b      	ldreq	r3, [r3, #4]
 800c0ac:	1949      	addeq	r1, r1, r5
 800c0ae:	6021      	streq	r1, [r4, #0]
 800c0b0:	e7ed      	b.n	800c08e <_free_r+0x22>
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	b10b      	cbz	r3, 800c0bc <_free_r+0x50>
 800c0b8:	42a3      	cmp	r3, r4
 800c0ba:	d9fa      	bls.n	800c0b2 <_free_r+0x46>
 800c0bc:	6811      	ldr	r1, [r2, #0]
 800c0be:	1855      	adds	r5, r2, r1
 800c0c0:	42a5      	cmp	r5, r4
 800c0c2:	d10b      	bne.n	800c0dc <_free_r+0x70>
 800c0c4:	6824      	ldr	r4, [r4, #0]
 800c0c6:	4421      	add	r1, r4
 800c0c8:	1854      	adds	r4, r2, r1
 800c0ca:	42a3      	cmp	r3, r4
 800c0cc:	6011      	str	r1, [r2, #0]
 800c0ce:	d1e0      	bne.n	800c092 <_free_r+0x26>
 800c0d0:	681c      	ldr	r4, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	6053      	str	r3, [r2, #4]
 800c0d6:	4421      	add	r1, r4
 800c0d8:	6011      	str	r1, [r2, #0]
 800c0da:	e7da      	b.n	800c092 <_free_r+0x26>
 800c0dc:	d902      	bls.n	800c0e4 <_free_r+0x78>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	6003      	str	r3, [r0, #0]
 800c0e2:	e7d6      	b.n	800c092 <_free_r+0x26>
 800c0e4:	6825      	ldr	r5, [r4, #0]
 800c0e6:	1961      	adds	r1, r4, r5
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	bf04      	itt	eq
 800c0ec:	6819      	ldreq	r1, [r3, #0]
 800c0ee:	685b      	ldreq	r3, [r3, #4]
 800c0f0:	6063      	str	r3, [r4, #4]
 800c0f2:	bf04      	itt	eq
 800c0f4:	1949      	addeq	r1, r1, r5
 800c0f6:	6021      	streq	r1, [r4, #0]
 800c0f8:	6054      	str	r4, [r2, #4]
 800c0fa:	e7ca      	b.n	800c092 <_free_r+0x26>
 800c0fc:	b003      	add	sp, #12
 800c0fe:	bd30      	pop	{r4, r5, pc}
 800c100:	20000afc 	.word	0x20000afc

0800c104 <sbrk_aligned>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	4e0e      	ldr	r6, [pc, #56]	; (800c140 <sbrk_aligned+0x3c>)
 800c108:	460c      	mov	r4, r1
 800c10a:	6831      	ldr	r1, [r6, #0]
 800c10c:	4605      	mov	r5, r0
 800c10e:	b911      	cbnz	r1, 800c116 <sbrk_aligned+0x12>
 800c110:	f000 f88c 	bl	800c22c <_sbrk_r>
 800c114:	6030      	str	r0, [r6, #0]
 800c116:	4621      	mov	r1, r4
 800c118:	4628      	mov	r0, r5
 800c11a:	f000 f887 	bl	800c22c <_sbrk_r>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d00a      	beq.n	800c138 <sbrk_aligned+0x34>
 800c122:	1cc4      	adds	r4, r0, #3
 800c124:	f024 0403 	bic.w	r4, r4, #3
 800c128:	42a0      	cmp	r0, r4
 800c12a:	d007      	beq.n	800c13c <sbrk_aligned+0x38>
 800c12c:	1a21      	subs	r1, r4, r0
 800c12e:	4628      	mov	r0, r5
 800c130:	f000 f87c 	bl	800c22c <_sbrk_r>
 800c134:	3001      	adds	r0, #1
 800c136:	d101      	bne.n	800c13c <sbrk_aligned+0x38>
 800c138:	f04f 34ff 	mov.w	r4, #4294967295
 800c13c:	4620      	mov	r0, r4
 800c13e:	bd70      	pop	{r4, r5, r6, pc}
 800c140:	20000b00 	.word	0x20000b00

0800c144 <_malloc_r>:
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	1ccd      	adds	r5, r1, #3
 800c14a:	f025 0503 	bic.w	r5, r5, #3
 800c14e:	3508      	adds	r5, #8
 800c150:	2d0c      	cmp	r5, #12
 800c152:	bf38      	it	cc
 800c154:	250c      	movcc	r5, #12
 800c156:	2d00      	cmp	r5, #0
 800c158:	4607      	mov	r7, r0
 800c15a:	db01      	blt.n	800c160 <_malloc_r+0x1c>
 800c15c:	42a9      	cmp	r1, r5
 800c15e:	d905      	bls.n	800c16c <_malloc_r+0x28>
 800c160:	230c      	movs	r3, #12
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	2600      	movs	r6, #0
 800c166:	4630      	mov	r0, r6
 800c168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c16c:	4e2e      	ldr	r6, [pc, #184]	; (800c228 <_malloc_r+0xe4>)
 800c16e:	f000 fb1b 	bl	800c7a8 <__malloc_lock>
 800c172:	6833      	ldr	r3, [r6, #0]
 800c174:	461c      	mov	r4, r3
 800c176:	bb34      	cbnz	r4, 800c1c6 <_malloc_r+0x82>
 800c178:	4629      	mov	r1, r5
 800c17a:	4638      	mov	r0, r7
 800c17c:	f7ff ffc2 	bl	800c104 <sbrk_aligned>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	4604      	mov	r4, r0
 800c184:	d14d      	bne.n	800c222 <_malloc_r+0xde>
 800c186:	6834      	ldr	r4, [r6, #0]
 800c188:	4626      	mov	r6, r4
 800c18a:	2e00      	cmp	r6, #0
 800c18c:	d140      	bne.n	800c210 <_malloc_r+0xcc>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	4631      	mov	r1, r6
 800c192:	4638      	mov	r0, r7
 800c194:	eb04 0803 	add.w	r8, r4, r3
 800c198:	f000 f848 	bl	800c22c <_sbrk_r>
 800c19c:	4580      	cmp	r8, r0
 800c19e:	d13a      	bne.n	800c216 <_malloc_r+0xd2>
 800c1a0:	6821      	ldr	r1, [r4, #0]
 800c1a2:	3503      	adds	r5, #3
 800c1a4:	1a6d      	subs	r5, r5, r1
 800c1a6:	f025 0503 	bic.w	r5, r5, #3
 800c1aa:	3508      	adds	r5, #8
 800c1ac:	2d0c      	cmp	r5, #12
 800c1ae:	bf38      	it	cc
 800c1b0:	250c      	movcc	r5, #12
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	4638      	mov	r0, r7
 800c1b6:	f7ff ffa5 	bl	800c104 <sbrk_aligned>
 800c1ba:	3001      	adds	r0, #1
 800c1bc:	d02b      	beq.n	800c216 <_malloc_r+0xd2>
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	442b      	add	r3, r5
 800c1c2:	6023      	str	r3, [r4, #0]
 800c1c4:	e00e      	b.n	800c1e4 <_malloc_r+0xa0>
 800c1c6:	6822      	ldr	r2, [r4, #0]
 800c1c8:	1b52      	subs	r2, r2, r5
 800c1ca:	d41e      	bmi.n	800c20a <_malloc_r+0xc6>
 800c1cc:	2a0b      	cmp	r2, #11
 800c1ce:	d916      	bls.n	800c1fe <_malloc_r+0xba>
 800c1d0:	1961      	adds	r1, r4, r5
 800c1d2:	42a3      	cmp	r3, r4
 800c1d4:	6025      	str	r5, [r4, #0]
 800c1d6:	bf18      	it	ne
 800c1d8:	6059      	strne	r1, [r3, #4]
 800c1da:	6863      	ldr	r3, [r4, #4]
 800c1dc:	bf08      	it	eq
 800c1de:	6031      	streq	r1, [r6, #0]
 800c1e0:	5162      	str	r2, [r4, r5]
 800c1e2:	604b      	str	r3, [r1, #4]
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	f104 060b 	add.w	r6, r4, #11
 800c1ea:	f000 fae3 	bl	800c7b4 <__malloc_unlock>
 800c1ee:	f026 0607 	bic.w	r6, r6, #7
 800c1f2:	1d23      	adds	r3, r4, #4
 800c1f4:	1af2      	subs	r2, r6, r3
 800c1f6:	d0b6      	beq.n	800c166 <_malloc_r+0x22>
 800c1f8:	1b9b      	subs	r3, r3, r6
 800c1fa:	50a3      	str	r3, [r4, r2]
 800c1fc:	e7b3      	b.n	800c166 <_malloc_r+0x22>
 800c1fe:	6862      	ldr	r2, [r4, #4]
 800c200:	42a3      	cmp	r3, r4
 800c202:	bf0c      	ite	eq
 800c204:	6032      	streq	r2, [r6, #0]
 800c206:	605a      	strne	r2, [r3, #4]
 800c208:	e7ec      	b.n	800c1e4 <_malloc_r+0xa0>
 800c20a:	4623      	mov	r3, r4
 800c20c:	6864      	ldr	r4, [r4, #4]
 800c20e:	e7b2      	b.n	800c176 <_malloc_r+0x32>
 800c210:	4634      	mov	r4, r6
 800c212:	6876      	ldr	r6, [r6, #4]
 800c214:	e7b9      	b.n	800c18a <_malloc_r+0x46>
 800c216:	230c      	movs	r3, #12
 800c218:	603b      	str	r3, [r7, #0]
 800c21a:	4638      	mov	r0, r7
 800c21c:	f000 faca 	bl	800c7b4 <__malloc_unlock>
 800c220:	e7a1      	b.n	800c166 <_malloc_r+0x22>
 800c222:	6025      	str	r5, [r4, #0]
 800c224:	e7de      	b.n	800c1e4 <_malloc_r+0xa0>
 800c226:	bf00      	nop
 800c228:	20000afc 	.word	0x20000afc

0800c22c <_sbrk_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d06      	ldr	r5, [pc, #24]	; (800c248 <_sbrk_r+0x1c>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	f7f5 fa82 	bl	8001740 <_sbrk>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_sbrk_r+0x1a>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_sbrk_r+0x1a>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	20000b08 	.word	0x20000b08

0800c24c <setbuf>:
 800c24c:	2900      	cmp	r1, #0
 800c24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c252:	bf0c      	ite	eq
 800c254:	2202      	moveq	r2, #2
 800c256:	2200      	movne	r2, #0
 800c258:	f000 b800 	b.w	800c25c <setvbuf>

0800c25c <setvbuf>:
 800c25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c260:	461d      	mov	r5, r3
 800c262:	4b5d      	ldr	r3, [pc, #372]	; (800c3d8 <setvbuf+0x17c>)
 800c264:	681f      	ldr	r7, [r3, #0]
 800c266:	4604      	mov	r4, r0
 800c268:	460e      	mov	r6, r1
 800c26a:	4690      	mov	r8, r2
 800c26c:	b127      	cbz	r7, 800c278 <setvbuf+0x1c>
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	b913      	cbnz	r3, 800c278 <setvbuf+0x1c>
 800c272:	4638      	mov	r0, r7
 800c274:	f000 f9d2 	bl	800c61c <__sinit>
 800c278:	4b58      	ldr	r3, [pc, #352]	; (800c3dc <setvbuf+0x180>)
 800c27a:	429c      	cmp	r4, r3
 800c27c:	d167      	bne.n	800c34e <setvbuf+0xf2>
 800c27e:	687c      	ldr	r4, [r7, #4]
 800c280:	f1b8 0f02 	cmp.w	r8, #2
 800c284:	d006      	beq.n	800c294 <setvbuf+0x38>
 800c286:	f1b8 0f01 	cmp.w	r8, #1
 800c28a:	f200 809f 	bhi.w	800c3cc <setvbuf+0x170>
 800c28e:	2d00      	cmp	r5, #0
 800c290:	f2c0 809c 	blt.w	800c3cc <setvbuf+0x170>
 800c294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c296:	07db      	lsls	r3, r3, #31
 800c298:	d405      	bmi.n	800c2a6 <setvbuf+0x4a>
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	0598      	lsls	r0, r3, #22
 800c29e:	d402      	bmi.n	800c2a6 <setvbuf+0x4a>
 800c2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2a2:	f000 fa59 	bl	800c758 <__retarget_lock_acquire_recursive>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f000 f923 	bl	800c4f4 <_fflush_r>
 800c2ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2b0:	b141      	cbz	r1, 800c2c4 <setvbuf+0x68>
 800c2b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b6:	4299      	cmp	r1, r3
 800c2b8:	d002      	beq.n	800c2c0 <setvbuf+0x64>
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7ff fed6 	bl	800c06c <_free_r>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	6363      	str	r3, [r4, #52]	; 0x34
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61a3      	str	r3, [r4, #24]
 800c2c8:	6063      	str	r3, [r4, #4]
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	0619      	lsls	r1, r3, #24
 800c2ce:	d503      	bpl.n	800c2d8 <setvbuf+0x7c>
 800c2d0:	6921      	ldr	r1, [r4, #16]
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f7ff feca 	bl	800c06c <_free_r>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c2de:	f023 0303 	bic.w	r3, r3, #3
 800c2e2:	f1b8 0f02 	cmp.w	r8, #2
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	d06c      	beq.n	800c3c4 <setvbuf+0x168>
 800c2ea:	ab01      	add	r3, sp, #4
 800c2ec:	466a      	mov	r2, sp
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	f000 fa33 	bl	800c75c <__swhatbuf_r>
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	4318      	orrs	r0, r3
 800c2fa:	81a0      	strh	r0, [r4, #12]
 800c2fc:	2d00      	cmp	r5, #0
 800c2fe:	d130      	bne.n	800c362 <setvbuf+0x106>
 800c300:	9d00      	ldr	r5, [sp, #0]
 800c302:	4628      	mov	r0, r5
 800c304:	f7ff fe9a 	bl	800c03c <malloc>
 800c308:	4606      	mov	r6, r0
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d155      	bne.n	800c3ba <setvbuf+0x15e>
 800c30e:	f8dd 9000 	ldr.w	r9, [sp]
 800c312:	45a9      	cmp	r9, r5
 800c314:	d14a      	bne.n	800c3ac <setvbuf+0x150>
 800c316:	f04f 35ff 	mov.w	r5, #4294967295
 800c31a:	2200      	movs	r2, #0
 800c31c:	60a2      	str	r2, [r4, #8]
 800c31e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800c322:	6022      	str	r2, [r4, #0]
 800c324:	6122      	str	r2, [r4, #16]
 800c326:	2201      	movs	r2, #1
 800c328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c32c:	6162      	str	r2, [r4, #20]
 800c32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c330:	f043 0302 	orr.w	r3, r3, #2
 800c334:	07d2      	lsls	r2, r2, #31
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	d405      	bmi.n	800c346 <setvbuf+0xea>
 800c33a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800c33e:	d102      	bne.n	800c346 <setvbuf+0xea>
 800c340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c342:	f000 fa0a 	bl	800c75a <__retarget_lock_release_recursive>
 800c346:	4628      	mov	r0, r5
 800c348:	b003      	add	sp, #12
 800c34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c34e:	4b24      	ldr	r3, [pc, #144]	; (800c3e0 <setvbuf+0x184>)
 800c350:	429c      	cmp	r4, r3
 800c352:	d101      	bne.n	800c358 <setvbuf+0xfc>
 800c354:	68bc      	ldr	r4, [r7, #8]
 800c356:	e793      	b.n	800c280 <setvbuf+0x24>
 800c358:	4b22      	ldr	r3, [pc, #136]	; (800c3e4 <setvbuf+0x188>)
 800c35a:	429c      	cmp	r4, r3
 800c35c:	bf08      	it	eq
 800c35e:	68fc      	ldreq	r4, [r7, #12]
 800c360:	e78e      	b.n	800c280 <setvbuf+0x24>
 800c362:	2e00      	cmp	r6, #0
 800c364:	d0cd      	beq.n	800c302 <setvbuf+0xa6>
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	b913      	cbnz	r3, 800c370 <setvbuf+0x114>
 800c36a:	4638      	mov	r0, r7
 800c36c:	f000 f956 	bl	800c61c <__sinit>
 800c370:	f1b8 0f01 	cmp.w	r8, #1
 800c374:	bf08      	it	eq
 800c376:	89a3      	ldrheq	r3, [r4, #12]
 800c378:	6026      	str	r6, [r4, #0]
 800c37a:	bf04      	itt	eq
 800c37c:	f043 0301 	orreq.w	r3, r3, #1
 800c380:	81a3      	strheq	r3, [r4, #12]
 800c382:	89a2      	ldrh	r2, [r4, #12]
 800c384:	f012 0308 	ands.w	r3, r2, #8
 800c388:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c38c:	d01c      	beq.n	800c3c8 <setvbuf+0x16c>
 800c38e:	07d3      	lsls	r3, r2, #31
 800c390:	bf41      	itttt	mi
 800c392:	2300      	movmi	r3, #0
 800c394:	426d      	negmi	r5, r5
 800c396:	60a3      	strmi	r3, [r4, #8]
 800c398:	61a5      	strmi	r5, [r4, #24]
 800c39a:	bf58      	it	pl
 800c39c:	60a5      	strpl	r5, [r4, #8]
 800c39e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c3a0:	f015 0501 	ands.w	r5, r5, #1
 800c3a4:	d115      	bne.n	800c3d2 <setvbuf+0x176>
 800c3a6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800c3aa:	e7c8      	b.n	800c33e <setvbuf+0xe2>
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	f7ff fe45 	bl	800c03c <malloc>
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d0ae      	beq.n	800c316 <setvbuf+0xba>
 800c3b8:	464d      	mov	r5, r9
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	e7d0      	b.n	800c366 <setvbuf+0x10a>
 800c3c4:	2500      	movs	r5, #0
 800c3c6:	e7a8      	b.n	800c31a <setvbuf+0xbe>
 800c3c8:	60a3      	str	r3, [r4, #8]
 800c3ca:	e7e8      	b.n	800c39e <setvbuf+0x142>
 800c3cc:	f04f 35ff 	mov.w	r5, #4294967295
 800c3d0:	e7b9      	b.n	800c346 <setvbuf+0xea>
 800c3d2:	2500      	movs	r5, #0
 800c3d4:	e7b7      	b.n	800c346 <setvbuf+0xea>
 800c3d6:	bf00      	nop
 800c3d8:	20000030 	.word	0x20000030
 800c3dc:	0800c9b4 	.word	0x0800c9b4
 800c3e0:	0800c9d4 	.word	0x0800c9d4
 800c3e4:	0800c994 	.word	0x0800c994

0800c3e8 <__sflush_r>:
 800c3e8:	898a      	ldrh	r2, [r1, #12]
 800c3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	0710      	lsls	r0, r2, #28
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	d458      	bmi.n	800c4a8 <__sflush_r+0xc0>
 800c3f6:	684b      	ldr	r3, [r1, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dc05      	bgt.n	800c408 <__sflush_r+0x20>
 800c3fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dc02      	bgt.n	800c408 <__sflush_r+0x20>
 800c402:	2000      	movs	r0, #0
 800c404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c40a:	2e00      	cmp	r6, #0
 800c40c:	d0f9      	beq.n	800c402 <__sflush_r+0x1a>
 800c40e:	2300      	movs	r3, #0
 800c410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c414:	682f      	ldr	r7, [r5, #0]
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	d032      	beq.n	800c480 <__sflush_r+0x98>
 800c41a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	075a      	lsls	r2, r3, #29
 800c420:	d505      	bpl.n	800c42e <__sflush_r+0x46>
 800c422:	6863      	ldr	r3, [r4, #4]
 800c424:	1ac0      	subs	r0, r0, r3
 800c426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c428:	b10b      	cbz	r3, 800c42e <__sflush_r+0x46>
 800c42a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c42c:	1ac0      	subs	r0, r0, r3
 800c42e:	2300      	movs	r3, #0
 800c430:	4602      	mov	r2, r0
 800c432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c434:	6a21      	ldr	r1, [r4, #32]
 800c436:	4628      	mov	r0, r5
 800c438:	47b0      	blx	r6
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	d106      	bne.n	800c44e <__sflush_r+0x66>
 800c440:	6829      	ldr	r1, [r5, #0]
 800c442:	291d      	cmp	r1, #29
 800c444:	d82c      	bhi.n	800c4a0 <__sflush_r+0xb8>
 800c446:	4a2a      	ldr	r2, [pc, #168]	; (800c4f0 <__sflush_r+0x108>)
 800c448:	40ca      	lsrs	r2, r1
 800c44a:	07d6      	lsls	r6, r2, #31
 800c44c:	d528      	bpl.n	800c4a0 <__sflush_r+0xb8>
 800c44e:	2200      	movs	r2, #0
 800c450:	6062      	str	r2, [r4, #4]
 800c452:	04d9      	lsls	r1, r3, #19
 800c454:	6922      	ldr	r2, [r4, #16]
 800c456:	6022      	str	r2, [r4, #0]
 800c458:	d504      	bpl.n	800c464 <__sflush_r+0x7c>
 800c45a:	1c42      	adds	r2, r0, #1
 800c45c:	d101      	bne.n	800c462 <__sflush_r+0x7a>
 800c45e:	682b      	ldr	r3, [r5, #0]
 800c460:	b903      	cbnz	r3, 800c464 <__sflush_r+0x7c>
 800c462:	6560      	str	r0, [r4, #84]	; 0x54
 800c464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c466:	602f      	str	r7, [r5, #0]
 800c468:	2900      	cmp	r1, #0
 800c46a:	d0ca      	beq.n	800c402 <__sflush_r+0x1a>
 800c46c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c470:	4299      	cmp	r1, r3
 800c472:	d002      	beq.n	800c47a <__sflush_r+0x92>
 800c474:	4628      	mov	r0, r5
 800c476:	f7ff fdf9 	bl	800c06c <_free_r>
 800c47a:	2000      	movs	r0, #0
 800c47c:	6360      	str	r0, [r4, #52]	; 0x34
 800c47e:	e7c1      	b.n	800c404 <__sflush_r+0x1c>
 800c480:	6a21      	ldr	r1, [r4, #32]
 800c482:	2301      	movs	r3, #1
 800c484:	4628      	mov	r0, r5
 800c486:	47b0      	blx	r6
 800c488:	1c41      	adds	r1, r0, #1
 800c48a:	d1c7      	bne.n	800c41c <__sflush_r+0x34>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0c4      	beq.n	800c41c <__sflush_r+0x34>
 800c492:	2b1d      	cmp	r3, #29
 800c494:	d001      	beq.n	800c49a <__sflush_r+0xb2>
 800c496:	2b16      	cmp	r3, #22
 800c498:	d101      	bne.n	800c49e <__sflush_r+0xb6>
 800c49a:	602f      	str	r7, [r5, #0]
 800c49c:	e7b1      	b.n	800c402 <__sflush_r+0x1a>
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	e7ad      	b.n	800c404 <__sflush_r+0x1c>
 800c4a8:	690f      	ldr	r7, [r1, #16]
 800c4aa:	2f00      	cmp	r7, #0
 800c4ac:	d0a9      	beq.n	800c402 <__sflush_r+0x1a>
 800c4ae:	0793      	lsls	r3, r2, #30
 800c4b0:	680e      	ldr	r6, [r1, #0]
 800c4b2:	bf08      	it	eq
 800c4b4:	694b      	ldreq	r3, [r1, #20]
 800c4b6:	600f      	str	r7, [r1, #0]
 800c4b8:	bf18      	it	ne
 800c4ba:	2300      	movne	r3, #0
 800c4bc:	eba6 0807 	sub.w	r8, r6, r7
 800c4c0:	608b      	str	r3, [r1, #8]
 800c4c2:	f1b8 0f00 	cmp.w	r8, #0
 800c4c6:	dd9c      	ble.n	800c402 <__sflush_r+0x1a>
 800c4c8:	6a21      	ldr	r1, [r4, #32]
 800c4ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4cc:	4643      	mov	r3, r8
 800c4ce:	463a      	mov	r2, r7
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	47b0      	blx	r6
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	dc06      	bgt.n	800c4e6 <__sflush_r+0xfe>
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4de:	81a3      	strh	r3, [r4, #12]
 800c4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e4:	e78e      	b.n	800c404 <__sflush_r+0x1c>
 800c4e6:	4407      	add	r7, r0
 800c4e8:	eba8 0800 	sub.w	r8, r8, r0
 800c4ec:	e7e9      	b.n	800c4c2 <__sflush_r+0xda>
 800c4ee:	bf00      	nop
 800c4f0:	20400001 	.word	0x20400001

0800c4f4 <_fflush_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	690b      	ldr	r3, [r1, #16]
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	b913      	cbnz	r3, 800c504 <_fflush_r+0x10>
 800c4fe:	2500      	movs	r5, #0
 800c500:	4628      	mov	r0, r5
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	b118      	cbz	r0, 800c50e <_fflush_r+0x1a>
 800c506:	6983      	ldr	r3, [r0, #24]
 800c508:	b90b      	cbnz	r3, 800c50e <_fflush_r+0x1a>
 800c50a:	f000 f887 	bl	800c61c <__sinit>
 800c50e:	4b14      	ldr	r3, [pc, #80]	; (800c560 <_fflush_r+0x6c>)
 800c510:	429c      	cmp	r4, r3
 800c512:	d11b      	bne.n	800c54c <_fflush_r+0x58>
 800c514:	686c      	ldr	r4, [r5, #4]
 800c516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0ef      	beq.n	800c4fe <_fflush_r+0xa>
 800c51e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c520:	07d0      	lsls	r0, r2, #31
 800c522:	d404      	bmi.n	800c52e <_fflush_r+0x3a>
 800c524:	0599      	lsls	r1, r3, #22
 800c526:	d402      	bmi.n	800c52e <_fflush_r+0x3a>
 800c528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c52a:	f000 f915 	bl	800c758 <__retarget_lock_acquire_recursive>
 800c52e:	4628      	mov	r0, r5
 800c530:	4621      	mov	r1, r4
 800c532:	f7ff ff59 	bl	800c3e8 <__sflush_r>
 800c536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c538:	07da      	lsls	r2, r3, #31
 800c53a:	4605      	mov	r5, r0
 800c53c:	d4e0      	bmi.n	800c500 <_fflush_r+0xc>
 800c53e:	89a3      	ldrh	r3, [r4, #12]
 800c540:	059b      	lsls	r3, r3, #22
 800c542:	d4dd      	bmi.n	800c500 <_fflush_r+0xc>
 800c544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c546:	f000 f908 	bl	800c75a <__retarget_lock_release_recursive>
 800c54a:	e7d9      	b.n	800c500 <_fflush_r+0xc>
 800c54c:	4b05      	ldr	r3, [pc, #20]	; (800c564 <_fflush_r+0x70>)
 800c54e:	429c      	cmp	r4, r3
 800c550:	d101      	bne.n	800c556 <_fflush_r+0x62>
 800c552:	68ac      	ldr	r4, [r5, #8]
 800c554:	e7df      	b.n	800c516 <_fflush_r+0x22>
 800c556:	4b04      	ldr	r3, [pc, #16]	; (800c568 <_fflush_r+0x74>)
 800c558:	429c      	cmp	r4, r3
 800c55a:	bf08      	it	eq
 800c55c:	68ec      	ldreq	r4, [r5, #12]
 800c55e:	e7da      	b.n	800c516 <_fflush_r+0x22>
 800c560:	0800c9b4 	.word	0x0800c9b4
 800c564:	0800c9d4 	.word	0x0800c9d4
 800c568:	0800c994 	.word	0x0800c994

0800c56c <std>:
 800c56c:	2300      	movs	r3, #0
 800c56e:	b510      	push	{r4, lr}
 800c570:	4604      	mov	r4, r0
 800c572:	e9c0 3300 	strd	r3, r3, [r0]
 800c576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c57a:	6083      	str	r3, [r0, #8]
 800c57c:	8181      	strh	r1, [r0, #12]
 800c57e:	6643      	str	r3, [r0, #100]	; 0x64
 800c580:	81c2      	strh	r2, [r0, #14]
 800c582:	6183      	str	r3, [r0, #24]
 800c584:	4619      	mov	r1, r3
 800c586:	2208      	movs	r2, #8
 800c588:	305c      	adds	r0, #92	; 0x5c
 800c58a:	f7ff fd67 	bl	800c05c <memset>
 800c58e:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <std+0x38>)
 800c590:	6263      	str	r3, [r4, #36]	; 0x24
 800c592:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <std+0x3c>)
 800c594:	62a3      	str	r3, [r4, #40]	; 0x28
 800c596:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <std+0x40>)
 800c598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c59a:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <std+0x44>)
 800c59c:	6224      	str	r4, [r4, #32]
 800c59e:	6323      	str	r3, [r4, #48]	; 0x30
 800c5a0:	bd10      	pop	{r4, pc}
 800c5a2:	bf00      	nop
 800c5a4:	0800c7c1 	.word	0x0800c7c1
 800c5a8:	0800c7e3 	.word	0x0800c7e3
 800c5ac:	0800c81b 	.word	0x0800c81b
 800c5b0:	0800c83f 	.word	0x0800c83f

0800c5b4 <_cleanup_r>:
 800c5b4:	4901      	ldr	r1, [pc, #4]	; (800c5bc <_cleanup_r+0x8>)
 800c5b6:	f000 b8af 	b.w	800c718 <_fwalk_reent>
 800c5ba:	bf00      	nop
 800c5bc:	0800c4f5 	.word	0x0800c4f5

0800c5c0 <__sfmoreglue>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	2268      	movs	r2, #104	; 0x68
 800c5c4:	1e4d      	subs	r5, r1, #1
 800c5c6:	4355      	muls	r5, r2
 800c5c8:	460e      	mov	r6, r1
 800c5ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5ce:	f7ff fdb9 	bl	800c144 <_malloc_r>
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	b140      	cbz	r0, 800c5e8 <__sfmoreglue+0x28>
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	e9c0 1600 	strd	r1, r6, [r0]
 800c5dc:	300c      	adds	r0, #12
 800c5de:	60a0      	str	r0, [r4, #8]
 800c5e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5e4:	f7ff fd3a 	bl	800c05c <memset>
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}

0800c5ec <__sfp_lock_acquire>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	; (800c5f4 <__sfp_lock_acquire+0x8>)
 800c5ee:	f000 b8b3 	b.w	800c758 <__retarget_lock_acquire_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	20000b05 	.word	0x20000b05

0800c5f8 <__sfp_lock_release>:
 800c5f8:	4801      	ldr	r0, [pc, #4]	; (800c600 <__sfp_lock_release+0x8>)
 800c5fa:	f000 b8ae 	b.w	800c75a <__retarget_lock_release_recursive>
 800c5fe:	bf00      	nop
 800c600:	20000b05 	.word	0x20000b05

0800c604 <__sinit_lock_acquire>:
 800c604:	4801      	ldr	r0, [pc, #4]	; (800c60c <__sinit_lock_acquire+0x8>)
 800c606:	f000 b8a7 	b.w	800c758 <__retarget_lock_acquire_recursive>
 800c60a:	bf00      	nop
 800c60c:	20000b06 	.word	0x20000b06

0800c610 <__sinit_lock_release>:
 800c610:	4801      	ldr	r0, [pc, #4]	; (800c618 <__sinit_lock_release+0x8>)
 800c612:	f000 b8a2 	b.w	800c75a <__retarget_lock_release_recursive>
 800c616:	bf00      	nop
 800c618:	20000b06 	.word	0x20000b06

0800c61c <__sinit>:
 800c61c:	b510      	push	{r4, lr}
 800c61e:	4604      	mov	r4, r0
 800c620:	f7ff fff0 	bl	800c604 <__sinit_lock_acquire>
 800c624:	69a3      	ldr	r3, [r4, #24]
 800c626:	b11b      	cbz	r3, 800c630 <__sinit+0x14>
 800c628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c62c:	f7ff bff0 	b.w	800c610 <__sinit_lock_release>
 800c630:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c634:	6523      	str	r3, [r4, #80]	; 0x50
 800c636:	4b13      	ldr	r3, [pc, #76]	; (800c684 <__sinit+0x68>)
 800c638:	4a13      	ldr	r2, [pc, #76]	; (800c688 <__sinit+0x6c>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c63e:	42a3      	cmp	r3, r4
 800c640:	bf04      	itt	eq
 800c642:	2301      	moveq	r3, #1
 800c644:	61a3      	streq	r3, [r4, #24]
 800c646:	4620      	mov	r0, r4
 800c648:	f000 f820 	bl	800c68c <__sfp>
 800c64c:	6060      	str	r0, [r4, #4]
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 f81c 	bl	800c68c <__sfp>
 800c654:	60a0      	str	r0, [r4, #8]
 800c656:	4620      	mov	r0, r4
 800c658:	f000 f818 	bl	800c68c <__sfp>
 800c65c:	2200      	movs	r2, #0
 800c65e:	60e0      	str	r0, [r4, #12]
 800c660:	2104      	movs	r1, #4
 800c662:	6860      	ldr	r0, [r4, #4]
 800c664:	f7ff ff82 	bl	800c56c <std>
 800c668:	68a0      	ldr	r0, [r4, #8]
 800c66a:	2201      	movs	r2, #1
 800c66c:	2109      	movs	r1, #9
 800c66e:	f7ff ff7d 	bl	800c56c <std>
 800c672:	68e0      	ldr	r0, [r4, #12]
 800c674:	2202      	movs	r2, #2
 800c676:	2112      	movs	r1, #18
 800c678:	f7ff ff78 	bl	800c56c <std>
 800c67c:	2301      	movs	r3, #1
 800c67e:	61a3      	str	r3, [r4, #24]
 800c680:	e7d2      	b.n	800c628 <__sinit+0xc>
 800c682:	bf00      	nop
 800c684:	0800c990 	.word	0x0800c990
 800c688:	0800c5b5 	.word	0x0800c5b5

0800c68c <__sfp>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	4607      	mov	r7, r0
 800c690:	f7ff ffac 	bl	800c5ec <__sfp_lock_acquire>
 800c694:	4b1e      	ldr	r3, [pc, #120]	; (800c710 <__sfp+0x84>)
 800c696:	681e      	ldr	r6, [r3, #0]
 800c698:	69b3      	ldr	r3, [r6, #24]
 800c69a:	b913      	cbnz	r3, 800c6a2 <__sfp+0x16>
 800c69c:	4630      	mov	r0, r6
 800c69e:	f7ff ffbd 	bl	800c61c <__sinit>
 800c6a2:	3648      	adds	r6, #72	; 0x48
 800c6a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	d503      	bpl.n	800c6b4 <__sfp+0x28>
 800c6ac:	6833      	ldr	r3, [r6, #0]
 800c6ae:	b30b      	cbz	r3, 800c6f4 <__sfp+0x68>
 800c6b0:	6836      	ldr	r6, [r6, #0]
 800c6b2:	e7f7      	b.n	800c6a4 <__sfp+0x18>
 800c6b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6b8:	b9d5      	cbnz	r5, 800c6f0 <__sfp+0x64>
 800c6ba:	4b16      	ldr	r3, [pc, #88]	; (800c714 <__sfp+0x88>)
 800c6bc:	60e3      	str	r3, [r4, #12]
 800c6be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6c2:	6665      	str	r5, [r4, #100]	; 0x64
 800c6c4:	f000 f847 	bl	800c756 <__retarget_lock_init_recursive>
 800c6c8:	f7ff ff96 	bl	800c5f8 <__sfp_lock_release>
 800c6cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6d4:	6025      	str	r5, [r4, #0]
 800c6d6:	61a5      	str	r5, [r4, #24]
 800c6d8:	2208      	movs	r2, #8
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6e0:	f7ff fcbc 	bl	800c05c <memset>
 800c6e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6f0:	3468      	adds	r4, #104	; 0x68
 800c6f2:	e7d9      	b.n	800c6a8 <__sfp+0x1c>
 800c6f4:	2104      	movs	r1, #4
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	f7ff ff62 	bl	800c5c0 <__sfmoreglue>
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	6030      	str	r0, [r6, #0]
 800c700:	2800      	cmp	r0, #0
 800c702:	d1d5      	bne.n	800c6b0 <__sfp+0x24>
 800c704:	f7ff ff78 	bl	800c5f8 <__sfp_lock_release>
 800c708:	230c      	movs	r3, #12
 800c70a:	603b      	str	r3, [r7, #0]
 800c70c:	e7ee      	b.n	800c6ec <__sfp+0x60>
 800c70e:	bf00      	nop
 800c710:	0800c990 	.word	0x0800c990
 800c714:	ffff0001 	.word	0xffff0001

0800c718 <_fwalk_reent>:
 800c718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c71c:	4606      	mov	r6, r0
 800c71e:	4688      	mov	r8, r1
 800c720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c724:	2700      	movs	r7, #0
 800c726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c72a:	f1b9 0901 	subs.w	r9, r9, #1
 800c72e:	d505      	bpl.n	800c73c <_fwalk_reent+0x24>
 800c730:	6824      	ldr	r4, [r4, #0]
 800c732:	2c00      	cmp	r4, #0
 800c734:	d1f7      	bne.n	800c726 <_fwalk_reent+0xe>
 800c736:	4638      	mov	r0, r7
 800c738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73c:	89ab      	ldrh	r3, [r5, #12]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d907      	bls.n	800c752 <_fwalk_reent+0x3a>
 800c742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c746:	3301      	adds	r3, #1
 800c748:	d003      	beq.n	800c752 <_fwalk_reent+0x3a>
 800c74a:	4629      	mov	r1, r5
 800c74c:	4630      	mov	r0, r6
 800c74e:	47c0      	blx	r8
 800c750:	4307      	orrs	r7, r0
 800c752:	3568      	adds	r5, #104	; 0x68
 800c754:	e7e9      	b.n	800c72a <_fwalk_reent+0x12>

0800c756 <__retarget_lock_init_recursive>:
 800c756:	4770      	bx	lr

0800c758 <__retarget_lock_acquire_recursive>:
 800c758:	4770      	bx	lr

0800c75a <__retarget_lock_release_recursive>:
 800c75a:	4770      	bx	lr

0800c75c <__swhatbuf_r>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	460e      	mov	r6, r1
 800c760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c764:	2900      	cmp	r1, #0
 800c766:	b096      	sub	sp, #88	; 0x58
 800c768:	4614      	mov	r4, r2
 800c76a:	461d      	mov	r5, r3
 800c76c:	da08      	bge.n	800c780 <__swhatbuf_r+0x24>
 800c76e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	602a      	str	r2, [r5, #0]
 800c776:	061a      	lsls	r2, r3, #24
 800c778:	d410      	bmi.n	800c79c <__swhatbuf_r+0x40>
 800c77a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c77e:	e00e      	b.n	800c79e <__swhatbuf_r+0x42>
 800c780:	466a      	mov	r2, sp
 800c782:	f000 f883 	bl	800c88c <_fstat_r>
 800c786:	2800      	cmp	r0, #0
 800c788:	dbf1      	blt.n	800c76e <__swhatbuf_r+0x12>
 800c78a:	9a01      	ldr	r2, [sp, #4]
 800c78c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c790:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c794:	425a      	negs	r2, r3
 800c796:	415a      	adcs	r2, r3
 800c798:	602a      	str	r2, [r5, #0]
 800c79a:	e7ee      	b.n	800c77a <__swhatbuf_r+0x1e>
 800c79c:	2340      	movs	r3, #64	; 0x40
 800c79e:	2000      	movs	r0, #0
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	b016      	add	sp, #88	; 0x58
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7a8 <__malloc_lock>:
 800c7a8:	4801      	ldr	r0, [pc, #4]	; (800c7b0 <__malloc_lock+0x8>)
 800c7aa:	f7ff bfd5 	b.w	800c758 <__retarget_lock_acquire_recursive>
 800c7ae:	bf00      	nop
 800c7b0:	20000b04 	.word	0x20000b04

0800c7b4 <__malloc_unlock>:
 800c7b4:	4801      	ldr	r0, [pc, #4]	; (800c7bc <__malloc_unlock+0x8>)
 800c7b6:	f7ff bfd0 	b.w	800c75a <__retarget_lock_release_recursive>
 800c7ba:	bf00      	nop
 800c7bc:	20000b04 	.word	0x20000b04

0800c7c0 <__sread>:
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c8:	f000 f884 	bl	800c8d4 <_read_r>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	bfab      	itete	ge
 800c7d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7d2:	89a3      	ldrhlt	r3, [r4, #12]
 800c7d4:	181b      	addge	r3, r3, r0
 800c7d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7da:	bfac      	ite	ge
 800c7dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7de:	81a3      	strhlt	r3, [r4, #12]
 800c7e0:	bd10      	pop	{r4, pc}

0800c7e2 <__swrite>:
 800c7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e6:	461f      	mov	r7, r3
 800c7e8:	898b      	ldrh	r3, [r1, #12]
 800c7ea:	05db      	lsls	r3, r3, #23
 800c7ec:	4605      	mov	r5, r0
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	4616      	mov	r6, r2
 800c7f2:	d505      	bpl.n	800c800 <__swrite+0x1e>
 800c7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f000 f858 	bl	800c8b0 <_lseek_r>
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c80a:	81a3      	strh	r3, [r4, #12]
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	4628      	mov	r0, r5
 800c812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c816:	f000 b817 	b.w	800c848 <_write_r>

0800c81a <__sseek>:
 800c81a:	b510      	push	{r4, lr}
 800c81c:	460c      	mov	r4, r1
 800c81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c822:	f000 f845 	bl	800c8b0 <_lseek_r>
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	bf15      	itete	ne
 800c82c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c82e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c836:	81a3      	strheq	r3, [r4, #12]
 800c838:	bf18      	it	ne
 800c83a:	81a3      	strhne	r3, [r4, #12]
 800c83c:	bd10      	pop	{r4, pc}

0800c83e <__sclose>:
 800c83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c842:	f000 b813 	b.w	800c86c <_close_r>
	...

0800c848 <_write_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d07      	ldr	r5, [pc, #28]	; (800c868 <_write_r+0x20>)
 800c84c:	4604      	mov	r4, r0
 800c84e:	4608      	mov	r0, r1
 800c850:	4611      	mov	r1, r2
 800c852:	2200      	movs	r2, #0
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	f7f4 ff2d 	bl	80016b6 <_write>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_write_r+0x1e>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_write_r+0x1e>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	20000b08 	.word	0x20000b08

0800c86c <_close_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d06      	ldr	r5, [pc, #24]	; (800c888 <_close_r+0x1c>)
 800c870:	2300      	movs	r3, #0
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	f7f4 ff39 	bl	80016ee <_close>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_close_r+0x1a>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_close_r+0x1a>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20000b08 	.word	0x20000b08

0800c88c <_fstat_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	; (800c8ac <_fstat_r+0x20>)
 800c890:	2300      	movs	r3, #0
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	4611      	mov	r1, r2
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	f7f4 ff34 	bl	8001706 <_fstat>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	d102      	bne.n	800c8a8 <_fstat_r+0x1c>
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	b103      	cbz	r3, 800c8a8 <_fstat_r+0x1c>
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	bd38      	pop	{r3, r4, r5, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20000b08 	.word	0x20000b08

0800c8b0 <_lseek_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	; (800c8d0 <_lseek_r+0x20>)
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	4608      	mov	r0, r1
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f7f4 ff31 	bl	8001726 <_lseek>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_lseek_r+0x1e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_lseek_r+0x1e>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	20000b08 	.word	0x20000b08

0800c8d4 <_read_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d07      	ldr	r5, [pc, #28]	; (800c8f4 <_read_r+0x20>)
 800c8d8:	4604      	mov	r4, r0
 800c8da:	4608      	mov	r0, r1
 800c8dc:	4611      	mov	r1, r2
 800c8de:	2200      	movs	r2, #0
 800c8e0:	602a      	str	r2, [r5, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f7f4 feca 	bl	800167c <_read>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_read_r+0x1e>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_read_r+0x1e>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	20000b08 	.word	0x20000b08

0800c8f8 <_init>:
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	bf00      	nop
 800c8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8fe:	bc08      	pop	{r3}
 800c900:	469e      	mov	lr, r3
 800c902:	4770      	bx	lr

0800c904 <_fini>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	bf00      	nop
 800c908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c90a:	bc08      	pop	{r3}
 800c90c:	469e      	mov	lr, r3
 800c90e:	4770      	bx	lr
