
ili9341 8bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c88  080057d0  080057d0  000157d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007458  08007458  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007460  08007460  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000018  08007480  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08007480  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e08  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bb  00000000  00000000  00028e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225f4  00000000  00000000  0002b668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a35  00000000  00000000  0004dc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3e70  00000000  00000000  00057691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b501  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002078  00000000  00000000  0012b554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080057b4 	.word	0x080057b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	080057b4 	.word	0x080057b4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b974 	b.w	8000e44 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468e      	mov	lr, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14d      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4694      	mov	ip, r2
 8000b86:	d969      	bls.n	8000c5c <__udivmoddi4+0xe8>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b152      	cbz	r2, 8000ba4 <__udivmoddi4+0x30>
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	f1c2 0120 	rsb	r1, r2, #32
 8000b96:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba2:	4094      	lsls	r4, r2
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	0c21      	lsrs	r1, r4, #16
 8000baa:	fbbe f6f8 	udiv	r6, lr, r8
 8000bae:	fa1f f78c 	uxth.w	r7, ip
 8000bb2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bba:	fb06 f107 	mul.w	r1, r6, r7
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bca:	f080 811f 	bcs.w	8000e0c <__udivmoddi4+0x298>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 811c 	bls.w	8000e0c <__udivmoddi4+0x298>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be0:	fb08 3310 	mls	r3, r8, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 f707 	mul.w	r7, r0, r7
 8000bec:	42a7      	cmp	r7, r4
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x92>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf8:	f080 810a 	bcs.w	8000e10 <__udivmoddi4+0x29c>
 8000bfc:	42a7      	cmp	r7, r4
 8000bfe:	f240 8107 	bls.w	8000e10 <__udivmoddi4+0x29c>
 8000c02:	4464      	add	r4, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	1be4      	subs	r4, r4, r7
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	b11d      	cbz	r5, 8000c18 <__udivmoddi4+0xa4>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c5 4300 	strd	r4, r3, [r5]
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0xc2>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	f000 80ef 	beq.w	8000e06 <__udivmoddi4+0x292>
 8000c28:	2600      	movs	r6, #0
 8000c2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2e:	4630      	mov	r0, r6
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	fab3 f683 	clz	r6, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d14a      	bne.n	8000cd4 <__udivmoddi4+0x160>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xd4>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 80f9 	bhi.w	8000e3a <__udivmoddi4+0x2c6>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	469e      	mov	lr, r3
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d0e0      	beq.n	8000c18 <__udivmoddi4+0xa4>
 8000c56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5a:	e7dd      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000c5c:	b902      	cbnz	r2, 8000c60 <__udivmoddi4+0xec>
 8000c5e:	deff      	udf	#255	; 0xff
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 8092 	bne.w	8000d8e <__udivmoddi4+0x21a>
 8000c6a:	eba1 010c 	sub.w	r1, r1, ip
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2601      	movs	r6, #1
 8000c78:	0c20      	lsrs	r0, r4, #16
 8000c7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c86:	fb0e f003 	mul.w	r0, lr, r3
 8000c8a:	4288      	cmp	r0, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x12c>
 8000c8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x12a>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2c0>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	1a09      	subs	r1, r1, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x156>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x154>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2ca>
 8000cc8:	4608      	mov	r0, r1
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd2:	e79c      	b.n	8000c0e <__udivmoddi4+0x9a>
 8000cd4:	f1c6 0720 	rsb	r7, r6, #32
 8000cd8:	40b3      	lsls	r3, r6
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cea:	431c      	orrs	r4, r3
 8000cec:	40f9      	lsrs	r1, r7
 8000cee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfa:	0c20      	lsrs	r0, r4, #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fb09 1118 	mls	r1, r9, r8, r1
 8000d04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d08:	fb08 f00e 	mul.w	r0, r8, lr
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b8>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2bc>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2bc>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4461      	add	r1, ip
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d34:	fb09 1110 	mls	r1, r9, r0, r1
 8000d38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d40:	458e      	cmp	lr, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1e2>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2b4>
 8000d4e:	458e      	cmp	lr, r1
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2b4>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5e:	eba1 010e 	sub.w	r1, r1, lr
 8000d62:	42a1      	cmp	r1, r4
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46a6      	mov	lr, r4
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x2a4>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x2a0>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x212>
 8000d6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d72:	eb61 010e 	sbc.w	r1, r1, lr
 8000d76:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7e:	40f1      	lsrs	r1, r6
 8000d80:	431f      	orrs	r7, r3
 8000d82:	e9c5 7100 	strd	r7, r1, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	40d8      	lsrs	r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	4301      	orrs	r1, r0
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dac:	fb07 3610 	mls	r6, r7, r0, r3
 8000db0:	0c0b      	lsrs	r3, r1, #16
 8000db2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x260>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b8>
 8000dcc:	429e      	cmp	r6, r3
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b8>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1b9b      	subs	r3, r3, r6
 8000dd6:	b289      	uxth	r1, r1
 8000dd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ddc:	fb07 3316 	mls	r3, r7, r6, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb06 f30e 	mul.w	r3, r6, lr
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x28a>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2b0>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2b0>
 8000dfa:	3e02      	subs	r6, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0x104>
 8000e06:	462e      	mov	r6, r5
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e705      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	e6e3      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6f8      	b.n	8000c06 <__udivmoddi4+0x92>
 8000e14:	454b      	cmp	r3, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f8>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e20:	3801      	subs	r0, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f8>
 8000e24:	4646      	mov	r6, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x28a>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1e2>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b8>
 8000e34:	3b02      	subs	r3, #2
 8000e36:	4461      	add	r1, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x12c>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e709      	b.n	8000c52 <__udivmoddi4+0xde>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x156>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <fclamp>:
//static uint32_t ADC_ChannelX;
//static uint32_t ADC_ChannelY;
static LCD_TouchState m_touch_state = LCD_TOUCH_IDLE;
//static LCD_TouchPoint* m_last_point_ref = NULL;

static float fclamp(float x, float l, float u) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e56:	ed87 1a01 	vstr	s2, [r7, #4]
	return x < l ? l : (x > u ? u : x);
 8000e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6a:	d501      	bpl.n	8000e70 <fclamp+0x28>
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	e00b      	b.n	8000e88 <fclamp+0x40>
 8000e70:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e74:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	dd01      	ble.n	8000e86 <fclamp+0x3e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	e000      	b.n	8000e88 <fclamp+0x40>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	ee07 3a90 	vmov	s15, r3
}
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <adc_norm_x>:

static float adc_norm_x(uint32_t x) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	return (x - TOUCH_ADC_X_MIN) * ADC_UNIT_PX_X;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000ec8 <adc_norm_x+0x2c>
 8000eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	39957478 	.word	0x39957478

08000ecc <adc_norm_y>:

static float adc_norm_y(uint32_t y) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	return (y - TOUCH_ADC_Y_MIN) * ADC_UNIT_PX_Y;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3bbf      	subs	r3, #191	; 0xbf
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000ef8 <adc_norm_y+0x2c>
 8000ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	399f42e1 	.word	0x399f42e1

08000efc <LCD_GPIO_Init>:
//								HAL_Delay(3);
//								LCD_RD_IDLE();
//								HAL_Delay(3);
//							} while(0)

static void LCD_GPIO_Init(uint32_t mode) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]


	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d003      	beq.n	8000f12 <LCD_GPIO_Init+0x16>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f040 808f 	bne.w	8001030 <LCD_GPIO_Init+0x134>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a47      	ldr	r2, [pc, #284]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b45      	ldr	r3, [pc, #276]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a40      	ldr	r2, [pc, #256]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a39      	ldr	r2, [pc, #228]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <LCD_GPIO_Init+0x13c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000f66:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	482f      	ldr	r0, [pc, #188]	; (800103c <LCD_GPIO_Init+0x140>)
 8000f80:	f003 fc8a 	bl	8004898 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8000f84:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000f88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4828      	ldr	r0, [pc, #160]	; (8001040 <LCD_GPIO_Init+0x144>)
 8000f9e:	f003 fc7b 	bl	8004898 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4822      	ldr	r0, [pc, #136]	; (8001044 <LCD_GPIO_Init+0x148>)
 8000fba:	f003 fc6d 	bl	8004898 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8000fbe:	2313      	movs	r3, #19
 8000fc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4819      	ldr	r0, [pc, #100]	; (800103c <LCD_GPIO_Init+0x140>)
 8000fd6:	f003 fc5f 	bl	8004898 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <LCD_GPIO_Init+0x144>)
 8000ff2:	f003 fc51 	bl	8004898 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LCD_GPIO_Init+0x148>)
 800100e:	f003 fc43 	bl	8004898 <HAL_GPIO_Init>

	/*Configure GPIO test pins : PC4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001012:	2310      	movs	r3, #16
 8001014:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <LCD_GPIO_Init+0x148>)
 800102a:	f003 fc35 	bl	8004898 <HAL_GPIO_Init>
 800102e:	e000      	b.n	8001032 <LCD_GPIO_Init+0x136>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8001030:	bf00      	nop
}
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800

08001048 <LCD_Write8>:



static inline void LCD_Write8(uint8_t data) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <LCD_Write8+0x9c>)
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105a:	4013      	ands	r3, r2
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	0252      	lsls	r2, r2, #9
 8001060:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001064:	431a      	orrs	r2, r3
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106e:	431a      	orrs	r2, r3
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	491a      	ldr	r1, [pc, #104]	; (80010e4 <LCD_Write8+0x9c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <LCD_Write8+0xa0>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8001086:	4013      	ands	r3, r2
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	f002 0208 	and.w	r2, r2, #8
 800108e:	431a      	orrs	r2, r3
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	f003 0320 	and.w	r3, r3, #32
 8001098:	431a      	orrs	r2, r3
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	105b      	asrs	r3, r3, #1
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	431a      	orrs	r2, r3
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LCD_Write8+0xa0>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <LCD_Write8+0xa4>)
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80010ba:	4013      	ands	r3, r2
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	0192      	lsls	r2, r2, #6
 80010c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010c4:	4909      	ldr	r1, [pc, #36]	; (80010ec <LCD_Write8+0xa4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	614b      	str	r3, [r1, #20]

	LCD_WR_ACTIVE();
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <LCD_Write8+0x9c>)
 80010cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d0:	619a      	str	r2, [r3, #24]

	LCD_WR_IDLE();
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <LCD_Write8+0x9c>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	619a      	str	r2, [r3, #24]

}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800

080010f0 <TFT_24S_Write_Command>:

void TFT_24S_Write_Command(uint16_t command)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]

	LCD_CD_COMMAND();
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <TFT_24S_Write_Command+0x24>)
 80010fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001100:	619a      	str	r2, [r3, #24]
	LCD_Write8(command);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff9e 	bl	8001048 <LCD_Write8>


}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020000 	.word	0x40020000

08001118 <TFT_24S_Write_Data>:
void TFT_24S_Write_Data(uint16_t data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	LCD_CD_DATA();
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <TFT_24S_Write_Data+0x24>)
 8001124:	2210      	movs	r2, #16
 8001126:	619a      	str	r2, [r3, #24]
	LCD_Write8(data);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff8b 	bl	8001048 <LCD_Write8>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020000 	.word	0x40020000

08001140 <LCD_Write16Register8>:
	LCD_Write8(a);
	LCD_CD_DATA();
	LCD_Write8(d);
}

static inline void LCD_Write16Register8(uint8_t a, uint16_t d) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <LCD_Write16Register8+0x48>)
 8001152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001156:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff74 	bl	8001048 <LCD_Write8>
	LCD_CD_DATA();
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <LCD_Write16Register8+0x48>)
 8001162:	2210      	movs	r2, #16
 8001164:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff6a 	bl	8001048 <LCD_Write8>
	LCD_Write8(d);
 8001174:	88bb      	ldrh	r3, [r7, #4]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff65 	bl	8001048 <LCD_Write8>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <LCD_Write32Register8>:
	LCD_Write8(d >> 16);
	LCD_Write8(d >> 8);
	LCD_Write8(d);
}

static inline void LCD_Write32Register8(uint8_t a, uint32_t d) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
	LCD_CD_COMMAND();
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <LCD_Write32Register8+0x58>)
 800119a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800119e:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff50 	bl	8001048 <LCD_Write8>
	LCD_CD_DATA();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <LCD_Write32Register8+0x58>)
 80011aa:	2210      	movs	r2, #16
 80011ac:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 24);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	0e1b      	lsrs	r3, r3, #24
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff47 	bl	8001048 <LCD_Write8>
	LCD_Write8(d >> 16);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	0c1b      	lsrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff41 	bl	8001048 <LCD_Write8>
	LCD_Write8(d >> 8);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff3b 	bl	8001048 <LCD_Write8>
	LCD_Write8(d);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff36 	bl	8001048 <LCD_Write8>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020000 	.word	0x40020000

080011e8 <LCD_init>:
}



void LCD_init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
//	volatile uint32_t temp=0;
	m_width = TFTWIDTH;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <LCD_init+0x1e8>)
 80011ee:	22f0      	movs	r2, #240	; 0xf0
 80011f0:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 80011f2:	4b78      	ldr	r3, [pc, #480]	; (80013d4 <LCD_init+0x1ec>)
 80011f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011f8:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <LCD_init+0x1f0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	801a      	strh	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8001200:	4b76      	ldr	r3, [pc, #472]	; (80013dc <LCD_init+0x1f4>)
 8001202:	2200      	movs	r2, #0
 8001204:	801a      	strh	r2, [r3, #0]
 8001206:	4b75      	ldr	r3, [pc, #468]	; (80013dc <LCD_init+0x1f4>)
 8001208:	f9b3 2000 	ldrsh.w	r2, [r3]
 800120c:	4b74      	ldr	r3, [pc, #464]	; (80013e0 <LCD_init+0x1f8>)
 800120e:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 8001210:	4b74      	ldr	r3, [pc, #464]	; (80013e4 <LCD_init+0x1fc>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	m_textcolor = BLUE;
 8001216:	4b74      	ldr	r3, [pc, #464]	; (80013e8 <LCD_init+0x200>)
 8001218:	221f      	movs	r2, #31
 800121a:	801a      	strh	r2, [r3, #0]
	m_textbgcolor = WHITE;
 800121c:	4b73      	ldr	r3, [pc, #460]	; (80013ec <LCD_init+0x204>)
 800121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001222:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8001224:	4b72      	ldr	r3, [pc, #456]	; (80013f0 <LCD_init+0x208>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
	LCD_GPIO_Init(GPIO_MODE_OUTPUT_PP);
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff fe66 	bl	8000efc <LCD_GPIO_Init>
	LCD_CS_ACTIVE();
 8001230:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <LCD_init+0x20c>)
 8001232:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001236:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8001238:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <LCD_init+0x210>)
 800123a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800123e:	619a      	str	r2, [r3, #24]
	LCD_RST_IDLE();
 8001240:	4b6e      	ldr	r3, [pc, #440]	; (80013fc <LCD_init+0x214>)
 8001242:	2202      	movs	r2, #2
 8001244:	619a      	str	r2, [r3, #24]
	LCD_WR_ACTIVE();
 8001246:	4b6c      	ldr	r3, [pc, #432]	; (80013f8 <LCD_init+0x210>)
 8001248:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800124c:	619a      	str	r2, [r3, #24]
	LCD_RD_ACTIVE();
 800124e:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <LCD_init+0x210>)
 8001250:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001254:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8001256:	200a      	movs	r0, #10
 8001258:	f002 fd7a 	bl	8003d50 <HAL_Delay>

	LCD_CS_IDLE();
 800125c:	4b65      	ldr	r3, [pc, #404]	; (80013f4 <LCD_init+0x20c>)
 800125e:	2201      	movs	r2, #1
 8001260:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8001262:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <LCD_init+0x210>)
 8001264:	2210      	movs	r2, #16
 8001266:	619a      	str	r2, [r3, #24]
	LCD_RST_ACTIVE();
 8001268:	4b64      	ldr	r3, [pc, #400]	; (80013fc <LCD_init+0x214>)
 800126a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800126e:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8001270:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <LCD_init+0x210>)
 8001272:	2202      	movs	r2, #2
 8001274:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8001276:	4b60      	ldr	r3, [pc, #384]	; (80013f8 <LCD_init+0x210>)
 8001278:	2201      	movs	r2, #1
 800127a:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 800127c:	2014      	movs	r0, #20
 800127e:	f002 fd67 	bl	8003d50 <HAL_Delay>

	LCD_CS_ACTIVE();
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <LCD_init+0x20c>)
 8001284:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001288:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 800128a:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <LCD_init+0x210>)
 800128c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001290:	619a      	str	r2, [r3, #24]
	LCD_RST_IDLE();
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <LCD_init+0x214>)
 8001294:	2202      	movs	r2, #2
 8001296:	619a      	str	r2, [r3, #24]
	LCD_WR_ACTIVE();
 8001298:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <LCD_init+0x210>)
 800129a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129e:	619a      	str	r2, [r3, #24]
	LCD_RD_ACTIVE();
 80012a0:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <LCD_init+0x210>)
 80012a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012a6:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 80012a8:	2014      	movs	r0, #20
 80012aa:	f002 fd51 	bl	8003d50 <HAL_Delay>


	LCD_CS_IDLE();
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <LCD_init+0x20c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 80012b4:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <LCD_init+0x210>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 80012ba:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <LCD_init+0x210>)
 80012bc:	2201      	movs	r2, #1
 80012be:	619a      	str	r2, [r3, #24]
	LCD_CS_ACTIVE();
 80012c0:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <LCD_init+0x20c>)
 80012c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c6:	619a      	str	r2, [r3, #24]
//	  TFT_24S_Write_Data(0x08);
//
//	  TFT_24S_Write_Command(0x11); // Sleep OUT
//	  TFT_24S_Write_Command(0x29); // Display ON

	TFT_24S_Write_Command (ILI9341_RESET); // software reset comand
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff ff11 	bl	80010f0 <TFT_24S_Write_Command>
	   HAL_Delay(100);
 80012ce:	2064      	movs	r0, #100	; 0x64
 80012d0:	f002 fd3e 	bl	8003d50 <HAL_Delay>
	   TFT_24S_Write_Command (ILI9341_DISPLAY_OFF); // display off
 80012d4:	2028      	movs	r0, #40	; 0x28
 80012d6:	f7ff ff0b 	bl	80010f0 <TFT_24S_Write_Command>
	   //------------power control------------------------------
	   TFT_24S_Write_Command (ILI9341_POWER1); // power control
 80012da:	20c0      	movs	r0, #192	; 0xc0
 80012dc:	f7ff ff08 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data   (0x26); // GVDD = 4.75v
 80012e0:	2026      	movs	r0, #38	; 0x26
 80012e2:	f7ff ff19 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Command (ILI9341_POWER2); // power control
 80012e6:	20c1      	movs	r0, #193	; 0xc1
 80012e8:	f7ff ff02 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80012ec:	2011      	movs	r0, #17
 80012ee:	f7ff ff13 	bl	8001118 <TFT_24S_Write_Data>
	   //--------------VCOM-------------------------------------
	   TFT_24S_Write_Command (ILI9341_VCOM1); // vcom control
 80012f2:	20c5      	movs	r0, #197	; 0xc5
 80012f4:	f7ff fefc 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80012f8:	2035      	movs	r0, #53	; 0x35
 80012fa:	f7ff ff0d 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80012fe:	203e      	movs	r0, #62	; 0x3e
 8001300:	f7ff ff0a 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Command (ILI9341_VCOM2); // vcom control
 8001304:	20c7      	movs	r0, #199	; 0xc7
 8001306:	f7ff fef3 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data   (0xbe);
 800130a:	20be      	movs	r0, #190	; 0xbe
 800130c:	f7ff ff04 	bl	8001118 <TFT_24S_Write_Data>

	   //------------memory access control------------------------
	   TFT_24S_Write_Command (ILI9341_MAC); // memory access control
 8001310:	2036      	movs	r0, #54	; 0x36
 8001312:	f7ff feed 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data(0x48);
 8001316:	2048      	movs	r0, #72	; 0x48
 8001318:	f7ff fefe 	bl	8001118 <TFT_24S_Write_Data>

	   TFT_24S_Write_Command (ILI9341_PIXEL_FORMAT); // pixel format set
 800131c:	203a      	movs	r0, #58	; 0x3a
 800131e:	f7ff fee7 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data   (0x55); // 16bit /pixel
 8001322:	2055      	movs	r0, #85	; 0x55
 8001324:	f7ff fef8 	bl	8001118 <TFT_24S_Write_Data>

	   TFT_24S_Write_Command(ILI9341_FRC);
 8001328:	20b1      	movs	r0, #177	; 0xb1
 800132a:	f7ff fee1 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data(0);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fef2 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data(0x1F);
 8001334:	201f      	movs	r0, #31
 8001336:	f7ff feef 	bl	8001118 <TFT_24S_Write_Data>
	   //-------------ddram ----------------------------
	   TFT_24S_Write_Command (ILI9341_COLUMN_ADDR); // column set
 800133a:	202a      	movs	r0, #42	; 0x2a
 800133c:	f7ff fed8 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data   (0x00); // x0_HIGH---0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fee9 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0x00); // x0_LOW----0
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fee6 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0x00); // x1_HIGH---240
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fee3 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0xEF); // x1_LOW----240
 8001352:	20ef      	movs	r0, #239	; 0xef
 8001354:	f7ff fee0 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Command (ILI9341_PAGE_ADDR); // page address set
 8001358:	202b      	movs	r0, #43	; 0x2b
 800135a:	f7ff fec9 	bl	80010f0 <TFT_24S_Write_Command>
	   TFT_24S_Write_Data   (0x00); // y0_HIGH---0
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff feda 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0x00); // y0_LOW----0
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fed7 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0x01); // y1_HIGH---320
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fed4 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0x3F); // y1_LOW----320
 8001370:	203f      	movs	r0, #63	; 0x3f
 8001372:	f7ff fed1 	bl	8001118 <TFT_24S_Write_Data>

	   TFT_24S_Write_Command (ILI9341_TEARING_OFF); // tearing effect off
 8001376:	2034      	movs	r0, #52	; 0x34
 8001378:	f7ff feba 	bl	80010f0 <TFT_24S_Write_Command>
	   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
	   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
	   TFT_24S_Write_Command (ILI9341_Entry_Mode_Set); // entry mode set
 800137c:	20b7      	movs	r0, #183	; 0xb7
 800137e:	f7ff feb7 	bl	80010f0 <TFT_24S_Write_Command>
	   // Deep Standby Mode: OFF
	   // Set the output level of gate driver G1-G320: Normal display
	   // Low voltage detection: Disable
	   TFT_24S_Write_Data   (0x07);
 8001382:	2007      	movs	r0, #7
 8001384:	f7ff fec8 	bl	8001118 <TFT_24S_Write_Data>
	   //-----------------display------------------------
	   TFT_24S_Write_Command (ILI9341_DFC); // display function control
 8001388:	20b6      	movs	r0, #182	; 0xb6
 800138a:	f7ff feb1 	bl	80010f0 <TFT_24S_Write_Command>
	   //Set the scan mode in non-display area
	   //Determine source/VCOM output in a non-display area in the partial display mode
	   TFT_24S_Write_Data   (0x0a);
 800138e:	200a      	movs	r0, #10
 8001390:	f7ff fec2 	bl	8001118 <TFT_24S_Write_Data>
	   //Select whether the liquid crystal type is normally white type or normally black type
	   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
	   //Select the shift direction of outputs from the source driver
	   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
	   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
	   TFT_24S_Write_Data   (0x82);
 8001394:	2082      	movs	r0, #130	; 0x82
 8001396:	f7ff febf 	bl	8001118 <TFT_24S_Write_Data>
	   // Sets the number of lines to drive the LCD at an interval of 8 lines
	   TFT_24S_Write_Data   (0x27);
 800139a:	2027      	movs	r0, #39	; 0x27
 800139c:	f7ff febc 	bl	8001118 <TFT_24S_Write_Data>
	   TFT_24S_Write_Data   (0x00); // clock divisor
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff feb9 	bl	8001118 <TFT_24S_Write_Data>

	   TFT_24S_Write_Command (ILI9341_SLEEP_OUT); // sleep out
 80013a6:	2011      	movs	r0, #17
 80013a8:	f7ff fea2 	bl	80010f0 <TFT_24S_Write_Command>
	   HAL_Delay(100);
 80013ac:	2064      	movs	r0, #100	; 0x64
 80013ae:	f002 fccf 	bl	8003d50 <HAL_Delay>
	   TFT_24S_Write_Command (ILI9341_DISPLAY_ON); // display on
 80013b2:	2029      	movs	r0, #41	; 0x29
 80013b4:	f7ff fe9c 	bl	80010f0 <TFT_24S_Write_Command>
	   HAL_Delay(100);
 80013b8:	2064      	movs	r0, #100	; 0x64
 80013ba:	f002 fcc9 	bl	8003d50 <HAL_Delay>
	   TFT_24S_Write_Command (ILI9341_GRAM); // memory write
 80013be:	202c      	movs	r0, #44	; 0x2c
 80013c0:	f7ff fe96 	bl	80010f0 <TFT_24S_Write_Command>
	   HAL_Delay(5);
 80013c4:	2005      	movs	r0, #5
 80013c6:	f002 fcc3 	bl	8003d50 <HAL_Delay>

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000034 	.word	0x20000034
 80013d4:	20000036 	.word	0x20000036
 80013d8:	20000042 	.word	0x20000042
 80013dc:	20000038 	.word	0x20000038
 80013e0:	2000003a 	.word	0x2000003a
 80013e4:	20000040 	.word	0x20000040
 80013e8:	2000003c 	.word	0x2000003c
 80013ec:	2000003e 	.word	0x2000003e
 80013f0:	20000045 	.word	0x20000045
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020800 	.word	0x40020800

08001400 <LCD_Flood>:

void LCD_Flood(uint16_t color, uint32_t len) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	80fb      	strh	r3, [r7, #6]
uint8_t hi = color >> 8, lo = color;
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	73bb      	strb	r3, [r7, #14]
LCD_CS_ACTIVE();
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <LCD_Flood+0x7c>)
 800141a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141e:	619a      	str	r2, [r3, #24]
LCD_Write16Register8(ILI9341_MEMORYWRITE, color);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4619      	mov	r1, r3
 8001424:	202c      	movs	r0, #44	; 0x2c
 8001426:	f7ff fe8b 	bl	8001140 <LCD_Write16Register8>
len--;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
     if (hi == lo) {
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	429a      	cmp	r2, r3
 8001436:	d115      	bne.n	8001464 <LCD_Flood+0x64>
          while (len--) {
 8001438:	e006      	b.n	8001448 <LCD_Flood+0x48>
				LCD_WR_ACTIVE();
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <LCD_Flood+0x80>)
 800143c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001440:	619a      	str	r2, [r3, #24]

				LCD_WR_IDLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <LCD_Flood+0x80>)
 8001444:	2202      	movs	r2, #2
 8001446:	619a      	str	r2, [r3, #24]
          while (len--) {
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	603a      	str	r2, [r7, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f3      	bne.n	800143a <LCD_Flood+0x3a>
 8001452:	e00c      	b.n	800146e <LCD_Flood+0x6e>

		        }
	           }
       else {
		while (len--) {
                        LCD_Write8(hi);
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fdf6 	bl	8001048 <LCD_Write8>
			LCD_Write8(lo);
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fdf2 	bl	8001048 <LCD_Write8>
		while (len--) {
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	603a      	str	r2, [r7, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f2      	bne.n	8001454 <LCD_Flood+0x54>
                              }
               	}

	LCD_CS_IDLE();
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <LCD_Flood+0x7c>)
 8001470:	2201      	movs	r2, #1
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40020400 	.word	0x40020400
 8001480:	40020000 	.word	0x40020000

08001484 <LCD_SetAddrWindow>:

void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	80bb      	strh	r3, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <LCD_SetAddrWindow+0x54>)
 80014a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a8:	619a      	str	r2, [r3, #24]
	LCD_Write32Register8(ILI9341_COLADDRSET, (x1 << 16) | x2);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	202a      	movs	r0, #42	; 0x2a
 80014b6:	f7ff fe69 	bl	800118c <LCD_Write32Register8>
	LCD_Write32Register8(ILI9341_PAGEADDRSET, (y1 << 16) | y2);
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	883b      	ldrh	r3, [r7, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	202b      	movs	r0, #43	; 0x2b
 80014c6:	f7ff fe61 	bl	800118c <LCD_Write32Register8>
        LCD_CS_IDLE();
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <LCD_SetAddrWindow+0x54>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	619a      	str	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40020400 	.word	0x40020400

080014dc <LCD_FillScreen>:


void LCD_FillScreen(uint16_t color) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
       LCD_SetAddrWindow(0, 0, 240 - 1, 320 - 1);
 80014e6:	f240 133f 	movw	r3, #319	; 0x13f
 80014ea:	22ef      	movs	r2, #239	; 0xef
 80014ec:	2100      	movs	r1, #0
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff ffc8 	bl	8001484 <LCD_SetAddrWindow>
       LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff80 	bl	8001400 <LCD_Flood>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <LCD_DrawPixel>:
	LCD_CS_IDLE();
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
}


void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
 8001512:	460b      	mov	r3, r1
 8001514:	80bb      	strh	r3, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db32      	blt.n	8001588 <LCD_DrawPixel+0x80>
 8001522:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db2e      	blt.n	8001588 <LCD_DrawPixel+0x80>
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <LCD_DrawPixel+0x88>)
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001534:	429a      	cmp	r2, r3
 8001536:	da27      	bge.n	8001588 <LCD_DrawPixel+0x80>
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <LCD_DrawPixel+0x8c>)
 800153a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001542:	429a      	cmp	r2, r3
 8001544:	da20      	bge.n	8001588 <LCD_DrawPixel+0x80>

	LCD_CS_ACTIVE();
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <LCD_DrawPixel+0x90>)
 8001548:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800154c:	619a      	str	r2, [r3, #24]
        LCD_SetAddrWindow(x, y, m_width - 1, m_height - 1);
 800154e:	88f8      	ldrh	r0, [r7, #6]
 8001550:	88b9      	ldrh	r1, [r7, #4]
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <LCD_DrawPixel+0x88>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <LCD_DrawPixel+0x8c>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	f7ff ff8b 	bl	8001484 <LCD_SetAddrWindow>
	LCD_CS_ACTIVE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <LCD_DrawPixel+0x90>)
 8001570:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001574:	619a      	str	r2, [r3, #24]
	LCD_Write16Register8(ILI9341_MEMORYWRITE, color);
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	4619      	mov	r1, r3
 800157a:	202c      	movs	r0, #44	; 0x2c
 800157c:	f7ff fde0 	bl	8001140 <LCD_Write16Register8>
        LCD_CS_IDLE();
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <LCD_DrawPixel+0x90>)
 8001582:	2201      	movs	r2, #1
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	e000      	b.n	800158a <LCD_DrawPixel+0x82>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8001588:	bf00      	nop
      }
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000034 	.word	0x20000034
 8001594:	20000036 	.word	0x20000036
 8001598:	40020400 	.word	0x40020400

0800159c <LCD_FillRect>:
	LCD_DrawFastHLine(x, y + h - 1, w, color);
	LCD_DrawFastVLine(x, y, h, color);
	LCD_DrawFastVLine(x + w - 1, y, h, color);
}

void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h, uint16_t color) {
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4604      	mov	r4, r0
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	4603      	mov	r3, r0
 80015b0:	80bb      	strh	r3, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	807b      	strh	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 80015ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f340 808b 	ble.w	80016da <LCD_FillRect+0x13e>
 80015c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f340 8086 	ble.w	80016da <LCD_FillRect+0x13e>
 80015ce:	4b45      	ldr	r3, [pc, #276]	; (80016e4 <LCD_FillRect+0x148>)
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015d8:	429a      	cmp	r2, r3
 80015da:	da7e      	bge.n	80016da <LCD_FillRect+0x13e>
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <LCD_FillRect+0x14c>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	da77      	bge.n	80016da <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	81fb      	strh	r3, [r7, #14]
 80015f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db6c      	blt.n	80016da <LCD_FillRect+0x13e>
 8001600:	88ba      	ldrh	r2, [r7, #4]
 8001602:	883b      	ldrh	r3, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	b29b      	uxth	r3, r3
 8001608:	3b01      	subs	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	81bb      	strh	r3, [r7, #12]
 800160e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db61      	blt.n	80016da <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 8001616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da06      	bge.n	800162c <LCD_FillRect+0x90>
		w += x;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4413      	add	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	807b      	strh	r3, [r7, #2]
		x = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 800162c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	da06      	bge.n	8001642 <LCD_FillRect+0xa6>
		h += y1;
 8001634:	883a      	ldrh	r2, [r7, #0]
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <LCD_FillRect+0x148>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800164c:	429a      	cmp	r2, r3
 800164e:	db0d      	blt.n	800166c <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <LCD_FillRect+0x148>)
 8001652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001656:	b29b      	uxth	r3, r3
 8001658:	3b01      	subs	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 800165e:	89fa      	ldrh	r2, [r7, #14]
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <LCD_FillRect+0x14c>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001676:	429a      	cmp	r2, r3
 8001678:	db0d      	blt.n	8001696 <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <LCD_FillRect+0x14c>)
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29b      	uxth	r3, r3
 8001686:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 8001688:	89ba      	ldrh	r2, [r7, #12]
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8001696:	88f8      	ldrh	r0, [r7, #6]
 8001698:	88b9      	ldrh	r1, [r7, #4]
 800169a:	89fa      	ldrh	r2, [r7, #14]
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	f7ff fef1 	bl	8001484 <LCD_SetAddrWindow>
	LCD_Flood(color, (uint32_t) w * (uint32_t) h);
 80016a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80016aa:	fb03 f202 	mul.w	r2, r3, r2
 80016ae:	8c3b      	ldrh	r3, [r7, #32]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fea4 	bl	8001400 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <LCD_FillRect+0x148>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <LCD_FillRect+0x14c>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2100      	movs	r1, #0
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff fed6 	bl	8001484 <LCD_SetAddrWindow>
 80016d8:	e000      	b.n	80016dc <LCD_FillRect+0x140>
		return;
 80016da:	bf00      	nop
}
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000034 	.word	0x20000034
 80016e8:	20000036 	.word	0x20000036

080016ec <LCD_SetCursor>:
	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
}

void LCD_SetCursor(uint16_t x, uint16_t y) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	460a      	mov	r2, r1
 80016f6:	80fb      	strh	r3, [r7, #6]
 80016f8:	4613      	mov	r3, r2
 80016fa:	80bb      	strh	r3, [r7, #4]
	m_cursor_x = x;
 80016fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <LCD_SetCursor+0x2c>)
 8001702:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8001704:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <LCD_SetCursor+0x30>)
 800170a:	801a      	strh	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	20000038 	.word	0x20000038
 800171c:	2000003a 	.word	0x2000003a

08001720 <LCD_DrawChar>:

void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08d      	sub	sp, #52	; 0x34
 8001724:	af02      	add	r7, sp, #8
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4623      	mov	r3, r4
 8001730:	80fb      	strh	r3, [r7, #6]
 8001732:	4603      	mov	r3, r0
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
 800173a:	4613      	mov	r3, r2
 800173c:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
	uint8_t *pchar;
	uint32_t line = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 8001746:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800174a:	4a85      	ldr	r2, [pc, #532]	; (8001960 <LCD_DrawChar+0x240>)
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	88db      	ldrh	r3, [r3, #6]
 8001752:	827b      	strh	r3, [r7, #18]
	width = fonts[fontindex]->Width;
 8001754:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001758:	4a81      	ldr	r2, [pc, #516]	; (8001960 <LCD_DrawChar+0x240>)
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	889b      	ldrh	r3, [r3, #4]
 8001760:	823b      	strh	r3, [r7, #16]

	if ((x >= m_width) || // Clip right
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <LCD_DrawChar+0x244>)
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800176c:	429a      	cmp	r2, r3
 800176e:	f280 80f2 	bge.w	8001956 <LCD_DrawChar+0x236>
		(y >= m_height) || // Clip bottom
 8001772:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <LCD_DrawChar+0x248>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8001778:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	f280 80ea 	bge.w	8001956 <LCD_DrawChar+0x236>
		((x + width - 1) < 0) || // Clip left
 8001782:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001786:	8a3b      	ldrh	r3, [r7, #16]
 8001788:	4413      	add	r3, r2
		(y >= m_height) || // Clip bottom
 800178a:	2b00      	cmp	r3, #0
 800178c:	f340 80e3 	ble.w	8001956 <LCD_DrawChar+0x236>
		((y + height - 1) < 0))   // Clip top
 8001790:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001794:	8a7b      	ldrh	r3, [r7, #18]
 8001796:	4413      	add	r3, r2
		((x + width - 1) < 0) || // Clip left
 8001798:	2b00      	cmp	r3, #0
 800179a:	f340 80dc 	ble.w	8001956 <LCD_DrawChar+0x236>
		return;

	bytes = (width + 7) / 8;
 800179e:	8a3b      	ldrh	r3, [r7, #16]
 80017a0:	3307      	adds	r3, #7
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da00      	bge.n	80017a8 <LCD_DrawChar+0x88>
 80017a6:	3307      	adds	r3, #7
 80017a8:	10db      	asrs	r3, r3, #3
 80017aa:	81fb      	strh	r3, [r7, #14]
	if (c < ' ') c = ' ';
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b1f      	cmp	r3, #31
 80017b0:	d802      	bhi.n	80017b8 <LCD_DrawChar+0x98>
 80017b2:	2320      	movs	r3, #32
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	e004      	b.n	80017c2 <LCD_DrawChar+0xa2>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b7e      	cmp	r3, #126	; 0x7e
 80017bc:	d901      	bls.n	80017c2 <LCD_DrawChar+0xa2>
 80017be:	2320      	movs	r3, #32
 80017c0:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	3b20      	subs	r3, #32
 80017c6:	8a7a      	ldrh	r2, [r7, #18]
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	89fa      	ldrh	r2, [r7, #14]
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
	offset = 8 * bytes - width;
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	8a3b      	ldrh	r3, [r7, #16]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	737b      	strb	r3, [r7, #13]

	for (uint32_t i = 0; i < height; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	e0af      	b.n	800194a <LCD_DrawChar+0x22a>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 80017ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80017ee:	4a5c      	ldr	r2, [pc, #368]	; (8001960 <LCD_DrawChar+0x240>)
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	441a      	add	r2, r3
 80017fa:	8a3b      	ldrh	r3, [r7, #16]
 80017fc:	3307      	adds	r3, #7
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da00      	bge.n	8001804 <LCD_DrawChar+0xe4>
 8001802:	3307      	adds	r3, #7
 8001804:	10db      	asrs	r3, r3, #3
 8001806:	4619      	mov	r1, r3
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
		switch (bytes) {
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d002      	beq.n	800181e <LCD_DrawChar+0xfe>
 8001818:	2b02      	cmp	r3, #2
 800181a:	d004      	beq.n	8001826 <LCD_DrawChar+0x106>
 800181c:	e00c      	b.n	8001838 <LCD_DrawChar+0x118>
		case 1:
			line = pchar[0];
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001824:	e016      	b.n	8001854 <LCD_DrawChar+0x134>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	3201      	adds	r2, #1
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001836:	e00d      	b.n	8001854 <LCD_DrawChar+0x134>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	4313      	orrs	r3, r2
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	3202      	adds	r2, #2
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001852:	bf00      	nop
		}
		if (m_scale) {
 8001854:	4b45      	ldr	r3, [pc, #276]	; (800196c <LCD_DrawChar+0x24c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d03c      	beq.n	80018d6 <LCD_DrawChar+0x1b6>
			for (uint32_t j = 0; j < width * 2; j+=2) {
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	e02e      	b.n	80018c0 <LCD_DrawChar+0x1a0>
				if (line & (1 << (width - j / 2 + offset - 1))) {
 8001862:	8a3a      	ldrh	r2, [r7, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	7b7b      	ldrb	r3, [r7, #13]
 800186c:	4413      	add	r3, r2
 800186e:	3b01      	subs	r3, #1
 8001870:	2201      	movs	r2, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	461a      	mov	r2, r3
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <LCD_DrawChar+0x17e>
					LCD_FillRect(x + j, y, 2, 2, color);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	b29a      	uxth	r2, r3
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	b218      	sxth	r0, r3
 800188c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001890:	883b      	ldrh	r3, [r7, #0]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2302      	movs	r3, #2
 8001896:	2202      	movs	r2, #2
 8001898:	f7ff fe80 	bl	800159c <LCD_FillRect>
 800189c:	e00d      	b.n	80018ba <LCD_DrawChar+0x19a>
				} else {
					LCD_FillRect(x + j, y, 2, 2, bg);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b218      	sxth	r0, r3
 80018aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2302      	movs	r3, #2
 80018b4:	2202      	movs	r2, #2
 80018b6:	f7ff fe71 	bl	800159c <LCD_FillRect>
			for (uint32_t j = 0; j < width * 2; j+=2) {
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3302      	adds	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	8a3b      	ldrh	r3, [r7, #16]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	461a      	mov	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d3ca      	bcc.n	8001862 <LCD_DrawChar+0x142>
				}
			}
			y+=2;
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	3302      	adds	r3, #2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	80bb      	strh	r3, [r7, #4]
 80018d4:	e036      	b.n	8001944 <LCD_DrawChar+0x224>
		} else {
			for (uint32_t j = 0; j < width; j++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e029      	b.n	8001930 <LCD_DrawChar+0x210>
				if (line & (1 << (width - j + offset - 1))) {
 80018dc:	8a3a      	ldrh	r2, [r7, #16]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad2      	subs	r2, r2, r3
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	4413      	add	r3, r2
 80018e6:	3b01      	subs	r3, #1
 80018e8:	2201      	movs	r2, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00c      	beq.n	8001912 <LCD_DrawChar+0x1f2>
					LCD_DrawPixel((x + j), y, color);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	b21b      	sxth	r3, r3
 8001904:	883a      	ldrh	r2, [r7, #0]
 8001906:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fdfc 	bl	8001508 <LCD_DrawPixel>
 8001910:	e00b      	b.n	800192a <LCD_DrawChar+0x20a>
				} else {
					LCD_DrawPixel((x + j), y, bg);
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	b29a      	uxth	r2, r3
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4413      	add	r3, r2
 800191a:	b29b      	uxth	r3, r3
 800191c:	b21b      	sxth	r3, r3
 800191e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001920:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fdef 	bl	8001508 <LCD_DrawPixel>
			for (uint32_t j = 0; j < width; j++) {
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	3301      	adds	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	8a3b      	ldrh	r3, [r7, #16]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3d1      	bcc.n	80018dc <LCD_DrawChar+0x1bc>
				}
			}
			y++;
 8001938:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800193c:	b29b      	uxth	r3, r3
 800193e:	3301      	adds	r3, #1
 8001940:	b29b      	uxth	r3, r3
 8001942:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	3301      	adds	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	8a7b      	ldrh	r3, [r7, #18]
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	429a      	cmp	r2, r3
 8001950:	f4ff af4b 	bcc.w	80017ea <LCD_DrawChar+0xca>
 8001954:	e000      	b.n	8001958 <LCD_DrawChar+0x238>
		return;
 8001956:	bf00      	nop
		}
	}
}
 8001958:	372c      	adds	r7, #44	; 0x2c
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	20000034 	.word	0x20000034
 8001968:	20000036 	.word	0x20000036
 800196c:	20000044 	.word	0x20000044

08001970 <LCD_Printf>:


void LCD_Printf(const char *fmt, ...) {
 8001970:	b40f      	push	{r0, r1, r2, r3}
 8001972:	b5b0      	push	{r4, r5, r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf, sizeof(buf), fmt, lst);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	6a3a      	ldr	r2, [r7, #32]
 8001982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001986:	4857      	ldr	r0, [pc, #348]	; (8001ae4 <LCD_Printf+0x174>)
 8001988:	f002 f856 	bl	8003a38 <vsnprintf_>
	va_end(lst);

	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 800198c:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <LCD_Printf+0x178>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b56      	ldr	r3, [pc, #344]	; (8001aec <LCD_Printf+0x17c>)
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	88db      	ldrh	r3, [r3, #6]
 800199a:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 800199c:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <LCD_Printf+0x178>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b52      	ldr	r3, [pc, #328]	; (8001aec <LCD_Printf+0x17c>)
 80019a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a8:	889b      	ldrh	r3, [r3, #4]
 80019aa:	80bb      	strh	r3, [r7, #4]
	if (m_scale) {
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <LCD_Printf+0x180>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <LCD_Printf+0x58>
		height *= 2;
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	80fb      	strh	r3, [r7, #6]
		width *= 2;
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	80bb      	strh	r3, [r7, #4]
	}
	p = buf;
 80019c8:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <LCD_Printf+0x174>)
 80019ca:	60fb      	str	r3, [r7, #12]
	while (*p) {
 80019cc:	e07d      	b.n	8001aca <LCD_Printf+0x15a>
		if (*p == '\n') {
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b0a      	cmp	r3, #10
 80019d4:	d10e      	bne.n	80019f4 <LCD_Printf+0x84>
			m_cursor_y += height;
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <LCD_Printf+0x184>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <LCD_Printf+0x184>)
 80019ea:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 80019ec:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <LCD_Printf+0x188>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	e067      	b.n	8001ac4 <LCD_Printf+0x154>
		} else if (*p == '\r') {
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b0d      	cmp	r3, #13
 80019fa:	d103      	bne.n	8001a04 <LCD_Printf+0x94>
			m_cursor_x = 0;
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <LCD_Printf+0x188>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	e05f      	b.n	8001ac4 <LCD_Printf+0x154>
		} else if (*p == '\t') {
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d10d      	bne.n	8001a28 <LCD_Printf+0xb8>
			m_cursor_x += width * 4;
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <LCD_Printf+0x188>)
 8001a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <LCD_Printf+0x188>)
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	e04d      	b.n	8001ac4 <LCD_Printf+0x154>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8001a28:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <LCD_Printf+0x184>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b32      	ldr	r3, [pc, #200]	; (8001afc <LCD_Printf+0x18c>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	4619      	mov	r1, r3
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	1acb      	subs	r3, r1, r3
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	db02      	blt.n	8001a48 <LCD_Printf+0xd8>
				m_cursor_y = 0;
 8001a42:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <LCD_Printf+0x184>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <LCD_Printf+0x188>)
 8001a4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <LCD_Printf+0x184>)
 8001a50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	781c      	ldrb	r4, [r3, #0]
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <LCD_Printf+0x190>)
 8001a5a:	881d      	ldrh	r5, [r3, #0]
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <LCD_Printf+0x194>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <LCD_Printf+0x178>)
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	9201      	str	r2, [sp, #4]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	462b      	mov	r3, r5
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	f7ff fe58 	bl	8001720 <LCD_DrawChar>
			m_cursor_x += width;
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <LCD_Printf+0x188>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <LCD_Printf+0x188>)
 8001a84:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <LCD_Printf+0x198>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01a      	beq.n	8001ac4 <LCD_Printf+0x154>
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <LCD_Printf+0x188>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <LCD_Printf+0x19c>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	1acb      	subs	r3, r1, r3
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dd0d      	ble.n	8001ac4 <LCD_Printf+0x154>
				m_cursor_y += height;
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <LCD_Printf+0x184>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <LCD_Printf+0x184>)
 8001abc:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <LCD_Printf+0x188>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f47f af7d 	bne.w	80019ce <LCD_Printf+0x5e>
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001ae0:	b004      	add	sp, #16
 8001ae2:	4770      	bx	lr
 8001ae4:	20000048 	.word	0x20000048
 8001ae8:	20000040 	.word	0x20000040
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000044 	.word	0x20000044
 8001af4:	2000003a 	.word	0x2000003a
 8001af8:	20000038 	.word	0x20000038
 8001afc:	20000036 	.word	0x20000036
 8001b00:	2000003c 	.word	0x2000003c
 8001b04:	2000003e 	.word	0x2000003e
 8001b08:	20000045 	.word	0x20000045
 8001b0c:	20000034 	.word	0x20000034

08001b10 <GPIO_DrawMode>:


void GPIO_DrawMode(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <GPIO_DrawMode+0xa8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
	;
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001b6a:	2006      	movs	r0, #6
 8001b6c:	f002 fe6b 	bl	8004846 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
	//XP=PA8 XM=PA1 YP=PA4 YM=PB10 alt

	//XP=PA9 XM=PA4 YP=PB0 YM=PC7 neu

	/*Configure GPIO pins: PA1 PA4 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_9 ;
 8001b7c:	f44f 7304 	mov.w	r3, #528	; 0x210
 8001b80:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4619      	mov	r1, r3
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <GPIO_DrawMode+0xac>)
 8001b8a:	f002 fe85 	bl	8004898 <HAL_GPIO_Init>

	/*Configure GPIO data pin PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <GPIO_DrawMode+0xb0>)
 8001b9a:	f002 fe7d 	bl	8004898 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <GPIO_DrawMode+0xb4>)
 8001baa:	f002 fe75 	bl	8004898 <HAL_GPIO_Init>
}
 8001bae:	bf00      	nop
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40020800 	.word	0x40020800

08001bc8 <ADC_GetValue>:
//	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
//	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
//}

static uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig;

	sConfig.Channel = channel;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f002 fab9 	bl	800415c <HAL_ADC_ConfigChannel>

	// start conversion
	HAL_ADC_Start(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f002 f918 	bl	8003e20 <HAL_ADC_Start>

	// wait until finish
	HAL_ADC_PollForConversion(hadc, 100);
 8001bf0:	2164      	movs	r1, #100	; 0x64
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f002 fa19 	bl	800402a <HAL_ADC_PollForConversion>

	uint32_t value = HAL_ADC_GetValue(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f002 faa1 	bl	8004140 <HAL_ADC_GetValue>
 8001bfe:	61f8      	str	r0, [r7, #28]

	HAL_ADC_Stop(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f002 f9df 	bl	8003fc4 <HAL_ADC_Stop>

	return value;
 8001c06:	69fb      	ldr	r3, [r7, #28]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <GPIO_SetPinMode>:

static void GPIO_SetPinMode(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		uint32_t GPIO_PinMode) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_PinMode;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f002 fe2f 	bl	8004898 <HAL_GPIO_Init>
}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <ADC_GPIOA_init>:

static void ADC_GPIOA_init(uint16_t GPIO_Pin) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c52:	2303      	movs	r3, #3
 8001c54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <ADC_GPIOA_init+0x2c>)
 8001c62:	f002 fe19 	bl	8004898 <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40020000 	.word	0x40020000

08001c74 <ADC_GPIOB_init>:

static void ADC_GPIOB_init(uint16_t GPIO_Pin) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c82:	2303      	movs	r3, #3
 8001c84:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <ADC_GPIOB_init+0x2c>)
 8001c92:	f002 fe01 	bl	8004898 <HAL_GPIO_Init>
}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40020400 	.word	0x40020400

08001ca4 <touchX>:

uint32_t touchX(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	GPIO_SetPinMode(GPIOA, GPIO_PIN_4, GPIO_MODE_OUTPUT_PP);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2110      	movs	r1, #16
 8001cac:	481f      	ldr	r0, [pc, #124]	; (8001d2c <touchX+0x88>)
 8001cae:	f7ff ffaf 	bl	8001c10 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_9, GPIO_MODE_OUTPUT_PP);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb8:	481c      	ldr	r0, [pc, #112]	; (8001d2c <touchX+0x88>)
 8001cba:	f7ff ffa9 	bl	8001c10 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOC, GPIO_PIN_7, GPIO_MODE_INPUT);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	481b      	ldr	r0, [pc, #108]	; (8001d30 <touchX+0x8c>)
 8001cc4:	f7ff ffa4 	bl	8001c10 <GPIO_SetPinMode>
	ADC_GPIOB_init(GPIO_PIN_0);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7ff ffd3 	bl	8001c74 <ADC_GPIOB_init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4816      	ldr	r0, [pc, #88]	; (8001d2c <touchX+0x88>)
 8001cd4:	f002 ff74 	bl	8004bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cde:	4813      	ldr	r0, [pc, #76]	; (8001d2c <touchX+0x88>)
 8001ce0:	f002 ff6e 	bl	8004bc0 <HAL_GPIO_WritePin>

	return (int16_t) ((1 - fclamp(adc_norm_x(ADC_GetValue(&hadc1, ADC_CHANNEL_8)), 0.0f, 1.0f)) * TFTWIDTH);
 8001ce4:	2108      	movs	r1, #8
 8001ce6:	4813      	ldr	r0, [pc, #76]	; (8001d34 <touchX+0x90>)
 8001ce8:	f7ff ff6e 	bl	8001bc8 <ADC_GetValue>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f8d4 	bl	8000e9c <adc_norm_x>
 8001cf4:	eef0 7a40 	vmov.f32	s15, s0
 8001cf8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001cfc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001d38 <touchX+0x94>
 8001d00:	eeb0 0a67 	vmov.f32	s0, s15
 8001d04:	f7ff f8a0 	bl	8000e48 <fclamp>
 8001d08:	eef0 7a40 	vmov.f32	s15, s0
 8001d0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d14:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001d3c <touchX+0x98>
 8001d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d20:	ee17 3a90 	vmov	r3, s15
 8001d24:	b21b      	sxth	r3, r3
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020800 	.word	0x40020800
 8001d34:	2000014c 	.word	0x2000014c
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	43700000 	.word	0x43700000

08001d40 <touchY>:

//XP=PA8 XM=PA1 YP=PA4 YM=PB10 alt

//XP=PA9 XM=PA4 YP=PB0 YM=PC7 neu

uint32_t touchY(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001d46:	2006      	movs	r0, #6
 8001d48:	f002 fd7d 	bl	8004846 <HAL_NVIC_DisableIRQ>
	GPIO_SetPinMode(GPIOC, GPIO_PIN_7, GPIO_MODE_OUTPUT_PP);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	4824      	ldr	r0, [pc, #144]	; (8001de4 <touchY+0xa4>)
 8001d52:	f7ff ff5d 	bl	8001c10 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN_0, GPIO_MODE_OUTPUT_PP);  //exti
 8001d56:	2201      	movs	r2, #1
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4823      	ldr	r0, [pc, #140]	; (8001de8 <touchY+0xa8>)
 8001d5c:	f7ff ff58 	bl	8001c10 <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOA, GPIO_PIN_9, GPIO_MODE_INPUT);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d66:	4821      	ldr	r0, [pc, #132]	; (8001dec <touchY+0xac>)
 8001d68:	f7ff ff52 	bl	8001c10 <GPIO_SetPinMode>
	ADC_GPIOA_init(GPIO_PIN_4);
 8001d6c:	2010      	movs	r0, #16
 8001d6e:	f7ff ff69 	bl	8001c44 <ADC_GPIOA_init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	481b      	ldr	r0, [pc, #108]	; (8001de4 <touchY+0xa4>)
 8001d78:	f002 ff22 	bl	8004bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4819      	ldr	r0, [pc, #100]	; (8001de8 <touchY+0xa8>)
 8001d82:	f002 ff1d 	bl	8004bc0 <HAL_GPIO_WritePin>

	uint32_t adc_y = ADC_GetValue(&hadc2, ADC_CHANNEL_4);
 8001d86:	2104      	movs	r1, #4
 8001d88:	4819      	ldr	r0, [pc, #100]	; (8001df0 <touchY+0xb0>)
 8001d8a:	f7ff ff1d 	bl	8001bc8 <ADC_GetValue>
 8001d8e:	6078      	str	r0, [r7, #4]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <touchY+0xb4>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8001d96:	2006      	movs	r0, #6
 8001d98:	f002 fd6f 	bl	800487a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d9c:	2006      	movs	r0, #6
 8001d9e:	f002 fd44 	bl	800482a <HAL_NVIC_EnableIRQ>

	return (int16_t) ((1 - fclamp(adc_norm_y(adc_y), 0.0f, 1.0f)) * TFTHEIGHT);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff f892 	bl	8000ecc <adc_norm_y>
 8001da8:	eef0 7a40 	vmov.f32	s15, s0
 8001dac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001db0:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001df8 <touchY+0xb8>
 8001db4:	eeb0 0a67 	vmov.f32	s0, s15
 8001db8:	f7ff f846 	bl	8000e48 <fclamp>
 8001dbc:	eef0 7a40 	vmov.f32	s15, s0
 8001dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001dfc <touchY+0xbc>
 8001dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd4:	ee17 3a90 	vmov	r3, s15
 8001dd8:	b21b      	sxth	r3, r3
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020000 	.word	0x40020000
 8001df0:	20000194 	.word	0x20000194
 8001df4:	40013c00 	.word	0x40013c00
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	43a00000 	.word	0x43a00000

08001e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e06:	f001 ff31 	bl	8003c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0a:	f000 f895 	bl	8001f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0e:	f000 f9a5 	bl	800215c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e12:	f000 f8ff 	bl	8002014 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001e16:	f000 f94f 	bl	80020b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8001e1a:	f7ff f9e5 	bl	80011e8 <LCD_init>
  /* USER CODE END 2 */
  LCD_FillScreen(GREEN);
 8001e1e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001e22:	f7ff fb5b 	bl	80014dc <LCD_FillScreen>
	LCD_FillRect(50, 80, 80, 40, RED);
 8001e26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2328      	movs	r3, #40	; 0x28
 8001e2e:	2250      	movs	r2, #80	; 0x50
 8001e30:	2150      	movs	r1, #80	; 0x50
 8001e32:	2032      	movs	r0, #50	; 0x32
 8001e34:	f7ff fbb2 	bl	800159c <LCD_FillRect>
	LCD_FillRect(50, 170, 80, 40, BLUE);
 8001e38:	231f      	movs	r3, #31
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2328      	movs	r3, #40	; 0x28
 8001e3e:	2250      	movs	r2, #80	; 0x50
 8001e40:	21aa      	movs	r1, #170	; 0xaa
 8001e42:	2032      	movs	r0, #50	; 0x32
 8001e44:	f7ff fbaa 	bl	800159c <LCD_FillRect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      x=touchX();
 8001e48:	f7ff ff2c 	bl	8001ca4 <touchX>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <main+0x12c>)
 8001e52:	801a      	strh	r2, [r3, #0]
      y=touchY();
 8001e54:	f7ff ff74 	bl	8001d40 <touchY>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <main+0x130>)
 8001e5e:	801a      	strh	r2, [r3, #0]
		if(x >=55 && x<=126 && y>=53 && y<=88)
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <main+0x12c>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	2b36      	cmp	r3, #54	; 0x36
 8001e68:	dd2c      	ble.n	8001ec4 <main+0xc4>
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <main+0x12c>)
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	2b7e      	cmp	r3, #126	; 0x7e
 8001e72:	dc27      	bgt.n	8001ec4 <main+0xc4>
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <main+0x130>)
 8001e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7a:	2b34      	cmp	r3, #52	; 0x34
 8001e7c:	dd22      	ble.n	8001ec4 <main+0xc4>
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <main+0x130>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	2b58      	cmp	r3, #88	; 0x58
 8001e86:	dc1d      	bgt.n	8001ec4 <main+0xc4>
		{
			GPIO_DrawMode();
 8001e88:	f7ff fe42 	bl	8001b10 <GPIO_DrawMode>
			LCD_FillScreen(YELLOW);
 8001e8c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001e90:	f7ff fb24 	bl	80014dc <LCD_FillScreen>
		//	LCD_DrawCircle(100, 100, 50, RED);
		//	LCD_DrawLine(25, 150, 75, 200, WHITE);
			LCD_FillRect(50, 80, 80, 40, RED);
 8001e94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2328      	movs	r3, #40	; 0x28
 8001e9c:	2250      	movs	r2, #80	; 0x50
 8001e9e:	2150      	movs	r1, #80	; 0x50
 8001ea0:	2032      	movs	r0, #50	; 0x32
 8001ea2:	f7ff fb7b 	bl	800159c <LCD_FillRect>
			LCD_FillRect(50, 170, 80, 40, BLUE);
 8001ea6:	231f      	movs	r3, #31
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2328      	movs	r3, #40	; 0x28
 8001eac:	2250      	movs	r2, #80	; 0x50
 8001eae:	21aa      	movs	r1, #170	; 0xaa
 8001eb0:	2032      	movs	r0, #50	; 0x32
 8001eb2:	f7ff fb73 	bl	800159c <LCD_FillRect>
			//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
			LCD_SetCursor(0, 0);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff fc17 	bl	80016ec <LCD_SetCursor>
			LCD_Printf("Ismail Alhajji");
 8001ebe:	481d      	ldr	r0, [pc, #116]	; (8001f34 <main+0x134>)
 8001ec0:	f7ff fd56 	bl	8001970 <LCD_Printf>

		}

		if(x >=55 && x<=126 && y>=138 && y<=170)
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <main+0x12c>)
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	2b36      	cmp	r3, #54	; 0x36
 8001ecc:	ddbc      	ble.n	8001e48 <main+0x48>
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <main+0x12c>)
 8001ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed4:	2b7e      	cmp	r3, #126	; 0x7e
 8001ed6:	dcb7      	bgt.n	8001e48 <main+0x48>
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <main+0x130>)
 8001eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ede:	2b89      	cmp	r3, #137	; 0x89
 8001ee0:	ddb2      	ble.n	8001e48 <main+0x48>
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <main+0x130>)
 8001ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee8:	2baa      	cmp	r3, #170	; 0xaa
 8001eea:	dcad      	bgt.n	8001e48 <main+0x48>
		{
			GPIO_DrawMode();
 8001eec:	f7ff fe10 	bl	8001b10 <GPIO_DrawMode>
			LCD_FillScreen(MAGENTA);
 8001ef0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001ef4:	f7ff faf2 	bl	80014dc <LCD_FillScreen>
		//	LCD_DrawCircle(100, 100, 50, RED);
		//	LCD_DrawLine(25, 150, 75, 200, WHITE);
			LCD_FillRect(50, 80, 80, 40, RED);
 8001ef8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2328      	movs	r3, #40	; 0x28
 8001f00:	2250      	movs	r2, #80	; 0x50
 8001f02:	2150      	movs	r1, #80	; 0x50
 8001f04:	2032      	movs	r0, #50	; 0x32
 8001f06:	f7ff fb49 	bl	800159c <LCD_FillRect>
			LCD_FillRect(50, 170, 80, 40, BLUE);
 8001f0a:	231f      	movs	r3, #31
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2328      	movs	r3, #40	; 0x28
 8001f10:	2250      	movs	r2, #80	; 0x50
 8001f12:	21aa      	movs	r1, #170	; 0xaa
 8001f14:	2032      	movs	r0, #50	; 0x32
 8001f16:	f7ff fb41 	bl	800159c <LCD_FillRect>
			LCD_SetCursor(0, 0);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fbe5 	bl	80016ec <LCD_SetCursor>
			LCD_Printf("Ismail Alhajji");
 8001f22:	4804      	ldr	r0, [pc, #16]	; (8001f34 <main+0x134>)
 8001f24:	f7ff fd24 	bl	8001970 <LCD_Printf>
      x=touchX();
 8001f28:	e78e      	b.n	8001e48 <main+0x48>
 8001f2a:	bf00      	nop
 8001f2c:	20000148 	.word	0x20000148
 8001f30:	2000014a 	.word	0x2000014a
 8001f34:	080057d0 	.word	0x080057d0

08001f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b094      	sub	sp, #80	; 0x50
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	2234      	movs	r2, #52	; 0x34
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fc2c 	bl	80057a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <SystemClock_Config+0xd4>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	4a29      	ldr	r2, [pc, #164]	; (800200c <SystemClock_Config+0xd4>)
 8001f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <SystemClock_Config+0xd4>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <SystemClock_Config+0xd8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f84:	4a22      	ldr	r2, [pc, #136]	; (8002010 <SystemClock_Config+0xd8>)
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <SystemClock_Config+0xd8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001fac:	2310      	movs	r3, #16
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001fb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 f92a 	bl	8005220 <HAL_RCC_OscConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fd2:	f000 f8eb 	bl	80021ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fdfe 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ffe:	f000 f8d5 	bl	80021ac <Error_Handler>
  }
}
 8002002:	bf00      	nop
 8002004:	3750      	adds	r7, #80	; 0x50
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40007000 	.word	0x40007000

08002014 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800201a:	463b      	mov	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <MX_ADC1_Init+0x98>)
 8002028:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <MX_ADC1_Init+0x9c>)
 800202a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <MX_ADC1_Init+0x98>)
 800202e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002032:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_ADC1_Init+0x98>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MX_ADC1_Init+0x98>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_ADC1_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <MX_ADC1_Init+0x98>)
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <MX_ADC1_Init+0x98>)
 8002050:	2200      	movs	r2, #0
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_ADC1_Init+0x98>)
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <MX_ADC1_Init+0xa0>)
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_ADC1_Init+0x98>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <MX_ADC1_Init+0x98>)
 8002062:	2201      	movs	r2, #1
 8002064:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_ADC1_Init+0x98>)
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_ADC1_Init+0x98>)
 8002070:	2201      	movs	r2, #1
 8002072:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_ADC1_Init+0x98>)
 8002076:	f001 fe8f 	bl	8003d98 <HAL_ADC_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002080:	f000 f894 	bl	80021ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002084:	2304      	movs	r3, #4
 8002086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_ADC1_Init+0x98>)
 8002096:	f002 f861 	bl	800415c <HAL_ADC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020a0:	f000 f884 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000014c 	.word	0x2000014c
 80020b0:	40012000 	.word	0x40012000
 80020b4:	0f000001 	.word	0x0f000001

080020b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <MX_ADC2_Init+0x98>)
 80020cc:	4a21      	ldr	r2, [pc, #132]	; (8002154 <MX_ADC2_Init+0x9c>)
 80020ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <MX_ADC2_Init+0x98>)
 80020d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <MX_ADC2_Init+0x98>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <MX_ADC2_Init+0x98>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_ADC2_Init+0x98>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <MX_ADC2_Init+0x98>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_ADC2_Init+0x98>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <MX_ADC2_Init+0x98>)
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <MX_ADC2_Init+0xa0>)
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_ADC2_Init+0x98>)
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_ADC2_Init+0x98>)
 8002106:	2201      	movs	r2, #1
 8002108:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_ADC2_Init+0x98>)
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_ADC2_Init+0x98>)
 8002114:	2201      	movs	r2, #1
 8002116:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <MX_ADC2_Init+0x98>)
 800211a:	f001 fe3d 	bl	8003d98 <HAL_ADC_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002124:	f000 f842 	bl	80021ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002128:	2308      	movs	r3, #8
 800212a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800212c:	2301      	movs	r3, #1
 800212e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002134:	463b      	mov	r3, r7
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_ADC2_Init+0x98>)
 800213a:	f002 f80f 	bl	800415c <HAL_ADC_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002144:	f000 f832 	bl	80021ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000194 	.word	0x20000194
 8002154:	40012100 	.word	0x40012100
 8002158:	0f000001 	.word	0x0f000001

0800215c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_GPIO_Init+0x4c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <MX_GPIO_Init+0x4c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <MX_GPIO_Init+0x4c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_GPIO_Init+0x4c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <MX_GPIO_Init+0x4c>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_GPIO_Init+0x4c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b0:	b672      	cpsid	i
}
 80021b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <Error_Handler+0x8>

080021b6 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4603      	mov	r3, r0
 80021c4:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d204      	bcs.n	80021d8 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	701a      	strb	r2, [r3, #0]
  }
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e002      	b.n	8002216 <_strnlen_s+0x16>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3301      	adds	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <_strnlen_s+0x28>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	603a      	str	r2, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f3      	bne.n	8002210 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1ad3      	subs	r3, r2, r3
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b2f      	cmp	r3, #47	; 0x2f
 8002248:	d904      	bls.n	8002254 <_is_digit+0x1a>
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b39      	cmp	r3, #57	; 0x39
 800224e:	d801      	bhi.n	8002254 <_is_digit+0x1a>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <_is_digit+0x1c>
 8002254:	2300      	movs	r3, #0
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002274:	e00e      	b.n	8002294 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4618      	mov	r0, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1c59      	adds	r1, r3, #1
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6011      	str	r1, [r2, #0]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	4403      	add	r3, r0
 8002290:	3b30      	subs	r3, #48	; 0x30
 8002292:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ffcd 	bl	800223a <_is_digit>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e7      	bne.n	8002276 <_atoi+0xe>
  }
  return i;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d125      	bne.n	8002318 <_out_rev+0x68>
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d120      	bne.n	8002318 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e00a      	b.n	80022f2 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	1c53      	adds	r3, r2, #1
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	68fc      	ldr	r4, [r7, #12]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	2020      	movs	r0, #32
 80022ea:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d3f0      	bcc.n	80022dc <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80022fa:	e00d      	b.n	8002318 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	3b01      	subs	r3, #1
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	4413      	add	r3, r2
 8002308:	7818      	ldrb	r0, [r3, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	1c53      	adds	r3, r2, #1
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	68fc      	ldr	r4, [r7, #12]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	47a0      	blx	r4
  while (len) {
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ee      	bne.n	80022fc <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002328:	e007      	b.n	800233a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	1c53      	adds	r3, r2, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	68fc      	ldr	r4, [r7, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	2020      	movs	r0, #32
 8002338:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002342:	429a      	cmp	r2, r3
 8002344:	d8f1      	bhi.n	800232a <_out_rev+0x7a>
    }
  }

  return idx;
 8002346:	687b      	ldr	r3, [r7, #4]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}

08002350 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af04      	add	r7, sp, #16
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d136      	bne.n	80023d6 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d018      	beq.n	80023a0 <_ntoa_format+0x50>
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <_ntoa_format+0x50>
 8002378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <_ntoa_format+0x3a>
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <_ntoa_format+0x50>
      width--;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	3b01      	subs	r3, #1
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002390:	e006      	b.n	80023a0 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	61fa      	str	r2, [r7, #28]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4413      	add	r3, r2
 800239c:	2230      	movs	r2, #48	; 0x30
 800239e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d20a      	bcs.n	80023be <_ntoa_format+0x6e>
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b1f      	cmp	r3, #31
 80023ac:	d9f1      	bls.n	8002392 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023ae:	e006      	b.n	80023be <_ntoa_format+0x6e>
      buf[len++] = '0';
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	61fa      	str	r2, [r7, #28]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4413      	add	r3, r2
 80023ba:	2230      	movs	r2, #48	; 0x30
 80023bc:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <_ntoa_format+0x86>
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d202      	bcs.n	80023d6 <_ntoa_format+0x86>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	d9ec      	bls.n	80023b0 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d058      	beq.n	8002492 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <_ntoa_format+0xc8>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <_ntoa_format+0xc8>
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d003      	beq.n	8002400 <_ntoa_format+0xb0>
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d10b      	bne.n	8002418 <_ntoa_format+0xc8>
      len--;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3b01      	subs	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <_ntoa_format+0xc8>
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	2b10      	cmp	r3, #16
 8002410:	d102      	bne.n	8002418 <_ntoa_format+0xc8>
        len--;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b01      	subs	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2b10      	cmp	r3, #16
 800241c:	d10f      	bne.n	800243e <_ntoa_format+0xee>
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <_ntoa_format+0xee>
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b1f      	cmp	r3, #31
 800242c:	d807      	bhi.n	800243e <_ntoa_format+0xee>
      buf[len++] = 'x';
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	61fa      	str	r2, [r7, #28]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4413      	add	r3, r2
 8002438:	2278      	movs	r2, #120	; 0x78
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e01f      	b.n	800247e <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	2b10      	cmp	r3, #16
 8002442:	d10f      	bne.n	8002464 <_ntoa_format+0x114>
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <_ntoa_format+0x114>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	2b1f      	cmp	r3, #31
 8002452:	d807      	bhi.n	8002464 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	61fa      	str	r2, [r7, #28]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	2258      	movs	r2, #88	; 0x58
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e00c      	b.n	800247e <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2b02      	cmp	r3, #2
 8002468:	d109      	bne.n	800247e <_ntoa_format+0x12e>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2b1f      	cmp	r3, #31
 800246e:	d806      	bhi.n	800247e <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	61fa      	str	r2, [r7, #28]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	2262      	movs	r2, #98	; 0x62
 800247c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b1f      	cmp	r3, #31
 8002482:	d806      	bhi.n	8002492 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	61fa      	str	r2, [r7, #28]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4413      	add	r3, r2
 800248e:	2230      	movs	r2, #48	; 0x30
 8002490:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b1f      	cmp	r3, #31
 8002496:	d824      	bhi.n	80024e2 <_ntoa_format+0x192>
    if (negative) {
 8002498:	f897 3020 	ldrb.w	r3, [r7, #32]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <_ntoa_format+0x160>
      buf[len++] = '-';
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	61fa      	str	r2, [r7, #28]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	222d      	movs	r2, #45	; 0x2d
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e018      	b.n	80024e2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	61fa      	str	r2, [r7, #28]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4413      	add	r3, r2
 80024c4:	222b      	movs	r2, #43	; 0x2b
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	e00b      	b.n	80024e2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	61fa      	str	r2, [r7, #28]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	2220      	movs	r2, #32
 80024e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fed9 	bl	80022b0 <_out_rev>
 80024fe:	4603      	mov	r3, r0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b096      	sub	sp, #88	; 0x58
 800250c:	af08      	add	r7, sp, #32
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800251a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002522:	f023 0310 	bic.w	r3, r3, #16
 8002526:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <_ntoa_long+0x30>
 8002532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d032      	beq.n	800259e <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800253c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002540:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002542:	fb01 f202 	mul.w	r2, r1, r2
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800254c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002550:	2b09      	cmp	r3, #9
 8002552:	d804      	bhi.n	800255e <_ntoa_long+0x56>
 8002554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002558:	3330      	adds	r3, #48	; 0x30
 800255a:	b2da      	uxtb	r2, r3
 800255c:	e00d      	b.n	800257a <_ntoa_long+0x72>
 800255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <_ntoa_long+0x64>
 8002568:	2241      	movs	r2, #65	; 0x41
 800256a:	e000      	b.n	800256e <_ntoa_long+0x66>
 800256c:	2261      	movs	r2, #97	; 0x61
 800256e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002572:	4413      	add	r3, r2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3b0a      	subs	r3, #10
 8002578:	b2da      	uxtb	r2, r3
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	1c59      	adds	r1, r3, #1
 800257e:	6379      	str	r1, [r7, #52]	; 0x34
 8002580:	3338      	adds	r3, #56	; 0x38
 8002582:	443b      	add	r3, r7
 8002584:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800258a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <_ntoa_long+0x96>
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	2b1f      	cmp	r3, #31
 800259c:	d9cc      	bls.n	8002538 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	9306      	str	r3, [sp, #24]
 80025a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a4:	9305      	str	r3, [sp, #20]
 80025a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a8:	9304      	str	r3, [sp, #16]
 80025aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ac:	9303      	str	r3, [sp, #12]
 80025ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff fec3 	bl	8002350 <_ntoa_format>
 80025ca:	4603      	mov	r3, r0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3738      	adds	r7, #56	; 0x38
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b096      	sub	sp, #88	; 0x58
 80025d8:	af08      	add	r7, sp, #32
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80025e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ea:	4313      	orrs	r3, r2
 80025ec:	d103      	bne.n	80025f6 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80025ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f0:	f023 0310 	bic.w	r3, r3, #16
 80025f4:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80025f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <_ntoa_long_long+0x34>
 8002600:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002604:	4313      	orrs	r3, r2
 8002606:	d037      	beq.n	8002678 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002608:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800260c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002610:	f7fe fa98 	bl	8000b44 <__aeabi_uldivmod>
 8002614:	4613      	mov	r3, r2
 8002616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800261a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800261e:	2b09      	cmp	r3, #9
 8002620:	d804      	bhi.n	800262c <_ntoa_long_long+0x58>
 8002622:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002626:	3330      	adds	r3, #48	; 0x30
 8002628:	b2da      	uxtb	r2, r3
 800262a:	e00d      	b.n	8002648 <_ntoa_long_long+0x74>
 800262c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <_ntoa_long_long+0x66>
 8002636:	2241      	movs	r2, #65	; 0x41
 8002638:	e000      	b.n	800263c <_ntoa_long_long+0x68>
 800263a:	2261      	movs	r2, #97	; 0x61
 800263c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002640:	4413      	add	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3b0a      	subs	r3, #10
 8002646:	b2da      	uxtb	r2, r3
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	1c59      	adds	r1, r3, #1
 800264c:	6379      	str	r1, [r7, #52]	; 0x34
 800264e:	3338      	adds	r3, #56	; 0x38
 8002650:	443b      	add	r3, r7
 8002652:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002656:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800265a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800265e:	f7fe fa71 	bl	8000b44 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800266a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800266e:	4313      	orrs	r3, r2
 8002670:	d002      	beq.n	8002678 <_ntoa_long_long+0xa4>
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	2b1f      	cmp	r3, #31
 8002676:	d9c7      	bls.n	8002608 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800267c:	9206      	str	r2, [sp, #24]
 800267e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002680:	9205      	str	r2, [sp, #20]
 8002682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002684:	9204      	str	r2, [sp, #16]
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fe56 	bl	8002350 <_ntoa_format>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b09d      	sub	sp, #116	; 0x74
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	6178      	str	r0, [r7, #20]
 80026b8:	6139      	str	r1, [r7, #16]
 80026ba:	60fa      	str	r2, [r7, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80026d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026da:	f7fe f9b9 	bl	8000a50 <__aeabi_dcmpeq>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10f      	bne.n	8002704 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80026e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	2303      	movs	r3, #3
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <_ftoa+0x2e0>)
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6939      	ldr	r1, [r7, #16]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff fdd8 	bl	80022b0 <_out_rev>
 8002700:	4603      	mov	r3, r0
 8002702:	e222      	b.n	8002b4a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800270c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002710:	f7fe f9a8 	bl	8000a64 <__aeabi_dcmplt>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00f      	beq.n	800273a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800271a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800271c:	9303      	str	r3, [sp, #12]
 800271e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	2304      	movs	r3, #4
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	4b9b      	ldr	r3, [pc, #620]	; (8002994 <_ftoa+0x2e4>)
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	6939      	ldr	r1, [r7, #16]
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f7ff fdbd 	bl	80022b0 <_out_rev>
 8002736:	4603      	mov	r3, r0
 8002738:	e207      	b.n	8002b4a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800273a:	f04f 32ff 	mov.w	r2, #4294967295
 800273e:	4b96      	ldr	r3, [pc, #600]	; (8002998 <_ftoa+0x2e8>)
 8002740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002744:	f7fe f9ac 	bl	8000aa0 <__aeabi_dcmpgt>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01d      	beq.n	800278a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800274e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <_ftoa+0xac>
 8002758:	4b90      	ldr	r3, [pc, #576]	; (800299c <_ftoa+0x2ec>)
 800275a:	e000      	b.n	800275e <_ftoa+0xae>
 800275c:	4b90      	ldr	r3, [pc, #576]	; (80029a0 <_ftoa+0x2f0>)
 800275e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002760:	f002 0204 	and.w	r2, r2, #4
 8002764:	2a00      	cmp	r2, #0
 8002766:	d001      	beq.n	800276c <_ftoa+0xbc>
 8002768:	2204      	movs	r2, #4
 800276a:	e000      	b.n	800276e <_ftoa+0xbe>
 800276c:	2203      	movs	r2, #3
 800276e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002770:	9103      	str	r1, [sp, #12]
 8002772:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002774:	9102      	str	r1, [sp, #8]
 8002776:	9201      	str	r2, [sp, #4]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	6939      	ldr	r1, [r7, #16]
 8002780:	6978      	ldr	r0, [r7, #20]
 8002782:	f7ff fd95 	bl	80022b0 <_out_rev>
 8002786:	4603      	mov	r3, r0
 8002788:	e1df      	b.n	8002b4a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800278a:	a37d      	add	r3, pc, #500	; (adr r3, 8002980 <_ftoa+0x2d0>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002794:	f7fe f984 	bl	8000aa0 <__aeabi_dcmpgt>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <_ftoa+0x102>
 800279e:	a37a      	add	r3, pc, #488	; (adr r3, 8002988 <_ftoa+0x2d8>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027a8:	f7fe f95c 	bl	8000a64 <__aeabi_dcmplt>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00f      	beq.n	80027d2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80027b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	ed97 0b00 	vldr	d0, [r7]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	6939      	ldr	r1, [r7, #16]
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f000 f9c9 	bl	8002b60 <_etoa>
 80027ce:	4603      	mov	r3, r0
 80027d0:	e1bb      	b.n	8002b4a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027e4:	f7fe f93e 	bl	8000a64 <__aeabi_dcmplt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <_ftoa+0x15c>
    negative = true;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80027f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f8:	f04f 0000 	mov.w	r0, #0
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	f7fd fd06 	bl	8000210 <__aeabi_dsub>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800280c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002816:	2306      	movs	r3, #6
 8002818:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800281a:	e00a      	b.n	8002832 <_ftoa+0x182>
    buf[len++] = '0';
 800281c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	443b      	add	r3, r7
 8002826:	2230      	movs	r2, #48	; 0x30
 8002828:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800282c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282e:	3b01      	subs	r3, #1
 8002830:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002834:	2b1f      	cmp	r3, #31
 8002836:	d802      	bhi.n	800283e <_ftoa+0x18e>
 8002838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800283a:	2b09      	cmp	r3, #9
 800283c:	d8ee      	bhi.n	800281c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800283e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002842:	f7fe f937 	bl	8000ab4 <__aeabi_d2iz>
 8002846:	4603      	mov	r3, r0
 8002848:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800284a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800284c:	f7fd fe2e 	bl	80004ac <__aeabi_i2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002858:	f7fd fcda 	bl	8000210 <__aeabi_dsub>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <_ftoa+0x2f4>)
 8002866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd fe86 	bl	8000580 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800287c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002880:	f7fe f940 	bl	8000b04 <__aeabi_d2uiz>
 8002884:	4603      	mov	r3, r0
 8002886:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002888:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800288a:	f7fd fdff 	bl	800048c <__aeabi_ui2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002896:	f7fd fcbb 	bl	8000210 <__aeabi_dsub>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <_ftoa+0x2f8>)
 80028a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028ac:	f7fe f8f8 	bl	8000aa0 <__aeabi_dcmpgt>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <_ftoa+0x234>
    ++frac;
 80028b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b8:	3301      	adds	r3, #1
 80028ba:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80028bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80028be:	f7fd fde5 	bl	800048c <__aeabi_ui2d>
 80028c2:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <_ftoa+0x2f4>)
 80028c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f7fe f8dd 	bl	8000a8c <__aeabi_dcmpge>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01a      	beq.n	800290e <_ftoa+0x25e>
      frac = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	3301      	adds	r3, #1
 80028e0:	657b      	str	r3, [r7, #84]	; 0x54
 80028e2:	e014      	b.n	800290e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <_ftoa+0x2f8>)
 80028ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028ee:	f7fe f8b9 	bl	8000a64 <__aeabi_dcmplt>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80028f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <_ftoa+0x258>
 80028fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290a:	3301      	adds	r3, #1
 800290c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800290e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002910:	2b00      	cmp	r3, #0
 8002912:	d14b      	bne.n	80029ac <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002914:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002916:	f7fd fdc9 	bl	80004ac <__aeabi_i2d>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002922:	f7fd fc75 	bl	8000210 <__aeabi_dsub>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800292e:	2301      	movs	r3, #1
 8002930:	461c      	mov	r4, r3
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <_ftoa+0x2f8>)
 8002938:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800293c:	f7fe f892 	bl	8000a64 <__aeabi_dcmplt>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <_ftoa+0x29a>
 8002946:	2300      	movs	r3, #0
 8002948:	461c      	mov	r4, r3
 800294a:	b2e3      	uxtb	r3, r4
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <_ftoa+0x2ba>
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <_ftoa+0x2f8>)
 800295c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002960:	f7fe f89e 	bl	8000aa0 <__aeabi_dcmpgt>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d064      	beq.n	8002a34 <_ftoa+0x384>
 800296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8081 	beq.w	8002a78 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	3301      	adds	r3, #1
 800297a:	657b      	str	r3, [r7, #84]	; 0x54
 800297c:	e07c      	b.n	8002a78 <_ftoa+0x3c8>
 800297e:	bf00      	nop
 8002980:	00000000 	.word	0x00000000
 8002984:	41cdcd65 	.word	0x41cdcd65
 8002988:	00000000 	.word	0x00000000
 800298c:	c1cdcd65 	.word	0xc1cdcd65
 8002990:	080057e0 	.word	0x080057e0
 8002994:	080057e4 	.word	0x080057e4
 8002998:	7fefffff 	.word	0x7fefffff
 800299c:	080057ec 	.word	0x080057ec
 80029a0:	080057f4 	.word	0x080057f4
 80029a4:	080073f8 	.word	0x080073f8
 80029a8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80029ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80029b0:	e01f      	b.n	80029f2 <_ftoa+0x342>
      --count;
 80029b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b4:	3b01      	subs	r3, #1
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80029b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80029ba:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <_ftoa+0x4a4>)
 80029bc:	fba3 2301 	umull	r2, r3, r3, r1
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	1aca      	subs	r2, r1, r3
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d0:	1c59      	adds	r1, r3, #1
 80029d2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80029d4:	3230      	adds	r2, #48	; 0x30
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	3360      	adds	r3, #96	; 0x60
 80029da:	443b      	add	r3, r7
 80029dc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80029e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <_ftoa+0x4a4>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	653b      	str	r3, [r7, #80]	; 0x50
 80029ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80029f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f4:	2b1f      	cmp	r3, #31
 80029f6:	d9dc      	bls.n	80029b2 <_ftoa+0x302>
 80029f8:	e009      	b.n	8002a0e <_ftoa+0x35e>
        break;
 80029fa:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80029fc:	e007      	b.n	8002a0e <_ftoa+0x35e>
      buf[len++] = '0';
 80029fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a04:	3360      	adds	r3, #96	; 0x60
 8002a06:	443b      	add	r3, r7
 8002a08:	2230      	movs	r2, #48	; 0x30
 8002a0a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a10:	2b1f      	cmp	r3, #31
 8002a12:	d804      	bhi.n	8002a1e <_ftoa+0x36e>
 8002a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1ef      	bne.n	80029fe <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a20:	2b1f      	cmp	r3, #31
 8002a22:	d829      	bhi.n	8002a78 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a2a:	3360      	adds	r3, #96	; 0x60
 8002a2c:	443b      	add	r3, r7
 8002a2e:	222e      	movs	r2, #46	; 0x2e
 8002a30:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a34:	e020      	b.n	8002a78 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002a36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a38:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <_ftoa+0x4a8>)
 8002a3a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a3e:	1099      	asrs	r1, r3, #2
 8002a40:	17d3      	asrs	r3, r2, #31
 8002a42:	1ac9      	subs	r1, r1, r3
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	1ad1      	subs	r1, r2, r3
 8002a4e:	b2ca      	uxtb	r2, r1
 8002a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002a56:	3230      	adds	r2, #48	; 0x30
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	443b      	add	r3, r7
 8002a5e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <_ftoa+0x4a8>)
 8002a66:	fb82 1203 	smull	r1, r2, r2, r3
 8002a6a:	1092      	asrs	r2, r2, #2
 8002a6c:	17db      	asrs	r3, r3, #31
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	657b      	str	r3, [r7, #84]	; 0x54
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7a:	2b1f      	cmp	r3, #31
 8002a7c:	d9db      	bls.n	8002a36 <_ftoa+0x386>
 8002a7e:	e000      	b.n	8002a82 <_ftoa+0x3d2>
      break;
 8002a80:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d123      	bne.n	8002ad4 <_ftoa+0x424>
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01e      	beq.n	8002ad4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d014      	beq.n	8002ac6 <_ftoa+0x416>
 8002a9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <_ftoa+0x3fe>
 8002aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <_ftoa+0x416>
      width--;
 8002aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002ab4:	e007      	b.n	8002ac6 <_ftoa+0x416>
      buf[len++] = '0';
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002abc:	3360      	adds	r3, #96	; 0x60
 8002abe:	443b      	add	r3, r7
 8002ac0:	2230      	movs	r2, #48	; 0x30
 8002ac2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002ac6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d202      	bcs.n	8002ad4 <_ftoa+0x424>
 8002ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad0:	2b1f      	cmp	r3, #31
 8002ad2:	d9f0      	bls.n	8002ab6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad6:	2b1f      	cmp	r3, #31
 8002ad8:	d827      	bhi.n	8002b2a <_ftoa+0x47a>
    if (negative) {
 8002ada:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <_ftoa+0x444>
      buf[len++] = '-';
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	443b      	add	r3, r7
 8002aec:	222d      	movs	r2, #45	; 0x2d
 8002aee:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002af2:	e01a      	b.n	8002b2a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b04:	3360      	adds	r3, #96	; 0x60
 8002b06:	443b      	add	r3, r7
 8002b08:	222b      	movs	r2, #43	; 0x2b
 8002b0a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002b0e:	e00c      	b.n	8002b2a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <_ftoa+0x47a>
      buf[len++] = ' ';
 8002b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b20:	3360      	adds	r3, #96	; 0x60
 8002b22:	443b      	add	r3, r7
 8002b24:	2220      	movs	r2, #32
 8002b26:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2c:	9303      	str	r3, [sp, #12]
 8002b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b30:	9302      	str	r3, [sp, #8]
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	f107 0318 	add.w	r3, r7, #24
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6939      	ldr	r1, [r7, #16]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff fbb4 	bl	80022b0 <_out_rev>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3764      	adds	r7, #100	; 0x64
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}
 8002b52:	bf00      	nop
 8002b54:	cccccccd 	.word	0xcccccccd
 8002b58:	66666667 	.word	0x66666667
 8002b5c:	00000000 	.word	0x00000000

08002b60 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b64:	b09f      	sub	sp, #124	; 0x7c
 8002b66:	af06      	add	r7, sp, #24
 8002b68:	6278      	str	r0, [r7, #36]	; 0x24
 8002b6a:	6239      	str	r1, [r7, #32]
 8002b6c:	61fa      	str	r2, [r7, #28]
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002b74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b7c:	f7fd ff68 	bl	8000a50 <__aeabi_dcmpeq>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d014      	beq.n	8002bb0 <_etoa+0x50>
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8a:	4bc1      	ldr	r3, [pc, #772]	; (8002e90 <_etoa+0x330>)
 8002b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b90:	f7fd ff86 	bl	8000aa0 <__aeabi_dcmpgt>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <_etoa+0x50>
 8002b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ba6:	f7fd ff5d 	bl	8000a64 <__aeabi_dcmplt>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bb4:	9302      	str	r3, [sp, #8]
 8002bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	ed97 0b04 	vldr	d0, [r7, #16]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	6a39      	ldr	r1, [r7, #32]
 8002bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bce:	f7ff fd6f 	bl	80026b0 <_ftoa>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	e23f      	b.n	8003056 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	461e      	mov	r6, r3
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002be6:	f7fd ff3d 	bl	8000a64 <__aeabi_dcmplt>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <_etoa+0x94>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	461e      	mov	r6, r3
 8002bf4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8002bf8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <_etoa+0xb4>
    value = -value;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	ed97 7b00 	vldr	d7, [r7]
 8002c10:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002c20:	2306      	movs	r3, #6
 8002c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002c26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	0d0a      	lsrs	r2, r1, #20
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4613      	mov	r3, r2
 8002c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c4e:	4690      	mov	r8, r2
 8002c50:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002c54:	4644      	mov	r4, r8
 8002c56:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002c5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002c5e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002c62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c64:	f7fd fc22 	bl	80004ac <__aeabi_i2d>
 8002c68:	a37d      	add	r3, pc, #500	; (adr r3, 8002e60 <_etoa+0x300>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fc87 	bl	8000580 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	a37b      	add	r3, pc, #492	; (adr r3, 8002e68 <_etoa+0x308>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fac8 	bl	8000214 <__adddf3>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4614      	mov	r4, r2
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	4b7f      	ldr	r3, [pc, #508]	; (8002e94 <_etoa+0x334>)
 8002c96:	f7fd fabb 	bl	8000210 <__aeabi_dsub>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	a373      	add	r3, pc, #460	; (adr r3, 8002e70 <_etoa+0x310>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd fc6a 	bl	8000580 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd faae 	bl	8000214 <__adddf3>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7fd fef8 	bl	8000ab4 <__aeabi_d2iz>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002cc8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002cca:	f7fd fbef 	bl	80004ac <__aeabi_i2d>
 8002cce:	a36a      	add	r3, pc, #424	; (adr r3, 8002e78 <_etoa+0x318>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fc54 	bl	8000580 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	4b6c      	ldr	r3, [pc, #432]	; (8002e98 <_etoa+0x338>)
 8002ce6:	f7fd fa95 	bl	8000214 <__adddf3>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7fd fedf 	bl	8000ab4 <__aeabi_d2iz>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002cfa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002cfc:	f7fd fbd6 	bl	80004ac <__aeabi_i2d>
 8002d00:	a35f      	add	r3, pc, #380	; (adr r3, 8002e80 <_etoa+0x320>)
 8002d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d06:	f7fd fc3b 	bl	8000580 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4614      	mov	r4, r2
 8002d10:	461d      	mov	r5, r3
 8002d12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d14:	f7fd fbca 	bl	80004ac <__aeabi_i2d>
 8002d18:	a35b      	add	r3, pc, #364	; (adr r3, 8002e88 <_etoa+0x328>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fc2f 	bl	8000580 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4620      	mov	r0, r4
 8002d28:	4629      	mov	r1, r5
 8002d2a:	f7fd fa71 	bl	8000210 <__aeabi_dsub>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8002d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002d3e:	f7fd fc1f 	bl	8000580 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002d50:	17da      	asrs	r2, r3, #31
 8002d52:	469a      	mov	sl, r3
 8002d54:	4693      	mov	fp, r2
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002d62:	2200      	movs	r2, #0
 8002d64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002d68:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002d6c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	f7fd fa4e 	bl	8000214 <__adddf3>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4690      	mov	r8, r2
 8002d7e:	4699      	mov	r9, r3
 8002d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d84:	f04f 0000 	mov.w	r0, #0
 8002d88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d8c:	f7fd fa40 	bl	8000210 <__aeabi_dsub>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4692      	mov	sl, r2
 8002d96:	469b      	mov	fp, r3
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <_etoa+0x33c>)
 8002d9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002da2:	f7fd fd17 	bl	80007d4 <__aeabi_ddiv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <_etoa+0x340>)
 8002db4:	f7fd fa2e 	bl	8000214 <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002dc0:	f7fd fd08 	bl	80007d4 <__aeabi_ddiv>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <_etoa+0x344>)
 8002dd2:	f7fd fa1f 	bl	8000214 <__adddf3>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002dde:	f7fd fcf9 	bl	80007d4 <__aeabi_ddiv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4650      	mov	r0, sl
 8002de8:	4659      	mov	r1, fp
 8002dea:	f7fd fa13 	bl	8000214 <__adddf3>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4640      	mov	r0, r8
 8002df4:	4649      	mov	r1, r9
 8002df6:	f7fd fced 	bl	80007d4 <__aeabi_ddiv>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <_etoa+0x348>)
 8002e08:	f7fd fa04 	bl	8000214 <__adddf3>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd fbb4 	bl	8000580 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e28:	f7fd fe1c 	bl	8000a64 <__aeabi_dcmplt>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <_etoa+0x2ee>
    expval--;
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	3b01      	subs	r3, #1
 8002e36:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002e38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <_etoa+0x340>)
 8002e42:	f7fd fcc7 	bl	80007d4 <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e50:	2b63      	cmp	r3, #99	; 0x63
 8002e52:	dc2b      	bgt.n	8002eac <_etoa+0x34c>
 8002e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e56:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002e5a:	db27      	blt.n	8002eac <_etoa+0x34c>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e026      	b.n	8002eae <_etoa+0x34e>
 8002e60:	509f79fb 	.word	0x509f79fb
 8002e64:	3fd34413 	.word	0x3fd34413
 8002e68:	8b60c8b3 	.word	0x8b60c8b3
 8002e6c:	3fc68a28 	.word	0x3fc68a28
 8002e70:	636f4361 	.word	0x636f4361
 8002e74:	3fd287a7 	.word	0x3fd287a7
 8002e78:	0979a371 	.word	0x0979a371
 8002e7c:	400a934f 	.word	0x400a934f
 8002e80:	bbb55516 	.word	0xbbb55516
 8002e84:	40026bb1 	.word	0x40026bb1
 8002e88:	fefa39ef 	.word	0xfefa39ef
 8002e8c:	3fe62e42 	.word	0x3fe62e42
 8002e90:	7fefffff 	.word	0x7fefffff
 8002e94:	3ff80000 	.word	0x3ff80000
 8002e98:	3fe00000 	.word	0x3fe00000
 8002e9c:	402c0000 	.word	0x402c0000
 8002ea0:	40240000 	.word	0x40240000
 8002ea4:	40180000 	.word	0x40180000
 8002ea8:	3ff00000 	.word	0x3ff00000
 8002eac:	2305      	movs	r3, #5
 8002eae:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d03d      	beq.n	8002f38 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002ebc:	a368      	add	r3, pc, #416	; (adr r3, 8003060 <_etoa+0x500>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec6:	f7fd fde1 	bl	8000a8c <__aeabi_dcmpge>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d024      	beq.n	8002f1a <_etoa+0x3ba>
 8002ed0:	a365      	add	r3, pc, #404	; (adr r3, 8003068 <_etoa+0x508>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eda:	f7fd fdc3 	bl	8000a64 <__aeabi_dcmplt>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01a      	beq.n	8002f1a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	da07      	bge.n	8002efe <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002eee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002efc:	e002      	b.n	8002f04 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f18:	e00e      	b.n	8002f38 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <_etoa+0x3d8>
 8002f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <_etoa+0x3d8>
        --prec;
 8002f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002f3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d904      	bls.n	8002f52 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f50:	e001      	b.n	8002f56 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <_etoa+0x40c>
 8002f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <_etoa+0x426>
    value /= conv.F;
 8002f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f7a:	f7fd fc2b 	bl	80007d4 <__aeabi_ddiv>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002f8a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <_etoa+0x440>
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e003      	b.n	8002fa8 <_etoa+0x448>
 8002fa0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002fa4:	ed87 7b02 	vstr	d7, [r7, #8]
 8002fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fb0:	9302      	str	r3, [sp, #8]
 8002fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	ed97 0b02 	vldr	d0, [r7, #8]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	6a39      	ldr	r1, [r7, #32]
 8002fc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fc8:	f7ff fb72 	bl	80026b0 <_ftoa>
 8002fcc:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d03f      	beq.n	8003054 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <_etoa+0x484>
 8002fe0:	2045      	movs	r0, #69	; 0x45
 8002fe2:	e000      	b.n	8002fe6 <_etoa+0x486>
 8002fe4:	2065      	movs	r0, #101	; 0x65
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	1c53      	adds	r3, r2, #1
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfb8      	it	lt
 8002ffa:	425b      	neglt	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	0fdb      	lsrs	r3, r3, #31
 8003002:	b2db      	uxtb	r3, r3
 8003004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003006:	3a01      	subs	r2, #1
 8003008:	2105      	movs	r1, #5
 800300a:	9105      	str	r1, [sp, #20]
 800300c:	9204      	str	r2, [sp, #16]
 800300e:	2200      	movs	r2, #0
 8003010:	9203      	str	r2, [sp, #12]
 8003012:	220a      	movs	r2, #10
 8003014:	9202      	str	r2, [sp, #8]
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	9000      	str	r0, [sp, #0]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003022:	f7ff fa71 	bl	8002508 <_ntoa_long>
 8003026:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00f      	beq.n	8003054 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003034:	e007      	b.n	8003046 <_etoa+0x4e6>
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	1c53      	adds	r3, r2, #1
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6a39      	ldr	r1, [r7, #32]
 8003042:	2020      	movs	r0, #32
 8003044:	47a0      	blx	r4
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003050:	429a      	cmp	r2, r3
 8003052:	d8f0      	bhi.n	8003036 <_etoa+0x4d6>
    }
  }
  return idx;
 8003054:	69fb      	ldr	r3, [r7, #28]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3764      	adds	r7, #100	; 0x64
 800305a:	46bd      	mov	sp, r7
 800305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003060:	eb1c432d 	.word	0xeb1c432d
 8003064:	3f1a36e2 	.word	0x3f1a36e2
 8003068:	00000000 	.word	0x00000000
 800306c:	412e8480 	.word	0x412e8480

08003070 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	b0a3      	sub	sp, #140	; 0x8c
 8003076:	af0a      	add	r7, sp, #40	; 0x28
 8003078:	6178      	str	r0, [r7, #20]
 800307a:	6139      	str	r1, [r7, #16]
 800307c:	60fa      	str	r2, [r7, #12]
 800307e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 84be 	bne.w	8003a08 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800308c:	4ba3      	ldr	r3, [pc, #652]	; (800331c <_vsnprintf+0x2ac>)
 800308e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003090:	f000 bcba 	b.w	8003a08 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b25      	cmp	r3, #37	; 0x25
 800309a:	d00d      	beq.n	80030b8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	7818      	ldrb	r0, [r3, #0]
 80030a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a2:	1c53      	adds	r3, r2, #1
 80030a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a6:	697c      	ldr	r4, [r7, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6939      	ldr	r1, [r7, #16]
 80030ac:	47a0      	blx	r4
      format++;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3301      	adds	r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
      continue;
 80030b4:	f000 bca8 	b.w	8003a08 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	3b20      	subs	r3, #32
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d857      	bhi.n	800317c <_vsnprintf+0x10c>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <_vsnprintf+0x64>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	08003155 	.word	0x08003155
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	0800317d 	.word	0x0800317d
 80030e0:	08003169 	.word	0x08003169
 80030e4:	0800317d 	.word	0x0800317d
 80030e8:	0800317d 	.word	0x0800317d
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	0800317d 	.word	0x0800317d
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	0800317d 	.word	0x0800317d
 8003100:	08003141 	.word	0x08003141
 8003104:	0800317d 	.word	0x0800317d
 8003108:	0800312d 	.word	0x0800312d
 800310c:	0800317d 	.word	0x0800317d
 8003110:	0800317d 	.word	0x0800317d
 8003114:	08003119 	.word	0x08003119
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3301      	adds	r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	2301      	movs	r3, #1
 8003128:	653b      	str	r3, [r7, #80]	; 0x50
 800312a:	e02a      	b.n	8003182 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800312c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	3301      	adds	r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	2301      	movs	r3, #1
 800313c:	653b      	str	r3, [r7, #80]	; 0x50
 800313e:	e020      	b.n	8003182 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3301      	adds	r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	2301      	movs	r3, #1
 8003150:	653b      	str	r3, [r7, #80]	; 0x50
 8003152:	e016      	b.n	8003182 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3301      	adds	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	2301      	movs	r3, #1
 8003164:	653b      	str	r3, [r7, #80]	; 0x50
 8003166:	e00c      	b.n	8003182 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316a:	f043 0310 	orr.w	r3, r3, #16
 800316e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	2301      	movs	r3, #1
 8003178:	653b      	str	r3, [r7, #80]	; 0x50
 800317a:	e002      	b.n	8003182 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800317c:	2300      	movs	r3, #0
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
 8003180:	bf00      	nop
      }
    } while (n);
 8003182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003184:	2b00      	cmp	r3, #0
 8003186:	d19c      	bne.n	80030c2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f852 	bl	800223a <_is_digit>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <_vsnprintf+0x13a>
      width = _atoi(&format);
 800319c:	f107 0308 	add.w	r3, r7, #8
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff f861 	bl	8002268 <_atoi>
 80031a6:	65b8      	str	r0, [r7, #88]	; 0x58
 80031a8:	e01a      	b.n	80031e0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b2a      	cmp	r3, #42	; 0x2a
 80031b0:	d116      	bne.n	80031e0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80031b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031b6:	1d1a      	adds	r2, r3, #4
 80031b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da07      	bge.n	80031d6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	425b      	negs	r3, r3
 80031d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80031d4:	e001      	b.n	80031da <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b2e      	cmp	r3, #46	; 0x2e
 80031ea:	d127      	bne.n	800323c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f2:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3301      	adds	r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f81b 	bl	800223a <_is_digit>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800320a:	f107 0308 	add.w	r3, r7, #8
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f82a 	bl	8002268 <_atoi>
 8003214:	6578      	str	r0, [r7, #84]	; 0x54
 8003216:	e011      	b.n	800323c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b2a      	cmp	r3, #42	; 0x2a
 800321e:	d10d      	bne.n	800323c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003224:	1d1a      	adds	r2, r3, #4
 8003226:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800322e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003230:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003234:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3301      	adds	r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	3b68      	subs	r3, #104	; 0x68
 8003242:	2b12      	cmp	r3, #18
 8003244:	d866      	bhi.n	8003314 <_vsnprintf+0x2a4>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <_vsnprintf+0x1dc>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	080032bf 	.word	0x080032bf
 8003250:	08003315 	.word	0x08003315
 8003254:	080032f5 	.word	0x080032f5
 8003258:	08003315 	.word	0x08003315
 800325c:	08003299 	.word	0x08003299
 8003260:	08003315 	.word	0x08003315
 8003264:	08003315 	.word	0x08003315
 8003268:	08003315 	.word	0x08003315
 800326c:	08003315 	.word	0x08003315
 8003270:	08003315 	.word	0x08003315
 8003274:	08003315 	.word	0x08003315
 8003278:	08003315 	.word	0x08003315
 800327c:	080032e5 	.word	0x080032e5
 8003280:	08003315 	.word	0x08003315
 8003284:	08003315 	.word	0x08003315
 8003288:	08003315 	.word	0x08003315
 800328c:	08003315 	.word	0x08003315
 8003290:	08003315 	.word	0x08003315
 8003294:	08003305 	.word	0x08003305
      case 'l' :
        flags |= FLAGS_LONG;
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b6c      	cmp	r3, #108	; 0x6c
 80032ac:	d134      	bne.n	8003318 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80032ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b4:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3301      	adds	r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
        }
        break;
 80032bc:	e02c      	b.n	8003318 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80032be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b68      	cmp	r3, #104	; 0x68
 80032d2:	d125      	bne.n	8003320 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80032d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032da:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
        }
        break;
 80032e2:	e01d      	b.n	8003320 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
        break;
 80032f2:	e016      	b.n	8003322 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3301      	adds	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
        break;
 8003302:	e00e      	b.n	8003322 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	3301      	adds	r3, #1
 8003310:	60bb      	str	r3, [r7, #8]
        break;
 8003312:	e006      	b.n	8003322 <_vsnprintf+0x2b2>
      default :
        break;
 8003314:	bf00      	nop
 8003316:	e004      	b.n	8003322 <_vsnprintf+0x2b2>
        break;
 8003318:	bf00      	nop
 800331a:	e002      	b.n	8003322 <_vsnprintf+0x2b2>
 800331c:	080021e5 	.word	0x080021e5
        break;
 8003320:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	3b25      	subs	r3, #37	; 0x25
 8003328:	2b53      	cmp	r3, #83	; 0x53
 800332a:	f200 8360 	bhi.w	80039ee <_vsnprintf+0x97e>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <_vsnprintf+0x2c4>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	080039d7 	.word	0x080039d7
 8003338:	080039ef 	.word	0x080039ef
 800333c:	080039ef 	.word	0x080039ef
 8003340:	080039ef 	.word	0x080039ef
 8003344:	080039ef 	.word	0x080039ef
 8003348:	080039ef 	.word	0x080039ef
 800334c:	080039ef 	.word	0x080039ef
 8003350:	080039ef 	.word	0x080039ef
 8003354:	080039ef 	.word	0x080039ef
 8003358:	080039ef 	.word	0x080039ef
 800335c:	080039ef 	.word	0x080039ef
 8003360:	080039ef 	.word	0x080039ef
 8003364:	080039ef 	.word	0x080039ef
 8003368:	080039ef 	.word	0x080039ef
 800336c:	080039ef 	.word	0x080039ef
 8003370:	080039ef 	.word	0x080039ef
 8003374:	080039ef 	.word	0x080039ef
 8003378:	080039ef 	.word	0x080039ef
 800337c:	080039ef 	.word	0x080039ef
 8003380:	080039ef 	.word	0x080039ef
 8003384:	080039ef 	.word	0x080039ef
 8003388:	080039ef 	.word	0x080039ef
 800338c:	080039ef 	.word	0x080039ef
 8003390:	080039ef 	.word	0x080039ef
 8003394:	080039ef 	.word	0x080039ef
 8003398:	080039ef 	.word	0x080039ef
 800339c:	080039ef 	.word	0x080039ef
 80033a0:	080039ef 	.word	0x080039ef
 80033a4:	080039ef 	.word	0x080039ef
 80033a8:	080039ef 	.word	0x080039ef
 80033ac:	080039ef 	.word	0x080039ef
 80033b0:	080039ef 	.word	0x080039ef
 80033b4:	0800378b 	.word	0x0800378b
 80033b8:	0800373b 	.word	0x0800373b
 80033bc:	0800378b 	.word	0x0800378b
 80033c0:	080039ef 	.word	0x080039ef
 80033c4:	080039ef 	.word	0x080039ef
 80033c8:	080039ef 	.word	0x080039ef
 80033cc:	080039ef 	.word	0x080039ef
 80033d0:	080039ef 	.word	0x080039ef
 80033d4:	080039ef 	.word	0x080039ef
 80033d8:	080039ef 	.word	0x080039ef
 80033dc:	080039ef 	.word	0x080039ef
 80033e0:	080039ef 	.word	0x080039ef
 80033e4:	080039ef 	.word	0x080039ef
 80033e8:	080039ef 	.word	0x080039ef
 80033ec:	080039ef 	.word	0x080039ef
 80033f0:	080039ef 	.word	0x080039ef
 80033f4:	080039ef 	.word	0x080039ef
 80033f8:	080039ef 	.word	0x080039ef
 80033fc:	080039ef 	.word	0x080039ef
 8003400:	08003485 	.word	0x08003485
 8003404:	080039ef 	.word	0x080039ef
 8003408:	080039ef 	.word	0x080039ef
 800340c:	080039ef 	.word	0x080039ef
 8003410:	080039ef 	.word	0x080039ef
 8003414:	080039ef 	.word	0x080039ef
 8003418:	080039ef 	.word	0x080039ef
 800341c:	080039ef 	.word	0x080039ef
 8003420:	080039ef 	.word	0x080039ef
 8003424:	080039ef 	.word	0x080039ef
 8003428:	08003485 	.word	0x08003485
 800342c:	080037fb 	.word	0x080037fb
 8003430:	08003485 	.word	0x08003485
 8003434:	0800378b 	.word	0x0800378b
 8003438:	0800373b 	.word	0x0800373b
 800343c:	0800378b 	.word	0x0800378b
 8003440:	080039ef 	.word	0x080039ef
 8003444:	08003485 	.word	0x08003485
 8003448:	080039ef 	.word	0x080039ef
 800344c:	080039ef 	.word	0x080039ef
 8003450:	080039ef 	.word	0x080039ef
 8003454:	080039ef 	.word	0x080039ef
 8003458:	080039ef 	.word	0x080039ef
 800345c:	08003485 	.word	0x08003485
 8003460:	0800393b 	.word	0x0800393b
 8003464:	080039ef 	.word	0x080039ef
 8003468:	080039ef 	.word	0x080039ef
 800346c:	08003873 	.word	0x08003873
 8003470:	080039ef 	.word	0x080039ef
 8003474:	08003485 	.word	0x08003485
 8003478:	080039ef 	.word	0x080039ef
 800347c:	080039ef 	.word	0x080039ef
 8003480:	08003485 	.word	0x08003485
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b78      	cmp	r3, #120	; 0x78
 800348a:	d003      	beq.n	8003494 <_vsnprintf+0x424>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b58      	cmp	r3, #88	; 0x58
 8003492:	d102      	bne.n	800349a <_vsnprintf+0x42a>
          base = 16U;
 8003494:	2310      	movs	r3, #16
 8003496:	64bb      	str	r3, [r7, #72]	; 0x48
 8003498:	e013      	b.n	80034c2 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b6f      	cmp	r3, #111	; 0x6f
 80034a0:	d102      	bne.n	80034a8 <_vsnprintf+0x438>
          base =  8U;
 80034a2:	2308      	movs	r3, #8
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034a6:	e00c      	b.n	80034c2 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b62      	cmp	r3, #98	; 0x62
 80034ae:	d102      	bne.n	80034b6 <_vsnprintf+0x446>
          base =  2U;
 80034b0:	2302      	movs	r3, #2
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b4:	e005      	b.n	80034c2 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 80034b6:	230a      	movs	r3, #10
 80034b8:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80034ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034bc:	f023 0310 	bic.w	r3, r3, #16
 80034c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b58      	cmp	r3, #88	; 0x58
 80034c8:	d103      	bne.n	80034d2 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80034ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034cc:	f043 0320 	orr.w	r3, r3, #32
 80034d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b69      	cmp	r3, #105	; 0x69
 80034d8:	d007      	beq.n	80034ea <_vsnprintf+0x47a>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d003      	beq.n	80034ea <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80034e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e4:	f023 030c 	bic.w	r3, r3, #12
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 80034f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b69      	cmp	r3, #105	; 0x69
 8003502:	d004      	beq.n	800350e <_vsnprintf+0x49e>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	f040 8098 	bne.w	800363e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800350e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003514:	2b00      	cmp	r3, #0
 8003516:	d031      	beq.n	800357c <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800351c:	3307      	adds	r3, #7
 800351e:	f023 0307 	bic.w	r3, r3, #7
 8003522:	f103 0208 	add.w	r2, r3, #8
 8003526:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	da06      	bge.n	8003548 <_vsnprintf+0x4d8>
 800353a:	2100      	movs	r1, #0
 800353c:	f1d2 0800 	rsbs	r8, r2, #0
 8003540:	eb61 0903 	sbc.w	r9, r1, r3
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	69f9      	ldr	r1, [r7, #28]
 800354a:	0fc9      	lsrs	r1, r1, #31
 800354c:	b2c9      	uxtb	r1, r1
 800354e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003550:	2400      	movs	r4, #0
 8003552:	4682      	mov	sl, r0
 8003554:	46a3      	mov	fp, r4
 8003556:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003558:	9008      	str	r0, [sp, #32]
 800355a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800355c:	9007      	str	r0, [sp, #28]
 800355e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003560:	9006      	str	r0, [sp, #24]
 8003562:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003566:	9102      	str	r1, [sp, #8]
 8003568:	e9cd 2300 	strd	r2, r3, [sp]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003570:	6939      	ldr	r1, [r7, #16]
 8003572:	6978      	ldr	r0, [r7, #20]
 8003574:	f7ff f82e 	bl	80025d4 <_ntoa_long_long>
 8003578:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800357a:	e0da      	b.n	8003732 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800357c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8003586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800358a:	1d1a      	adds	r2, r3, #4
 800358c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	bfb8      	it	lt
 800359a:	425b      	neglt	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	0fdb      	lsrs	r3, r3, #31
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035a6:	9205      	str	r2, [sp, #20]
 80035a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035aa:	9204      	str	r2, [sp, #16]
 80035ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035ae:	9203      	str	r2, [sp, #12]
 80035b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b2:	9202      	str	r2, [sp, #8]
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	9100      	str	r1, [sp, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035bc:	6939      	ldr	r1, [r7, #16]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7fe ffa2 	bl	8002508 <_ntoa_long>
 80035c4:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80035c6:	e0b4      	b.n	8003732 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80035c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <_vsnprintf+0x572>
 80035d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e012      	b.n	8003608 <_vsnprintf+0x598>
 80035e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <_vsnprintf+0x58c>
 80035ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f0:	1d1a      	adds	r2, r3, #4
 80035f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	e005      	b.n	8003608 <_vsnprintf+0x598>
 80035fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003600:	1d1a      	adds	r2, r3, #4
 8003602:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	bfb8      	it	lt
 8003610:	425b      	neglt	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	0fdb      	lsrs	r3, r3, #31
 8003618:	b2db      	uxtb	r3, r3
 800361a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800361c:	9205      	str	r2, [sp, #20]
 800361e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003620:	9204      	str	r2, [sp, #16]
 8003622:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003624:	9203      	str	r2, [sp, #12]
 8003626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003628:	9202      	str	r2, [sp, #8]
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	9100      	str	r1, [sp, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003632:	6939      	ldr	r1, [r7, #16]
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7fe ff67 	bl	8002508 <_ntoa_long>
 800363a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800363c:	e079      	b.n	8003732 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800363e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	2b00      	cmp	r3, #0
 8003646:	d022      	beq.n	800368e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800364c:	3307      	adds	r3, #7
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	f103 0208 	add.w	r2, r3, #8
 8003656:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003660:	2000      	movs	r0, #0
 8003662:	460d      	mov	r5, r1
 8003664:	4606      	mov	r6, r0
 8003666:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003668:	9108      	str	r1, [sp, #32]
 800366a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800366c:	9107      	str	r1, [sp, #28]
 800366e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003670:	9106      	str	r1, [sp, #24]
 8003672:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003676:	2100      	movs	r1, #0
 8003678:	9102      	str	r1, [sp, #8]
 800367a:	e9cd 2300 	strd	r2, r3, [sp]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003682:	6939      	ldr	r1, [r7, #16]
 8003684:	6978      	ldr	r0, [r7, #20]
 8003686:	f7fe ffa5 	bl	80025d4 <_ntoa_long_long>
 800368a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800368c:	e051      	b.n	8003732 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d018      	beq.n	80036ca <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036a6:	9205      	str	r2, [sp, #20]
 80036a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036aa:	9204      	str	r2, [sp, #16]
 80036ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036ae:	9203      	str	r2, [sp, #12]
 80036b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036b2:	9202      	str	r2, [sp, #8]
 80036b4:	2200      	movs	r2, #0
 80036b6:	9201      	str	r2, [sp, #4]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036be:	6939      	ldr	r1, [r7, #16]
 80036c0:	6978      	ldr	r0, [r7, #20]
 80036c2:	f7fe ff21 	bl	8002508 <_ntoa_long>
 80036c6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80036c8:	e033      	b.n	8003732 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80036ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <_vsnprintf+0x674>
 80036d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	e012      	b.n	800370a <_vsnprintf+0x69a>
 80036e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <_vsnprintf+0x68e>
 80036ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	e005      	b.n	800370a <_vsnprintf+0x69a>
 80036fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800370c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370e:	9305      	str	r3, [sp, #20]
 8003710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003712:	9304      	str	r3, [sp, #16]
 8003714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003716:	9303      	str	r3, [sp, #12]
 8003718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	2300      	movs	r3, #0
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003728:	6939      	ldr	r1, [r7, #16]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7fe feec 	bl	8002508 <_ntoa_long>
 8003730:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3301      	adds	r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
        break;
 8003738:	e166      	b.n	8003a08 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b46      	cmp	r3, #70	; 0x46
 8003740:	d103      	bne.n	800374a <_vsnprintf+0x6da>
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800374a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800374e:	3307      	adds	r3, #7
 8003750:	f023 0307 	bic.w	r3, r3, #7
 8003754:	f103 0208 	add.w	r2, r3, #8
 8003758:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800375c:	ed93 7b00 	vldr	d7, [r3]
 8003760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003762:	9302      	str	r3, [sp, #8]
 8003764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	eeb0 0a47 	vmov.f32	s0, s14
 8003770:	eef0 0a67 	vmov.f32	s1, s15
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003778:	6939      	ldr	r1, [r7, #16]
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7fe ff98 	bl	80026b0 <_ftoa>
 8003780:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3301      	adds	r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
        break;
 8003788:	e13e      	b.n	8003a08 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b67      	cmp	r3, #103	; 0x67
 8003790:	d003      	beq.n	800379a <_vsnprintf+0x72a>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b47      	cmp	r3, #71	; 0x47
 8003798:	d103      	bne.n	80037a2 <_vsnprintf+0x732>
 800379a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b45      	cmp	r3, #69	; 0x45
 80037a8:	d003      	beq.n	80037b2 <_vsnprintf+0x742>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b47      	cmp	r3, #71	; 0x47
 80037b0:	d103      	bne.n	80037ba <_vsnprintf+0x74a>
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	f043 0320 	orr.w	r3, r3, #32
 80037b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80037ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037be:	3307      	adds	r3, #7
 80037c0:	f023 0307 	bic.w	r3, r3, #7
 80037c4:	f103 0208 	add.w	r2, r3, #8
 80037c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037cc:	ed93 7b00 	vldr	d7, [r3]
 80037d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d2:	9302      	str	r3, [sp, #8]
 80037d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	eeb0 0a47 	vmov.f32	s0, s14
 80037e0:	eef0 0a67 	vmov.f32	s1, s15
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037e8:	6939      	ldr	r1, [r7, #16]
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f7ff f9b8 	bl	8002b60 <_etoa>
 80037f0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
        break;
 80037f8:	e106      	b.n	8003a08 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80037fa:	2301      	movs	r3, #1
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80037fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10e      	bne.n	8003826 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003808:	e007      	b.n	800381a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800380a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800380c:	1c53      	adds	r3, r2, #1
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003810:	697c      	ldr	r4, [r7, #20]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	2020      	movs	r0, #32
 8003818:	47a0      	blx	r4
          while (l++ < width) {
 800381a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	647a      	str	r2, [r7, #68]	; 0x44
 8003820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003822:	429a      	cmp	r2, r3
 8003824:	d8f1      	bhi.n	800380a <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800382a:	1d1a      	adds	r2, r3, #4
 800382c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	b2d8      	uxtb	r0, r3
 8003834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003836:	1c53      	adds	r3, r2, #1
 8003838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800383a:	697c      	ldr	r4, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6939      	ldr	r1, [r7, #16]
 8003840:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <_vsnprintf+0x7fa>
          while (l++ < width) {
 800384c:	e007      	b.n	800385e <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 800384e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003850:	1c53      	adds	r3, r2, #1
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	697c      	ldr	r4, [r7, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6939      	ldr	r1, [r7, #16]
 800385a:	2020      	movs	r0, #32
 800385c:	47a0      	blx	r4
          while (l++ < width) {
 800385e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	647a      	str	r2, [r7, #68]	; 0x44
 8003864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003866:	429a      	cmp	r2, r3
 8003868:	d8f1      	bhi.n	800384e <_vsnprintf+0x7de>
          }
        }
        format++;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
        break;
 8003870:	e0ca      	b.n	8003a08 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <_vsnprintf+0x81a>
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	e001      	b.n	800388e <_vsnprintf+0x81e>
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	4619      	mov	r1, r3
 8003890:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003892:	f7fe fcb5 	bl	8002200 <_strnlen_s>
 8003896:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 80038a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a6:	4293      	cmp	r3, r2
 80038a8:	bf28      	it	cs
 80038aa:	4613      	movcs	r3, r2
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80038ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11a      	bne.n	80038ee <_vsnprintf+0x87e>
          while (l++ < width) {
 80038b8:	e007      	b.n	80038ca <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 80038ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038bc:	1c53      	adds	r3, r2, #1
 80038be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c0:	697c      	ldr	r4, [r7, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	2020      	movs	r0, #32
 80038c8:	47a0      	blx	r4
          while (l++ < width) {
 80038ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d8f1      	bhi.n	80038ba <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80038d6:	e00a      	b.n	80038ee <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	643a      	str	r2, [r7, #64]	; 0x40
 80038de:	7818      	ldrb	r0, [r3, #0]
 80038e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038e2:	1c53      	adds	r3, r2, #1
 80038e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e6:	697c      	ldr	r4, [r7, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6939      	ldr	r1, [r7, #16]
 80038ec:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80038ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <_vsnprintf+0x89a>
 80038f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0eb      	beq.n	80038d8 <_vsnprintf+0x868>
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	1e5a      	subs	r2, r3, #1
 8003904:	657a      	str	r2, [r7, #84]	; 0x54
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800390a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00e      	beq.n	8003932 <_vsnprintf+0x8c2>
          while (l++ < width) {
 8003914:	e007      	b.n	8003926 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8003916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003918:	1c53      	adds	r3, r2, #1
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	697c      	ldr	r4, [r7, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6939      	ldr	r1, [r7, #16]
 8003922:	2020      	movs	r0, #32
 8003924:	47a0      	blx	r4
          while (l++ < width) {
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800392c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800392e:	429a      	cmp	r2, r3
 8003930:	d8f1      	bhi.n	8003916 <_vsnprintf+0x8a6>
          }
        }
        format++;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	60bb      	str	r3, [r7, #8]
        break;
 8003938:	e066      	b.n	8003a08 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800393a:	2308      	movs	r3, #8
 800393c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800393e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003940:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003944:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003946:	2300      	movs	r3, #0
 8003948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800394c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003950:	2b00      	cmp	r3, #0
 8003952:	d023      	beq.n	800399c <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003958:	1d1a      	adds	r2, r3, #4
 800395a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	2300      	movs	r3, #0
 8003964:	603a      	str	r2, [r7, #0]
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396a:	9308      	str	r3, [sp, #32]
 800396c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800396e:	9307      	str	r3, [sp, #28]
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	9306      	str	r3, [sp, #24]
 8003974:	f04f 0210 	mov.w	r2, #16
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003980:	2300      	movs	r3, #0
 8003982:	9302      	str	r3, [sp, #8]
 8003984:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003988:	e9cd 3400 	strd	r3, r4, [sp]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003990:	6939      	ldr	r1, [r7, #16]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7fe fe1e 	bl	80025d4 <_ntoa_long_long>
 8003998:	64f8      	str	r0, [r7, #76]	; 0x4c
 800399a:	e018      	b.n	80039ce <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800399c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039a0:	1d1a      	adds	r2, r3, #4
 80039a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	9305      	str	r3, [sp, #20]
 80039ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b0:	9304      	str	r3, [sp, #16]
 80039b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b4:	9303      	str	r3, [sp, #12]
 80039b6:	2310      	movs	r3, #16
 80039b8:	9302      	str	r3, [sp, #8]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	9200      	str	r2, [sp, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7fe fd9e 	bl	8002508 <_ntoa_long>
 80039cc:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
        break;
 80039d4:	e018      	b.n	8003a08 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80039d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d8:	1c53      	adds	r3, r2, #1
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	697c      	ldr	r4, [r7, #20]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6939      	ldr	r1, [r7, #16]
 80039e2:	2025      	movs	r0, #37	; 0x25
 80039e4:	47a0      	blx	r4
        format++;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3301      	adds	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
        break;
 80039ec:	e00c      	b.n	8003a08 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	7818      	ldrb	r0, [r3, #0]
 80039f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039f4:	1c53      	adds	r3, r2, #1
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f8:	697c      	ldr	r4, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6939      	ldr	r1, [r7, #16]
 80039fe:	47a0      	blx	r4
        format++;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
        break;
 8003a06:	bf00      	nop
  while (*format)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f ab41 	bne.w	8003094 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <_vsnprintf+0x9b0>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	e000      	b.n	8003a22 <_vsnprintf+0x9b2>
 8003a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a22:	697c      	ldr	r4, [r7, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6939      	ldr	r1, [r7, #16]
 8003a28:	2000      	movs	r0, #0
 8003a2a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3764      	adds	r7, #100	; 0x64
 8003a32:	46bd      	mov	sp, r7
 8003a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a38 <vsnprintf_>:
{
  return _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
}

int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <vsnprintf_+0x28>)
 8003a52:	f7ff fb0d 	bl	8003070 <_vsnprintf>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	080021b7 	.word	0x080021b7

08003a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_MspInit+0x4c>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <HAL_MspInit+0x4c>)
 8003a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_MspInit+0x4c>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_MspInit+0x4c>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_MspInit+0x4c>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_MspInit+0x4c>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003aa2:	2007      	movs	r0, #7
 8003aa4:	f000 fe9a 	bl	80047dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2e      	ldr	r2, [pc, #184]	; (8003b8c <HAL_ADC_MspInit+0xd8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d128      	bne.n	8003b28 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	4b26      	ldr	r3, [pc, #152]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b0e:	2310      	movs	r3, #16
 8003b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b12:	2303      	movs	r3, #3
 8003b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1a:	f107 031c 	add.w	r3, r7, #28
 8003b1e:	4619      	mov	r1, r3
 8003b20:	481c      	ldr	r0, [pc, #112]	; (8003b94 <HAL_ADC_MspInit+0xe0>)
 8003b22:	f000 feb9 	bl	8004898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003b26:	e02c      	b.n	8003b82 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_ADC_MspInit+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d127      	bne.n	8003b82 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b40:	6453      	str	r3, [r2, #68]	; 0x44
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_ADC_MspInit+0xdc>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b76:	f107 031c 	add.w	r3, r7, #28
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4807      	ldr	r0, [pc, #28]	; (8003b9c <HAL_ADC_MspInit+0xe8>)
 8003b7e:	f000 fe8b 	bl	8004898 <HAL_GPIO_Init>
}
 8003b82:	bf00      	nop
 8003b84:	3730      	adds	r7, #48	; 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40012000 	.word	0x40012000
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40020000 	.word	0x40020000
 8003b98:	40012100 	.word	0x40012100
 8003b9c:	40020400 	.word	0x40020400

08003ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <NMI_Handler+0x4>

08003ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003baa:	e7fe      	b.n	8003baa <HardFault_Handler+0x4>

08003bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <MemManage_Handler+0x4>

08003bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bb6:	e7fe      	b.n	8003bb6 <BusFault_Handler+0x4>

08003bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bbc:	e7fe      	b.n	8003bbc <UsageFault_Handler+0x4>

08003bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bec:	f000 f890 	bl	8003d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <SystemInit+0x20>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <SystemInit+0x20>)
 8003c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c1c:	480d      	ldr	r0, [pc, #52]	; (8003c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c1e:	490e      	ldr	r1, [pc, #56]	; (8003c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c20:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c24:	e002      	b.n	8003c2c <LoopCopyDataInit>

08003c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c2a:	3304      	adds	r3, #4

08003c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c30:	d3f9      	bcc.n	8003c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c32:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c34:	4c0b      	ldr	r4, [pc, #44]	; (8003c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c38:	e001      	b.n	8003c3e <LoopFillZerobss>

08003c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c3c:	3204      	adds	r2, #4

08003c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c40:	d3fb      	bcc.n	8003c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c42:	f7ff ffd7 	bl	8003bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c46:	f001 fd89 	bl	800575c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c4a:	f7fe f8d9 	bl	8001e00 <main>
  bx  lr    
 8003c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c58:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003c5c:	08007468 	.word	0x08007468
  ldr r2, =_sbss
 8003c60:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003c64:	200001e0 	.word	0x200001e0

08003c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c68:	e7fe      	b.n	8003c68 <ADC_IRQHandler>
	...

08003c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <HAL_Init+0x40>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <HAL_Init+0x40>)
 8003c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_Init+0x40>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <HAL_Init+0x40>)
 8003c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_Init+0x40>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_Init+0x40>)
 8003c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c94:	2003      	movs	r0, #3
 8003c96:	f000 fda1 	bl	80047dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f000 f808 	bl	8003cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca0:	f7ff fee0 	bl	8003a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00

08003cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_InitTick+0x54>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_InitTick+0x58>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fdc7 	bl	8004862 <HAL_SYSTICK_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00e      	b.n	8003cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b0f      	cmp	r3, #15
 8003ce2:	d80a      	bhi.n	8003cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	f000 fd81 	bl	80047f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf0:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <HAL_InitTick+0x5c>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e000      	b.n	8003cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000000c 	.word	0x2000000c
 8003d08:	20000014 	.word	0x20000014
 8003d0c:	20000010 	.word	0x20000010

08003d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_IncTick+0x20>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_IncTick+0x24>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4413      	add	r3, r2
 8003d20:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <HAL_IncTick+0x24>)
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000014 	.word	0x20000014
 8003d34:	200001dc 	.word	0x200001dc

08003d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_GetTick+0x14>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	200001dc 	.word	0x200001dc

08003d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7ff ffee 	bl	8003d38 <HAL_GetTick>
 8003d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d005      	beq.n	8003d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_Delay+0x44>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d76:	bf00      	nop
 8003d78:	f7ff ffde 	bl	8003d38 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d8f7      	bhi.n	8003d78 <HAL_Delay+0x28>
  {
  }
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000014 	.word	0x20000014

08003d98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e033      	b.n	8003e16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fe7c 	bl	8003ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d118      	bne.n	8003e08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dde:	f023 0302 	bic.w	r3, r3, #2
 8003de2:	f043 0202 	orr.w	r2, r3, #2
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fae8 	bl	80043c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
 8003e06:	e001      	b.n	8003e0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_Start+0x1a>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0b2      	b.n	8003fa0 <HAL_ADC_Start+0x180>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d018      	beq.n	8003e82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e60:	4b52      	ldr	r3, [pc, #328]	; (8003fac <HAL_ADC_Start+0x18c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_ADC_Start+0x190>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0c9a      	lsrs	r2, r3, #18
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e74:	e002      	b.n	8003e7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f9      	bne.n	8003e76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d17a      	bne.n	8003f86 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ece:	d106      	bne.n	8003ede <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	f023 0206 	bic.w	r2, r3, #6
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
 8003edc:	e002      	b.n	8003ee4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eec:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <HAL_ADC_Start+0x194>)
 8003eee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ef8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d12a      	bne.n	8003f5c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <HAL_ADC_Start+0x198>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d015      	beq.n	8003f3c <HAL_ADC_Start+0x11c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <HAL_ADC_Start+0x19c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d105      	bne.n	8003f26 <HAL_ADC_Start+0x106>
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_ADC_Start+0x194>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <HAL_ADC_Start+0x1a0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d136      	bne.n	8003f9e <HAL_ADC_Start+0x17e>
 8003f30:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_ADC_Start+0x194>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d130      	bne.n	8003f9e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d129      	bne.n	8003f9e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	e020      	b.n	8003f9e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <HAL_ADC_Start+0x198>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d11b      	bne.n	8003f9e <HAL_ADC_Start+0x17e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d114      	bne.n	8003f9e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	e00b      	b.n	8003f9e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	431bde83 	.word	0x431bde83
 8003fb4:	40012300 	.word	0x40012300
 8003fb8:	40012000 	.word	0x40012000
 8003fbc:	40012100 	.word	0x40012100
 8003fc0:	40012200 	.word	0x40012200

08003fc4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_Stop+0x16>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e021      	b.n	800401e <HAL_ADC_Stop+0x5a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	f043 0201 	orr.w	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d113      	bne.n	8004070 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004056:	d10b      	bne.n	8004070 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e063      	b.n	8004138 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004070:	f7ff fe62 	bl	8003d38 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004076:	e021      	b.n	80040bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d01d      	beq.n	80040bc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <HAL_ADC_PollForConversion+0x6c>
 8004086:	f7ff fe57 	bl	8003d38 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d212      	bcs.n	80040bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d00b      	beq.n	80040bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f043 0204 	orr.w	r2, r3, #4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e03d      	b.n	8004138 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d1d6      	bne.n	8004078 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0212 	mvn.w	r2, #18
 80040d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d123      	bne.n	8004136 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11f      	bne.n	8004136 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800410e:	2b00      	cmp	r3, #0
 8004110:	d111      	bne.n	8004136 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f043 0201 	orr.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x1c>
 8004174:	2302      	movs	r3, #2
 8004176:	e113      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x244>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b09      	cmp	r3, #9
 8004186:	d925      	bls.n	80041d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68d9      	ldr	r1, [r3, #12]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	3b1e      	subs	r3, #30
 800419e:	2207      	movs	r2, #7
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43da      	mvns	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	400a      	ands	r2, r1
 80041ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68d9      	ldr	r1, [r3, #12]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	4618      	mov	r0, r3
 80041c0:	4603      	mov	r3, r0
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4403      	add	r3, r0
 80041c6:	3b1e      	subs	r3, #30
 80041c8:	409a      	lsls	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	e022      	b.n	800421a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6919      	ldr	r1, [r3, #16]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	2207      	movs	r2, #7
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43da      	mvns	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	400a      	ands	r2, r1
 80041f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6919      	ldr	r1, [r3, #16]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	4618      	mov	r0, r3
 800420a:	4603      	mov	r3, r0
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4403      	add	r3, r0
 8004210:	409a      	lsls	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b06      	cmp	r3, #6
 8004220:	d824      	bhi.n	800426c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	3b05      	subs	r3, #5
 8004234:	221f      	movs	r2, #31
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43da      	mvns	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	400a      	ands	r2, r1
 8004242:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	4618      	mov	r0, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	3b05      	subs	r3, #5
 800425e:	fa00 f203 	lsl.w	r2, r0, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	635a      	str	r2, [r3, #52]	; 0x34
 800426a:	e04c      	b.n	8004306 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d824      	bhi.n	80042be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	3b23      	subs	r3, #35	; 0x23
 8004286:	221f      	movs	r2, #31
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43da      	mvns	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	400a      	ands	r2, r1
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4618      	mov	r0, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	3b23      	subs	r3, #35	; 0x23
 80042b0:	fa00 f203 	lsl.w	r2, r0, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
 80042bc:	e023      	b.n	8004306 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	3b41      	subs	r3, #65	; 0x41
 80042d0:	221f      	movs	r2, #31
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43da      	mvns	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	400a      	ands	r2, r1
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	4618      	mov	r0, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	3b41      	subs	r3, #65	; 0x41
 80042fa:	fa00 f203 	lsl.w	r2, r0, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_ADC_ConfigChannel+0x250>)
 8004308:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <HAL_ADC_ConfigChannel+0x254>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10f      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x1d8>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b12      	cmp	r3, #18
 800431a:	d10b      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_ADC_ConfigChannel+0x254>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d12b      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x23a>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <HAL_ADC_ConfigChannel+0x258>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x1f4>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b11      	cmp	r3, #17
 800434e:	d122      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <HAL_ADC_ConfigChannel+0x258>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d111      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <HAL_ADC_ConfigChannel+0x25c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a11      	ldr	r2, [pc, #68]	; (80043bc <HAL_ADC_ConfigChannel+0x260>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	0c9a      	lsrs	r2, r3, #18
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004388:	e002      	b.n	8004390 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3b01      	subs	r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f9      	bne.n	800438a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40012300 	.word	0x40012300
 80043b0:	40012000 	.word	0x40012000
 80043b4:	10000012 	.word	0x10000012
 80043b8:	2000000c 	.word	0x2000000c
 80043bc:	431bde83 	.word	0x431bde83

080043c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043c8:	4b79      	ldr	r3, [pc, #484]	; (80045b0 <ADC_Init+0x1f0>)
 80043ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6859      	ldr	r1, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	021a      	lsls	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6899      	ldr	r1, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <ADC_Init+0x1f4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d022      	beq.n	800449e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004466:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6899      	ldr	r1, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6899      	ldr	r1, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	e00f      	b.n	80044be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0202 	bic.w	r2, r2, #2
 80044cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6899      	ldr	r1, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7e1b      	ldrb	r3, [r3, #24]
 80044d8:	005a      	lsls	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800450a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6859      	ldr	r1, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	3b01      	subs	r3, #1
 8004518:	035a      	lsls	r2, r3, #13
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	e007      	b.n	8004534 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004532:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	3b01      	subs	r3, #1
 8004550:	051a      	lsls	r2, r3, #20
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004576:	025a      	lsls	r2, r3, #9
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6899      	ldr	r1, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	029a      	lsls	r2, r3, #10
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40012300 	.word	0x40012300
 80045b4:	0f000001 	.word	0x0f000001

080045b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <__NVIC_SetPriorityGrouping+0x44>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045d4:	4013      	ands	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ea:	4a04      	ldr	r2, [pc, #16]	; (80045fc <__NVIC_SetPriorityGrouping+0x44>)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	60d3      	str	r3, [r2, #12]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <__NVIC_GetPriorityGrouping+0x18>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f003 0307 	and.w	r3, r3, #7
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00

0800461c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db0b      	blt.n	8004646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	4907      	ldr	r1, [pc, #28]	; (8004654 <__NVIC_EnableIRQ+0x38>)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2001      	movs	r0, #1
 800463e:	fa00 f202 	lsl.w	r2, r0, r2
 8004642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e100 	.word	0xe000e100

08004658 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	2b00      	cmp	r3, #0
 8004668:	db12      	blt.n	8004690 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	490a      	ldr	r1, [pc, #40]	; (800469c <__NVIC_DisableIRQ+0x44>)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2001      	movs	r0, #1
 800467a:	fa00 f202 	lsl.w	r2, r0, r2
 800467e:	3320      	adds	r3, #32
 8004680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004684:	f3bf 8f4f 	dsb	sy
}
 8004688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800468a:	f3bf 8f6f 	isb	sy
}
 800468e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	db0c      	blt.n	80046cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	f003 021f 	and.w	r2, r3, #31
 80046b8:	4907      	ldr	r1, [pc, #28]	; (80046d8 <__NVIC_ClearPendingIRQ+0x38>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2001      	movs	r0, #1
 80046c2:	fa00 f202 	lsl.w	r2, r0, r2
 80046c6:	3360      	adds	r3, #96	; 0x60
 80046c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000e100 	.word	0xe000e100

080046dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	6039      	str	r1, [r7, #0]
 80046e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	db0a      	blt.n	8004706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	490c      	ldr	r1, [pc, #48]	; (8004728 <__NVIC_SetPriority+0x4c>)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	440b      	add	r3, r1
 8004700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004704:	e00a      	b.n	800471c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4908      	ldr	r1, [pc, #32]	; (800472c <__NVIC_SetPriority+0x50>)
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	3b04      	subs	r3, #4
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	440b      	add	r3, r1
 800471a:	761a      	strb	r2, [r3, #24]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000e100 	.word	0xe000e100
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	; 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f1c3 0307 	rsb	r3, r3, #7
 800474a:	2b04      	cmp	r3, #4
 800474c:	bf28      	it	cs
 800474e:	2304      	movcs	r3, #4
 8004750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3304      	adds	r3, #4
 8004756:	2b06      	cmp	r3, #6
 8004758:	d902      	bls.n	8004760 <NVIC_EncodePriority+0x30>
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3b03      	subs	r3, #3
 800475e:	e000      	b.n	8004762 <NVIC_EncodePriority+0x32>
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	f04f 32ff 	mov.w	r2, #4294967295
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	401a      	ands	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004778:	f04f 31ff 	mov.w	r1, #4294967295
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	43d9      	mvns	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004788:	4313      	orrs	r3, r2
         );
}
 800478a:	4618      	mov	r0, r3
 800478c:	3724      	adds	r7, #36	; 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a8:	d301      	bcc.n	80047ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047aa:	2301      	movs	r3, #1
 80047ac:	e00f      	b.n	80047ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <SysTick_Config+0x40>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047b6:	210f      	movs	r1, #15
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	f7ff ff8e 	bl	80046dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <SysTick_Config+0x40>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047c6:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <SysTick_Config+0x40>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000e010 	.word	0xe000e010

080047dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fee7 	bl	80045b8 <__NVIC_SetPriorityGrouping>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	4603      	mov	r3, r0
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004804:	f7ff fefc 	bl	8004600 <__NVIC_GetPriorityGrouping>
 8004808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f7ff ff8e 	bl	8004730 <NVIC_EncodePriority>
 8004814:	4602      	mov	r2, r0
 8004816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff5d 	bl	80046dc <__NVIC_SetPriority>
}
 8004822:	bf00      	nop
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	4603      	mov	r3, r0
 8004832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff feef 	bl	800461c <__NVIC_EnableIRQ>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	4603      	mov	r3, r0
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff feff 	bl	8004658 <__NVIC_DisableIRQ>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff ff94 	bl	8004798 <SysTick_Config>
 8004870:	4603      	mov	r3, r0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	4603      	mov	r3, r0
 8004882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff09 	bl	80046a0 <__NVIC_ClearPendingIRQ>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	e165      	b.n	8004b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048b4:	2201      	movs	r2, #1
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	f040 8154 	bne.w	8004b7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d005      	beq.n	80048ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d130      	bne.n	800494c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	2203      	movs	r2, #3
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004920:	2201      	movs	r2, #1
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 0201 	and.w	r2, r3, #1
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b03      	cmp	r3, #3
 8004956:	d017      	beq.n	8004988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d123      	bne.n	80049dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	08da      	lsrs	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3208      	adds	r2, #8
 800499c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	220f      	movs	r2, #15
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	08da      	lsrs	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3208      	adds	r2, #8
 80049d6:	69b9      	ldr	r1, [r7, #24]
 80049d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	2203      	movs	r2, #3
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0203 	and.w	r2, r3, #3
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80ae 	beq.w	8004b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b5d      	ldr	r3, [pc, #372]	; (8004b98 <HAL_GPIO_Init+0x300>)
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	4a5c      	ldr	r2, [pc, #368]	; (8004b98 <HAL_GPIO_Init+0x300>)
 8004a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a2e:	4b5a      	ldr	r3, [pc, #360]	; (8004b98 <HAL_GPIO_Init+0x300>)
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3a:	4a58      	ldr	r2, [pc, #352]	; (8004b9c <HAL_GPIO_Init+0x304>)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	3302      	adds	r3, #2
 8004a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	220f      	movs	r2, #15
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a4f      	ldr	r2, [pc, #316]	; (8004ba0 <HAL_GPIO_Init+0x308>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d025      	beq.n	8004ab2 <HAL_GPIO_Init+0x21a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a4e      	ldr	r2, [pc, #312]	; (8004ba4 <HAL_GPIO_Init+0x30c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01f      	beq.n	8004aae <HAL_GPIO_Init+0x216>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a4d      	ldr	r2, [pc, #308]	; (8004ba8 <HAL_GPIO_Init+0x310>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d019      	beq.n	8004aaa <HAL_GPIO_Init+0x212>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a4c      	ldr	r2, [pc, #304]	; (8004bac <HAL_GPIO_Init+0x314>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_GPIO_Init+0x20e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a4b      	ldr	r2, [pc, #300]	; (8004bb0 <HAL_GPIO_Init+0x318>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00d      	beq.n	8004aa2 <HAL_GPIO_Init+0x20a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a4a      	ldr	r2, [pc, #296]	; (8004bb4 <HAL_GPIO_Init+0x31c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <HAL_GPIO_Init+0x206>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a49      	ldr	r2, [pc, #292]	; (8004bb8 <HAL_GPIO_Init+0x320>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_GPIO_Init+0x202>
 8004a96:	2306      	movs	r3, #6
 8004a98:	e00c      	b.n	8004ab4 <HAL_GPIO_Init+0x21c>
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	e00a      	b.n	8004ab4 <HAL_GPIO_Init+0x21c>
 8004a9e:	2305      	movs	r3, #5
 8004aa0:	e008      	b.n	8004ab4 <HAL_GPIO_Init+0x21c>
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	e006      	b.n	8004ab4 <HAL_GPIO_Init+0x21c>
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e004      	b.n	8004ab4 <HAL_GPIO_Init+0x21c>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e002      	b.n	8004ab4 <HAL_GPIO_Init+0x21c>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_GPIO_Init+0x21c>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f002 0203 	and.w	r2, r2, #3
 8004aba:	0092      	lsls	r2, r2, #2
 8004abc:	4093      	lsls	r3, r2
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ac4:	4935      	ldr	r1, [pc, #212]	; (8004b9c <HAL_GPIO_Init+0x304>)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	3302      	adds	r3, #2
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ad2:	4b3a      	ldr	r3, [pc, #232]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004af6:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004afc:	4b2f      	ldr	r3, [pc, #188]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b20:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b26:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b74:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <HAL_GPIO_Init+0x324>)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	61fb      	str	r3, [r7, #28]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	f67f ae96 	bls.w	80048b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	3724      	adds	r7, #36	; 0x24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40013800 	.word	0x40013800
 8004ba0:	40020000 	.word	0x40020000
 8004ba4:	40020400 	.word	0x40020400
 8004ba8:	40020800 	.word	0x40020800
 8004bac:	40020c00 	.word	0x40020c00
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40021400 	.word	0x40021400
 8004bb8:	40021800 	.word	0x40021800
 8004bbc:	40013c00 	.word	0x40013c00

08004bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd0:	787b      	ldrb	r3, [r7, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bdc:	e003      	b.n	8004be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	041a      	lsls	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	619a      	str	r2, [r3, #24]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0cc      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b68      	ldr	r3, [pc, #416]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d90c      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b65      	ldr	r3, [pc, #404]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b63      	ldr	r3, [pc, #396]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0b8      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c48:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a58      	ldr	r2, [pc, #352]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c60:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a52      	ldr	r2, [pc, #328]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6c:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	494d      	ldr	r1, [pc, #308]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d044      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d119      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e07f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e06f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e067      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd2:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4934      	ldr	r1, [pc, #208]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce4:	f7ff f828 	bl	8003d38 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7ff f824 	bl	8003d38 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e04f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 020c 	and.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d1eb      	bne.n	8004cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d20c      	bcs.n	8004d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b22      	ldr	r3, [pc, #136]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e032      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4916      	ldr	r1, [pc, #88]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	490e      	ldr	r1, [pc, #56]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d7a:	f000 f821 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	490a      	ldr	r1, [pc, #40]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8c:	5ccb      	ldrb	r3, [r1, r3]
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d96:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe ff88 	bl	8003cb0 <HAL_InitTick>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023c00 	.word	0x40023c00
 8004db0:	40023800 	.word	0x40023800
 8004db4:	08007448 	.word	0x08007448
 8004db8:	2000000c 	.word	0x2000000c
 8004dbc:	20000010 	.word	0x20000010

08004dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc4:	b0ae      	sub	sp, #184	; 0xb8
 8004dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de6:	4bcb      	ldr	r3, [pc, #812]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b0c      	cmp	r3, #12
 8004df0:	f200 8206 	bhi.w	8005200 <HAL_RCC_GetSysClockFreq+0x440>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08005201 	.word	0x08005201
 8004e04:	08005201 	.word	0x08005201
 8004e08:	08005201 	.word	0x08005201
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08005201 	.word	0x08005201
 8004e14:	08005201 	.word	0x08005201
 8004e18:	08005201 	.word	0x08005201
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08005201 	.word	0x08005201
 8004e24:	08005201 	.word	0x08005201
 8004e28:	08005201 	.word	0x08005201
 8004e2c:	08005031 	.word	0x08005031
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e30:	4bb9      	ldr	r3, [pc, #740]	; (8005118 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004e36:	e1e7      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e38:	4bb8      	ldr	r3, [pc, #736]	; (800511c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e3e:	e1e3      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e40:	4bb4      	ldr	r3, [pc, #720]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e4c:	4bb1      	ldr	r3, [pc, #708]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d071      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e58:	4bae      	ldr	r3, [pc, #696]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	099b      	lsrs	r3, r3, #6
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e64:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	f04f 0000 	mov.w	r0, #0
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	0159      	lsls	r1, r3, #5
 8004e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e90:	0150      	lsls	r0, r2, #5
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4621      	mov	r1, r4
 8004e98:	1a51      	subs	r1, r2, r1
 8004e9a:	6439      	str	r1, [r7, #64]	; 0x40
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	018b      	lsls	r3, r1, #6
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eba:	4641      	mov	r1, r8
 8004ebc:	018a      	lsls	r2, r1, #6
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	1a51      	subs	r1, r2, r1
 8004ec2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ed8:	4649      	mov	r1, r9
 8004eda:	00cb      	lsls	r3, r1, #3
 8004edc:	4641      	mov	r1, r8
 8004ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	00ca      	lsls	r2, r1, #3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	4622      	mov	r2, r4
 8004eee:	189b      	adds	r3, r3, r2
 8004ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	460a      	mov	r2, r1
 8004ef6:	eb42 0303 	adc.w	r3, r2, r3
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f08:	4629      	mov	r1, r5
 8004f0a:	024b      	lsls	r3, r1, #9
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f12:	4621      	mov	r1, r4
 8004f14:	024a      	lsls	r2, r1, #9
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004f2c:	f7fb fe0a 	bl	8000b44 <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4613      	mov	r3, r2
 8004f36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f3a:	e067      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3c:	4b75      	ldr	r3, [pc, #468]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f48:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f56:	2300      	movs	r3, #0
 8004f58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004f5e:	4622      	mov	r2, r4
 8004f60:	462b      	mov	r3, r5
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	0159      	lsls	r1, r3, #5
 8004f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f70:	0150      	lsls	r0, r2, #5
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4621      	mov	r1, r4
 8004f78:	1a51      	subs	r1, r2, r1
 8004f7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004f90:	4649      	mov	r1, r9
 8004f92:	018b      	lsls	r3, r1, #6
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	018a      	lsls	r2, r1, #6
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	eb63 0b01 	sbc.w	fp, r3, r1
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fbe:	4692      	mov	sl, r2
 8004fc0:	469b      	mov	fp, r3
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	eb1a 0303 	adds.w	r3, sl, r3
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	462b      	mov	r3, r5
 8004fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fde:	4629      	mov	r1, r5
 8004fe0:	028b      	lsls	r3, r1, #10
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fe8:	4621      	mov	r1, r4
 8004fea:	028a      	lsls	r2, r1, #10
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ff8:	677a      	str	r2, [r7, #116]	; 0x74
 8004ffa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004ffe:	f7fb fda1 	bl	8000b44 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4613      	mov	r3, r2
 8005008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800500c:	4b41      	ldr	r3, [pc, #260]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	3301      	adds	r3, #1
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800501e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800502e:	e0eb      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005030:	4b38      	ldr	r3, [pc, #224]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800503c:	4b35      	ldr	r3, [pc, #212]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d06b      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005048:	4b32      	ldr	r3, [pc, #200]	; (8005114 <HAL_RCC_GetSysClockFreq+0x354>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	099b      	lsrs	r3, r3, #6
 800504e:	2200      	movs	r2, #0
 8005050:	66bb      	str	r3, [r7, #104]	; 0x68
 8005052:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	663b      	str	r3, [r7, #96]	; 0x60
 800505c:	2300      	movs	r3, #0
 800505e:	667b      	str	r3, [r7, #100]	; 0x64
 8005060:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005064:	4622      	mov	r2, r4
 8005066:	462b      	mov	r3, r5
 8005068:	f04f 0000 	mov.w	r0, #0
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	0159      	lsls	r1, r3, #5
 8005072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005076:	0150      	lsls	r0, r2, #5
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4621      	mov	r1, r4
 800507e:	1a51      	subs	r1, r2, r1
 8005080:	61b9      	str	r1, [r7, #24]
 8005082:	4629      	mov	r1, r5
 8005084:	eb63 0301 	sbc.w	r3, r3, r1
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005096:	4659      	mov	r1, fp
 8005098:	018b      	lsls	r3, r1, #6
 800509a:	4651      	mov	r1, sl
 800509c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050a0:	4651      	mov	r1, sl
 80050a2:	018a      	lsls	r2, r1, #6
 80050a4:	4651      	mov	r1, sl
 80050a6:	ebb2 0801 	subs.w	r8, r2, r1
 80050aa:	4659      	mov	r1, fp
 80050ac:	eb63 0901 	sbc.w	r9, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050c4:	4690      	mov	r8, r2
 80050c6:	4699      	mov	r9, r3
 80050c8:	4623      	mov	r3, r4
 80050ca:	eb18 0303 	adds.w	r3, r8, r3
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	462b      	mov	r3, r5
 80050d2:	eb49 0303 	adc.w	r3, r9, r3
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050e4:	4629      	mov	r1, r5
 80050e6:	024b      	lsls	r3, r1, #9
 80050e8:	4621      	mov	r1, r4
 80050ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050ee:	4621      	mov	r1, r4
 80050f0:	024a      	lsls	r2, r1, #9
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050fa:	2200      	movs	r2, #0
 80050fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80050fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005100:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005104:	f7fb fd1e 	bl	8000b44 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4613      	mov	r3, r2
 800510e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005112:	e065      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x420>
 8005114:	40023800 	.word	0x40023800
 8005118:	00f42400 	.word	0x00f42400
 800511c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005120:	4b3d      	ldr	r3, [pc, #244]	; (8005218 <HAL_RCC_GetSysClockFreq+0x458>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	099b      	lsrs	r3, r3, #6
 8005126:	2200      	movs	r2, #0
 8005128:	4618      	mov	r0, r3
 800512a:	4611      	mov	r1, r2
 800512c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005130:	653b      	str	r3, [r7, #80]	; 0x50
 8005132:	2300      	movs	r3, #0
 8005134:	657b      	str	r3, [r7, #84]	; 0x54
 8005136:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	f04f 0000 	mov.w	r0, #0
 8005142:	f04f 0100 	mov.w	r1, #0
 8005146:	0159      	lsls	r1, r3, #5
 8005148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800514c:	0150      	lsls	r0, r2, #5
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4641      	mov	r1, r8
 8005154:	1a51      	subs	r1, r2, r1
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	4649      	mov	r1, r9
 800515a:	eb63 0301 	sbc.w	r3, r3, r1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800516c:	4659      	mov	r1, fp
 800516e:	018b      	lsls	r3, r1, #6
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005176:	4651      	mov	r1, sl
 8005178:	018a      	lsls	r2, r1, #6
 800517a:	4651      	mov	r1, sl
 800517c:	1a54      	subs	r4, r2, r1
 800517e:	4659      	mov	r1, fp
 8005180:	eb63 0501 	sbc.w	r5, r3, r1
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	00eb      	lsls	r3, r5, #3
 800518e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005192:	00e2      	lsls	r2, r4, #3
 8005194:	4614      	mov	r4, r2
 8005196:	461d      	mov	r5, r3
 8005198:	4643      	mov	r3, r8
 800519a:	18e3      	adds	r3, r4, r3
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	464b      	mov	r3, r9
 80051a0:	eb45 0303 	adc.w	r3, r5, r3
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051b2:	4629      	mov	r1, r5
 80051b4:	028b      	lsls	r3, r1, #10
 80051b6:	4621      	mov	r1, r4
 80051b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051bc:	4621      	mov	r1, r4
 80051be:	028a      	lsls	r2, r1, #10
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051c8:	2200      	movs	r2, #0
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80051cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051d2:	f7fb fcb7 	bl	8000b44 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4613      	mov	r3, r2
 80051dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051e0:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_RCC_GetSysClockFreq+0x458>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	0f1b      	lsrs	r3, r3, #28
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80051ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051fe:	e003      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800520c:	4618      	mov	r0, r3
 800520e:	37b8      	adds	r7, #184	; 0xb8
 8005210:	46bd      	mov	sp, r7
 8005212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	00f42400 	.word	0x00f42400

08005220 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e28d      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8083 	beq.w	8005346 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005240:	4b94      	ldr	r3, [pc, #592]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b04      	cmp	r3, #4
 800524a:	d019      	beq.n	8005280 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800524c:	4b91      	ldr	r3, [pc, #580]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005254:	2b08      	cmp	r3, #8
 8005256:	d106      	bne.n	8005266 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005258:	4b8e      	ldr	r3, [pc, #568]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005264:	d00c      	beq.n	8005280 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005266:	4b8b      	ldr	r3, [pc, #556]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d112      	bne.n	8005298 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005272:	4b88      	ldr	r3, [pc, #544]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800527e:	d10b      	bne.n	8005298 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005280:	4b84      	ldr	r3, [pc, #528]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d05b      	beq.n	8005344 <HAL_RCC_OscConfig+0x124>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d157      	bne.n	8005344 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e25a      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a0:	d106      	bne.n	80052b0 <HAL_RCC_OscConfig+0x90>
 80052a2:	4b7c      	ldr	r3, [pc, #496]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a7b      	ldr	r2, [pc, #492]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e01d      	b.n	80052ec <HAL_RCC_OscConfig+0xcc>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCC_OscConfig+0xb4>
 80052ba:	4b76      	ldr	r3, [pc, #472]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a75      	ldr	r2, [pc, #468]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	4b73      	ldr	r3, [pc, #460]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a72      	ldr	r2, [pc, #456]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e00b      	b.n	80052ec <HAL_RCC_OscConfig+0xcc>
 80052d4:	4b6f      	ldr	r3, [pc, #444]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a6e      	ldr	r2, [pc, #440]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	4b6c      	ldr	r3, [pc, #432]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a6b      	ldr	r2, [pc, #428]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80052e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d013      	beq.n	800531c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fe fd20 	bl	8003d38 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052fc:	f7fe fd1c 	bl	8003d38 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	; 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e21f      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530e:	4b61      	ldr	r3, [pc, #388]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0xdc>
 800531a:	e014      	b.n	8005346 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fe fd0c 	bl	8003d38 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005324:	f7fe fd08 	bl	8003d38 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e20b      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005336:	4b57      	ldr	r3, [pc, #348]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x104>
 8005342:	e000      	b.n	8005346 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d06f      	beq.n	8005432 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005352:	4b50      	ldr	r3, [pc, #320]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b00      	cmp	r3, #0
 800535c:	d017      	beq.n	800538e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800535e:	4b4d      	ldr	r3, [pc, #308]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005366:	2b08      	cmp	r3, #8
 8005368:	d105      	bne.n	8005376 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800536a:	4b4a      	ldr	r3, [pc, #296]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d11c      	bne.n	80053bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005382:	4b44      	ldr	r3, [pc, #272]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d116      	bne.n	80053bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538e:	4b41      	ldr	r3, [pc, #260]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_RCC_OscConfig+0x186>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d001      	beq.n	80053a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e1d3      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a6:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4937      	ldr	r1, [pc, #220]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ba:	e03a      	b.n	8005432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c4:	4b34      	ldr	r3, [pc, #208]	; (8005498 <HAL_RCC_OscConfig+0x278>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fe fcb5 	bl	8003d38 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d2:	f7fe fcb1 	bl	8003d38 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e1b4      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e4:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4925      	ldr	r1, [pc, #148]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005400:	4313      	orrs	r3, r2
 8005402:	600b      	str	r3, [r1, #0]
 8005404:	e015      	b.n	8005432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005406:	4b24      	ldr	r3, [pc, #144]	; (8005498 <HAL_RCC_OscConfig+0x278>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fe fc94 	bl	8003d38 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005414:	f7fe fc90 	bl	8003d38 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e193      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d036      	beq.n	80054ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <HAL_RCC_OscConfig+0x27c>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fe fc74 	bl	8003d38 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005454:	f7fe fc70 	bl	8003d38 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e173      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_OscConfig+0x274>)
 8005468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x234>
 8005472:	e01b      	b.n	80054ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_OscConfig+0x27c>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fe fc5d 	bl	8003d38 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005480:	e00e      	b.n	80054a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005482:	f7fe fc59 	bl	8003d38 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d907      	bls.n	80054a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e15c      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
 8005494:	40023800 	.word	0x40023800
 8005498:	42470000 	.word	0x42470000
 800549c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a0:	4b8a      	ldr	r3, [pc, #552]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80054a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1ea      	bne.n	8005482 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8097 	beq.w	80055e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054be:	4b83      	ldr	r3, [pc, #524]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	4b7f      	ldr	r3, [pc, #508]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	4a7e      	ldr	r2, [pc, #504]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6413      	str	r3, [r2, #64]	; 0x40
 80054da:	4b7c      	ldr	r3, [pc, #496]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ea:	4b79      	ldr	r3, [pc, #484]	; (80056d0 <HAL_RCC_OscConfig+0x4b0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d118      	bne.n	8005528 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f6:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_OscConfig+0x4b0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a75      	ldr	r2, [pc, #468]	; (80056d0 <HAL_RCC_OscConfig+0x4b0>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005502:	f7fe fc19 	bl	8003d38 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7fe fc15 	bl	8003d38 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e118      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	4b6c      	ldr	r3, [pc, #432]	; (80056d0 <HAL_RCC_OscConfig+0x4b0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d106      	bne.n	800553e <HAL_RCC_OscConfig+0x31e>
 8005530:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	4a65      	ldr	r2, [pc, #404]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6713      	str	r3, [r2, #112]	; 0x70
 800553c:	e01c      	b.n	8005578 <HAL_RCC_OscConfig+0x358>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b05      	cmp	r3, #5
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0x340>
 8005546:	4b61      	ldr	r3, [pc, #388]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a60      	ldr	r2, [pc, #384]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 800554c:	f043 0304 	orr.w	r3, r3, #4
 8005550:	6713      	str	r3, [r2, #112]	; 0x70
 8005552:	4b5e      	ldr	r3, [pc, #376]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	4a5d      	ldr	r2, [pc, #372]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6713      	str	r3, [r2, #112]	; 0x70
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0x358>
 8005560:	4b5a      	ldr	r3, [pc, #360]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	4a59      	ldr	r2, [pc, #356]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	6713      	str	r3, [r2, #112]	; 0x70
 800556c:	4b57      	ldr	r3, [pc, #348]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005570:	4a56      	ldr	r2, [pc, #344]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005572:	f023 0304 	bic.w	r3, r3, #4
 8005576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d015      	beq.n	80055ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fe fbda 	bl	8003d38 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005586:	e00a      	b.n	800559e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005588:	f7fe fbd6 	bl	8003d38 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	f241 3288 	movw	r2, #5000	; 0x1388
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0d7      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	4b4b      	ldr	r3, [pc, #300]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0ee      	beq.n	8005588 <HAL_RCC_OscConfig+0x368>
 80055aa:	e014      	b.n	80055d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fe fbc4 	bl	8003d38 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fe fbc0 	bl	8003d38 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0c1      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ca:	4b40      	ldr	r3, [pc, #256]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1ee      	bne.n	80055b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055dc:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	4a3a      	ldr	r2, [pc, #232]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80055e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80ad 	beq.w	800574c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055f2:	4b36      	ldr	r3, [pc, #216]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d060      	beq.n	80056c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d145      	bne.n	8005692 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005606:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <HAL_RCC_OscConfig+0x4b4>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fe fb94 	bl	8003d38 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005614:	f7fe fb90 	bl	8003d38 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e093      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	4b29      	ldr	r3, [pc, #164]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	3b01      	subs	r3, #1
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	071b      	lsls	r3, r3, #28
 800565e:	491b      	ldr	r1, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <HAL_RCC_OscConfig+0x4b4>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fe fb65 	bl	8003d38 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7fe fb61 	bl	8003d38 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e064      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x452>
 8005690:	e05c      	b.n	800574c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <HAL_RCC_OscConfig+0x4b4>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fe fb4e 	bl	8003d38 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fe fb4a 	bl	8003d38 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e04d      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_OscConfig+0x4ac>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x480>
 80056be:	e045      	b.n	800574c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e040      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40007000 	.word	0x40007000
 80056d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d8:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <HAL_RCC_OscConfig+0x538>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d030      	beq.n	8005748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d129      	bne.n	8005748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d122      	bne.n	8005748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005708:	4013      	ands	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800570e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005710:	4293      	cmp	r3, r2
 8005712:	d119      	bne.n	8005748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d10f      	bne.n	8005748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d107      	bne.n	8005748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d001      	beq.n	800574c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800

0800575c <__libc_init_array>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4d0d      	ldr	r5, [pc, #52]	; (8005794 <__libc_init_array+0x38>)
 8005760:	4c0d      	ldr	r4, [pc, #52]	; (8005798 <__libc_init_array+0x3c>)
 8005762:	1b64      	subs	r4, r4, r5
 8005764:	10a4      	asrs	r4, r4, #2
 8005766:	2600      	movs	r6, #0
 8005768:	42a6      	cmp	r6, r4
 800576a:	d109      	bne.n	8005780 <__libc_init_array+0x24>
 800576c:	4d0b      	ldr	r5, [pc, #44]	; (800579c <__libc_init_array+0x40>)
 800576e:	4c0c      	ldr	r4, [pc, #48]	; (80057a0 <__libc_init_array+0x44>)
 8005770:	f000 f820 	bl	80057b4 <_init>
 8005774:	1b64      	subs	r4, r4, r5
 8005776:	10a4      	asrs	r4, r4, #2
 8005778:	2600      	movs	r6, #0
 800577a:	42a6      	cmp	r6, r4
 800577c:	d105      	bne.n	800578a <__libc_init_array+0x2e>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	f855 3b04 	ldr.w	r3, [r5], #4
 8005784:	4798      	blx	r3
 8005786:	3601      	adds	r6, #1
 8005788:	e7ee      	b.n	8005768 <__libc_init_array+0xc>
 800578a:	f855 3b04 	ldr.w	r3, [r5], #4
 800578e:	4798      	blx	r3
 8005790:	3601      	adds	r6, #1
 8005792:	e7f2      	b.n	800577a <__libc_init_array+0x1e>
 8005794:	08007460 	.word	0x08007460
 8005798:	08007460 	.word	0x08007460
 800579c:	08007460 	.word	0x08007460
 80057a0:	08007464 	.word	0x08007464

080057a4 <memset>:
 80057a4:	4402      	add	r2, r0
 80057a6:	4603      	mov	r3, r0
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d100      	bne.n	80057ae <memset+0xa>
 80057ac:	4770      	bx	lr
 80057ae:	f803 1b01 	strb.w	r1, [r3], #1
 80057b2:	e7f9      	b.n	80057a8 <memset+0x4>

080057b4 <_init>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	bf00      	nop
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr

080057c0 <_fini>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	bf00      	nop
 80057c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c6:	bc08      	pop	{r3}
 80057c8:	469e      	mov	lr, r3
 80057ca:	4770      	bx	lr
